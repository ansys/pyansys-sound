name: GitHub CI
on:
  schedule:
    - cron: '0 0 * * *'
  pull_request:
  push:
    tags:
      - "*"
    branches:
      - main
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  MAIN_PYTHON_VERSION: '3.12'
  PACKAGE_NAME: 'ansys-sound-core'
  DOCUMENTATION_CNAME: 'sound.docs.pyansys.com'
  DOCUMENTATION_DPF_SOUND_TAG: 'latest' # DPF Sound image tag for doc building
  TEST_DPF_SOUND_MATRIX: '["25.2", "latest"]' # List of DPF Sound image tags for testing (quotes and double quotes are important!!)
  ANSRV_DPF_SOUND_REPO: ghcr.io/ansys/ansys-sound # Docker repository for DPF Sound
  ANSRV_DPF_SOUND_PORT: 6780 # Port for DPF Sound Docker containers
  DPF_SOUND_CONT_NAME: ansys-sound-core

jobs:

  update-changelog:
    name: "Update CHANGELOG for new tag"
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags')
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - uses: ansys/actions/doc-deploy-changelog@1096998b81f7ebdea116b683e11f3a8bda759ca6 # v10.0.14
        with:
          token: ${{ secrets.PYANSYS_CI_BOT_TOKEN }}
          bot-user: ${{ secrets.PYANSYS_CI_BOT_USERNAME }}
          bot-email: ${{ secrets.PYANSYS_CI_BOT_EMAIL }}

  doc-style:
    name: "Running documentation style checks"
    runs-on: ubuntu-latest
    steps:
      - name: "Running documentation style checks"
        uses: ansys/actions/doc-style@1096998b81f7ebdea116b683e11f3a8bda759ca6 # v10.0.14
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

  pull-request-name:
    if: github.event_name == 'pull_request'
    name: Check the name of the pull-request
    runs-on: ubuntu-latest
    steps:
      - name: Check pull-request name
        uses: ansys/actions/check-pr-title@1096998b81f7ebdea116b683e11f3a8bda759ca6 # v10.0.14
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

  smoke-tests:
    name: "Build and Smoke tests"
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
        python-version: ['3.10', '3.11', '3.12', '3.13']
        should-release:
          - ${{ github.event_name == 'push' && contains(github.ref, 'refs/tags') }}
        exclude:
          - should-release: false
            os: macos-latest
    steps:
      - name: "Build wheelhouse and perform smoke test"
        uses: ansys/actions/build-wheelhouse@1096998b81f7ebdea116b683e11f3a8bda759ca6 # v10.0.14
        with:
          library-name: ${{ env.PACKAGE_NAME }}
          operating-system: ${{ matrix.os }}
          python-version: ${{ matrix.python-version }}

  vulnerabilities:
    name: "Check library vulnerabilities"
    runs-on: ubuntu-latest
    steps:
      - name: "Check library vulnerabilities with default mode"
        uses: ansys/actions/check-vulnerabilities@1096998b81f7ebdea116b683e11f3a8bda759ca6 # v10.0.14
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}
          token: ${{ secrets.PYANSYS_CI_BOT_TOKEN }}
          python-package-name: ${{ env.PACKAGE_NAME }}
          dev-mode: ${{ github.ref != 'refs/heads/main' }}

# =================================================================================================
# vvvvvvvvvvvvvvvvvvvvvvvvvvvvvv    RUNNING ON SELF-HOSTED RUNNER    vvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
# =================================================================================================

  # Retrieve test matrix from the environment variable, as env variables are not directly available
  # at matrix definition (in job testing-windows below).
  retrieve-test-matrix:
    name: "Retrieve test matrix of DPF Sound Docker images"
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - id: set-matrix
        run: echo "matrix=${TEST_DPF_SOUND_MATRIX}" >> $GITHUB_OUTPUT
        env:
          TEST_DPF_SOUND_MATRIX: ${{ env.TEST_DPF_SOUND_MATRIX }}

  testing-windows:
    name: "Testing and coverage (Windows)"
    needs: [smoke-tests, retrieve-test-matrix]
    runs-on: [self-hosted, Windows, pyansys-sound]
    env:
      PYVISTA_OFF_SCREEN: true
      MPLBACKEND: Agg  # non-interactive mode ("headless backend") for matplotlib: no GUI is used when plotting
    strategy:
      fail-fast: false
      matrix:
        # This matrix contains tags of all DPF Sound Docker images to test against.
        # (see env.TEST_DPF_SOUND_MATRIX)
        docker-image: ${{ fromJson(needs.retrieve-test-matrix.outputs.matrix) }}

    steps:
      - uses: actions/checkout@v5

      - name: "Set up Python"
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}

      - name: Set up headless display
        uses: pyvista/setup-headless-display-action@v4
        with:
          pyvista: false

      - name: "Create Python venv"
        run: |
          python -m venv .venv
          .\.venv\Scripts\Activate.ps1

      - name: "Install packages for testing"
        run: |
          .\.venv\Scripts\Activate.ps1
          python -m pip install --upgrade pip
          pip install --upgrade build wheel
          pip install .[tests]

      - name: "Login to GitHub Container Registry"
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Download DPF-Sound service container
        run: docker pull ${{ env.ANSRV_DPF_SOUND_REPO }}:${{ matrix.docker-image }}

      - name: "Start DPF-Sound service and verify start"
        run: |
          .\.venv\Scripts\Activate.ps1
          docker run -d --name ${{ env.DPF_SOUND_CONT_NAME }} -e "ANSYS_DPF_ACCEPT_LA=Y" -e "ANSYSLMD_LICENSE_FILE=1055@${{ secrets.LICENSE_SERVER }}" -p ${{ env.ANSRV_DPF_SOUND_PORT }}:50052 --dns '8.8.8.8' ${{ env.ANSRV_DPF_SOUND_REPO }}:${{ matrix.docker-image }}
          python -c "from ansys.sound.core.server_helpers import validate_dpf_sound_connection; validate_dpf_sound_connection()"

      - name: "Testing"
        run: |
          .\.venv\Scripts\Activate.ps1
          pytest -v

      - name: "Upload Coverage Results"
        uses: actions/upload-artifact@v4
        with:
          name: coverage-html-${{ matrix.docker-image }}
          path: .cov/html
          retention-days: 7

      - name: "Upload coverage reports to Codecov"
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: .cov/xml

      - name: "Stop the DPF-Sound service"
        if: always()
        run: |
          docker stop $env:DPF_SOUND_CONT_NAME
          docker logs $env:DPF_SOUND_CONT_NAME
          docker rm $env:DPF_SOUND_CONT_NAME

      - name: "Stop any remaining containers"
        if: always()
        run: |
          $dockerContainers = docker ps -a -q
          if (-not [string]::IsNullOrEmpty($dockerContainers)) {
              docker stop $dockerContainers
              docker rm $dockerContainers
          }

      - name: "Delete the Docker images (and untagged ones)"
        if: always()
        run: |
          docker system prune -f

  doc-build:
    name: "Building library documentation"
    runs-on: [self-hosted, Windows, pyansys-sound]
    needs: doc-style
    steps:

      - uses: actions/checkout@v5

      - name: "Set up Python"
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}

      - name: "Create Python venv"
        run: |
          python -m venv .venv
          .\.venv\Scripts\Activate.ps1

      - name: "Install packages for documentation building"
        run: |
          .\.venv\Scripts\Activate.ps1
          python -m pip install --upgrade pip
          pip install --upgrade build wheel
          pip install .[doc]

      - name: "Login to GitHub Container Registry"
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: "Download DPF-Sound service container"
        run: docker pull ${{ env.ANSRV_DPF_SOUND_REPO }}:${{ env.DOCUMENTATION_DPF_SOUND_TAG }}

      - name: "Start DPF-Sound service and verify start"
        run: |
          .\.venv\Scripts\Activate.ps1
          docker run -d --name ${{ env.DPF_SOUND_CONT_NAME }} -e "ANSYS_DPF_ACCEPT_LA=Y" -e "ANSYSLMD_LICENSE_FILE=1055@${{ secrets.LICENSE_SERVER }}" -p ${{ env.ANSRV_DPF_SOUND_PORT }}:50052 --dns '8.8.8.8' ${{ env.ANSRV_DPF_SOUND_REPO }}:${{ env.DOCUMENTATION_DPF_SOUND_TAG }}
          python -c "from ansys.sound.core.server_helpers import validate_dpf_sound_connection; validate_dpf_sound_connection()"

      - name: "Run Ansys documentation building action"
        uses: ansys/actions/doc-build@1096998b81f7ebdea116b683e11f3a8bda759ca6 # v10.0.14
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}
          skip-install: true
          sphinxopts: -j auto -W --keep-going
          use-python-cache: false

      - name: "Stop the DPF-Sound service"
        if: always()
        run: |
          docker stop $env:DPF_SOUND_CONT_NAME
          docker logs $env:DPF_SOUND_CONT_NAME
          docker rm $env:DPF_SOUND_CONT_NAME

      - name: "Stop any remaining containers"
        if: always()
        run: |
          $dockerContainers = docker ps -a -q
          if (-not [string]::IsNullOrEmpty($dockerContainers)) {
              docker stop $dockerContainers
              docker rm $dockerContainers
          }

      - name: "Delete the Docker images (and untagged ones)"
        if: always()
        run: |
          docker system prune -f

# =================================================================================================
# =================================================================================================


  package:
    name: Package library
    needs: [testing-windows,doc-build]
    runs-on: ubuntu-latest
    steps:
      - name: Build library source and wheel artifacts
        uses: ansys/actions/build-library@1096998b81f7ebdea116b683e11f3a8bda759ca6 # v10.0.14
        with:
          library-name: ${{ env.PACKAGE_NAME }}
          python-version: ${{ env.MAIN_PYTHON_VERSION }}

  release:
    name: Release project
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags')
    needs: [package, update-changelog]
    runs-on: ubuntu-latest
    # Specifying a GitHub environment is optional, but strongly encouraged
    environment: release
    permissions:
      id-token: write
      contents: write
    steps:
      - name: "Download the library artifacts from build-library step"
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5.0.0
        with:
          name: ${{ env.PACKAGE_NAME }}-artifacts
          path: ${{ env.PACKAGE_NAME }}-artifacts

      - name: "Upload artifacts to PyPI using trusted publisher"
        uses: pypa/gh-action-pypi-publish@76f52bc884231f62b9a034ebfe128415bbaabdfc # v1.12.4
        with:
          repository-url: "https://upload.pypi.org/legacy/"
          print-hash: true
          packages-dir: ${{ env.PACKAGE_NAME }}-artifacts
          skip-existing: false

      - name: "Release to GitHub"
        uses: ansys/actions/release-github@1096998b81f7ebdea116b683e11f3a8bda759ca6 # v10.0.14
        with:
          library-name: ${{ env.PACKAGE_NAME }}
          token: ${{ secrets.GITHUB_TOKEN }}
          add-artifact-attestation-notes: true
          changelog-release-notes: true

  doc-deploy-dev:
    name: "Upload developers documentation"
    runs-on: ubuntu-latest
    needs: [vulnerabilities, package]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: "Deploy the latest documentation"
        uses: ansys/actions/doc-deploy-dev@1096998b81f7ebdea116b683e11f3a8bda759ca6 # v10.0.14
        with:
          cname: ${{ env.DOCUMENTATION_CNAME }}
          token: ${{ secrets.PYANSYS_CI_BOT_TOKEN }}
          bot-user: ${{ secrets.PYANSYS_CI_BOT_USERNAME }}
          bot-email: ${{ secrets.PYANSYS_CI_BOT_EMAIL }}

  doc-deploy-release:
    name: "Upload release documentation"
    runs-on: ubuntu-latest
    needs: release
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags')
    steps:
      - name: "Deploy the latest documentation"
        uses: ansys/actions/doc-deploy-stable@1096998b81f7ebdea116b683e11f3a8bda759ca6 # v10.0.14
        with:
          cname: ${{ env.DOCUMENTATION_CNAME }}
          token: ${{ secrets.PYANSYS_CI_BOT_TOKEN }}
          bot-user: ${{ secrets.PYANSYS_CI_BOT_USERNAME }}
          bot-email: ${{ secrets.PYANSYS_CI_BOT_EMAIL }}
