name: GitHub CI
on:
  schedule:
    - cron: '0 0 * * *'
  pull_request:
  push:
    tags:
      - "*"
    branches:
      - main
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  MAIN_PYTHON_VERSION: '3.10'
  PACKAGE_NAME: 'ansys-dpf-sound'
  ANSRV_DPF_SOUND_IMAGE: 'ghcr.io/ansys-internal/pydpf-sound'
  ANSRV_DPF_SOUND_IMAGE_WINDOWS_TAG: ghcr.io/ansys-internal/pydpf-sound/ansys-dpf-sound:latest
  ANSRV_DPF_SOUND_LICENSE_SERVER: ${{ secrets.LICENSE_SERVER }}
  ANSRV_DPF_SOUND_PORT: 6780
  DPF_SOUND_CONT_NAME: ansys-dpf-sound

jobs:

  code-style:
    name: "Running code style checks"
    runs-on: ubuntu-latest
    steps:
      - name: "Run PyAnsys code style checks"
        uses: ansys/actions/code-style@v5.0
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}

  doc-style:
    name: "Running documentation style checks"
    runs-on: ubuntu-latest
    steps:
      - name: "Running documentation style checks"
        uses: ansys/actions/doc-style@v5.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

  smoke-tests:
    name: Build and Smoke tests
    runs-on: ${{ matrix.os }}
    needs: [code-style]
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
        python-version: ['3.9', '3.10', '3.11', '3.12']
        should-release:
          - ${{ github.event_name == 'push' && contains(github.ref, 'refs/tags') }}
        exclude:
          - should-release: false
            os: macos-latest
    steps:
      - name: Build wheelhouse and perform smoke test
        uses: ansys/actions/build-wheelhouse@v5
        with:
          library-name: ${{ env.PACKAGE_NAME }}
          operating-system: ${{ matrix.os }}
          python-version: ${{ matrix.python-version }}

# =================================================================================================
# vvvvvvvvvvvvvvvvvvvvvvvvvvvvvv    RUNNING ON SELF-HOSTED RUNNER    vvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
# =================================================================================================

  testing-windows:
    name: Testing and coverage (Windows)
    needs: [smoke-tests]
    runs-on: [self-hosted, Windows, pydpfsound]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }} # self-hosted has an issue with 3.11

      - name: Set up headless display
        uses: pyvista/setup-headless-display-action@v2

      - name: Create Python venv
        run: |
          python -m venv .venv
          .\.venv\Scripts\Activate.ps1

      - name: Install packages for testing
        run: |
          .\.venv\Scripts\Activate.ps1
          python -m pip install --upgrade pip
          pip install --upgrade build wheel
          pip install .[tests]

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Download DPF-Sound service container
        run: docker pull $env:ANSRV_DPF_SOUND_IMAGE_WINDOWS_TAG

      - name: Start DPF-Sound service and verify start
        run: |
          .\.venv\Scripts\Activate.ps1
          docker run -d --name ${{ env.DPF_SOUND_CONT_NAME }} -e "ANSYS_DPF_ACCEPT_LA=Y" -e "ANSYSLMD_LICENSE_FILE=1055@${{ env.ANSRV_DPF_SOUND_LICENSE_SERVER }}" -v C:\Users\ansys\actions-runner\_work\pydpf-sound\pydpf-sound\tests\data:C:\data -p ${{ env.ANSRV_DPF_SOUND_PORT }}:50052 --dns '8.8.8.8' ${{ env.ANSRV_DPF_SOUND_IMAGE_WINDOWS_TAG }}
          python -c "from ansys.dpf.sound.server_helpers import validate_dpf_sound_connection; validate_dpf_sound_connection()"

      - name: Testing
        run: |
          .\.venv\Scripts\Activate.ps1
          pytest -v

      - name: Upload Coverage Results
        uses: actions/upload-artifact@v4
        with:
          name: coverage-html
          path: .cov/html
          retention-days: 7

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: .cov/xml


      - name: Stop the DPF-Sound service
        run: |
          docker stop $env:DPF_SOUND_CONT_NAME
          docker logs $env:DPF_SOUND_CONT_NAME
          docker rm $env:DPF_SOUND_CONT_NAME

      - name: Stop any remaining containers
        run: |
          $dockerContainers = docker ps -a -q
          if (-not [string]::IsNullOrEmpty($dockerContainers)) {
              docker stop $dockerContainers
              docker rm $dockerContainers
          }

  doc-build:
    name: "Building library documentation"
    runs-on: [self-hosted, Windows, pydpfsound]
    needs: doc-style
    steps:
      - name: "Install Git and checkout project"
        uses: actions/checkout@v4

      - name: "Setup Python"
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}

      - name: "Create Python venv and activate it"
        run: |
          python -m venv .venv
          .\.venv\Scripts\Activate.ps1

      - name: "Install packages for documentation build"
        run: |
          .\.venv\Scripts\Activate.ps1
          pip install --upgrade pip
          pip install .[doc]

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Download DPF-Sound service container
        run: docker pull $env:ANSRV_DPF_SOUND_IMAGE_WINDOWS_TAG

      - name: Start DPF-Sound service and verify start
        run: |
          .\.venv\Scripts\Activate.ps1
          docker run -d --name ${{ env.DPF_SOUND_CONT_NAME }} -e "ANSYS_DPF_ACCEPT_LA=Y" -e "ANSYSLMD_LICENSE_FILE=1055@${{ env.ANSRV_DPF_SOUND_LICENSE_SERVER }}" -v C:\Users\ansys\actions-runner\_work\pydpf-sound\pydpf-sound\tests\data:C:\data -p ${{ env.ANSRV_DPF_SOUND_PORT }}:50052 --dns '8.8.8.8' ${{ env.ANSRV_DPF_SOUND_IMAGE_WINDOWS_TAG }}
          python -c "from ansys.dpf.sound.server_helpers import validate_dpf_sound_connection; validate_dpf_sound_connection()"

      - name: Build the documentation (HTML)
        run: |
          .\.venv\Scripts\Activate.ps1
          cd doc
          .\make.bat clean
          .\make.bat html

      - name: Upload HTML documentation
        uses: actions/upload-artifact@v4
        with:
          name: documentation-html
          path: doc/_build/html
          retention-days: 7

      - name: Build the documentation (PDF)
        run: |
          .\.venv\Scripts\Activate.ps1
          cd doc
          .\make.bat clean
          .\make.bat pdf

      - name: Upload PDF documentation
        uses: actions/upload-artifact@v4
        with:
          name: documentation-pdf
          path: doc/_build/latex/ansys-dpf-sound*.pdf
          retention-days: 7

      - name: Stop the DPF-Sound service
        if: always()
        run: |
          docker stop $env:DPF_SOUND_CONT_NAME
          docker logs $env:DPF_SOUND_CONT_NAME
          docker rm $env:DPF_SOUND_CONT_NAME

      - name: Stop any remaining containers
        if: always()
        run: |
          $dockerContainers = docker ps -a -q
          if (-not [string]::IsNullOrEmpty($dockerContainers)) {
              docker stop $dockerContainers
              docker rm $dockerContainers
          }

