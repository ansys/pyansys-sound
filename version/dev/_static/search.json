[{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.TonalityAures.get_tonal_weighting_over_time.html#get_tonal_weighting_over_time","title":"get_tonal_weighting_over_time","text":"get_tonal_weighting_over_time\n\n\n\nTonalityAures.get_tonal_weighting_over_time()\n\nGet the tonal component weighting wT over time.\n\nReturns\n\nnumpy.ndarray\n\nTonal component weighting wT over time (between 0.0 and 1.0, no unit).\n\nReturn type\n\nndarray"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.signal_utilities.CropSignal.get_output_as_nparray.html#get_output_as_nparray","title":"get_output_as_nparray","text":"get_output_as_nparray\n\n\n\nCropSignal.get_output_as_nparray()\n\nGet the cropped signal as a NumPy array.\n\nReturns\n\nnumpy.ndarray\n\nCropped signal in a NumPy array.\n\nReturn type\n\nndarray"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.TonalityDIN45681.get_time_scale.html#get_time_scale","title":"get_time_scale","text":"get_time_scale\n\n\n\nTonalityDIN45681.get_time_scale()\n\nGet the DIN 45681 time scale, in s.\n\nReturns\n\nnumpy.ndarray\n\nTime array, in seconds, of the DIN 45681 parameters over time\n(decisive difference, uncertainty, and tonal adjustment).\n\nReturn type\n\nndarray"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.sound_composer.SourceSpectrum.process.html#process","title":"process","text":"process\n\n\n\nSourceSpectrum.process(sampling_frequency=44100.0)\n\nGenerate the sound of the spectrum source.\n\nThis method generates the sound of the spectrum source, using the current spectrum and\nsource control.\n\nParameters\n\nsampling_frequency\n\npython:float, default: 44100.0\n\nSampling frequency of the generated sound in Hz."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.TonalityDIN45681.window_length.html#window_length","title":"window_length","text":"window_length\n\n\n\nproperty TonalityDIN45681.window_length: float\n\nLength, in s, of a slice of the signal used to compute each spectrum."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.sound_power.SoundPowerLevelISO3744.process.html#process","title":"process","text":"process\n\n\n\nSoundPowerLevelISO3744.process()\n\nCalculate the sound power level.\n\nThis method calls the appropriate DPF Sound operator to compute the sound power level."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.TonalityECMA418_2.get_tone_frequency_over_time.html#get_tone_frequency_over_time","title":"get_tone_frequency_over_time","text":"get_tone_frequency_over_time\n\n\n\nTonalityECMA418_2.get_tone_frequency_over_time()\n\nGet the ECMA-418-2 tone frequency over time, in Hz.\n\nReturns\n\nnumpy.ndarray\n\nECMA-418-2 tone frequency over time, in Hz.\n\nReturn type\n\nndarray"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.Roughness.process.html#process","title":"process","text":"process\n\n\n\nRoughness.process()\n\nCompute the roughness.\n\nThis method calls the appropriate DPF Sound operator to compute the roughness of the signal."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.SharpnessDIN45692OverTime.get_output.html#get_output","title":"get_output","text":"get_output\n\n\n\nSharpnessDIN45692OverTime.get_output()\n\nGet the DIN 45692 sharpness over time data, as a tuple.\n\nReturns\n\npython:tuple\n\nFirst element (Field): maximum sharpness over time, in acum.\n\nSecond element (float): sharpness over time, in acum.\n\nReturn type\n\ntuple"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.ToneToNoiseRatio.get_reference_curve.html#get_reference_curve","title":"get_reference_curve","text":"get_reference_curve\n\n\n\nToneToNoiseRatio.get_reference_curve()\n\nGet the reference threshold curve, above which a tone is considered as prominent.\n\nReturns\n\nnumpy.ndarray\n\nReference curve with which to compare the TNR, as defined in the ECMA 418-1 and\nISO 7779 standards. If the TNR is higher, then the tone is defined as prominent.\n\nReturn type\n\nndarray"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.signal_utilities.CreateSoundField.sampling_frequency.html#sampling_frequency","title":"sampling_frequency","text":"sampling_frequency\n\n\n\nproperty CreateSoundField.sampling_frequency: float\n\nSampling frequency in Hz of the data."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.LoudnessISO532_2.html#loudnessiso532_2","title":"LoudnessISO532_2","text":"LoudnessISO532_2\n\n\n\nclass ansys.sound.core.psychoacoustics.LoudnessISO532_2(signal=None, field_type='Free', recording_type='Mic')\n\nComputes ISO 532-2:2017 loudness.\n\nThis class computes the binaural and monaural loudness of a signal according to the\nISO 532-2:2017 standard, corresponding to the “Moore-Glasberg method”.\n\nClass instantiation takes the following parameters.\n\nParameters\n\nsignal\n\nField | FieldsContainer, default: python:None\n\nSignal in Pa on which to compute loudness. If signal is a\nField, the listening assumption is diotic (same\nsignal presented at both ears). If signal is a\nFieldsContainer, with\nexactly 2 fields, the listening assumption is dichotic (each field’s signal presented\nat each ear).\n\nfield_type\n\npython:str, default: “Free”\n\nSound field type. Available options are “Free” and “Diffuse”.\n\nrecording_type\n\npython:str, default: “Mic”\n\nRecording type. Available options are “Mic” for a single microphone and “Head” for\na head and torso simulator.\n\nMethods\n\n\n\nAttributes\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.sound_composer.SourceControlSpectrum.html#sourcecontrolspectrum","title":"SourceControlSpectrum","text":"SourceControlSpectrum\n\n\n\nclass ansys.sound.core.sound_composer.SourceControlSpectrum(duration=0.0, method=SpectrumSynthesisMethods.IFFT)\n\nSound Composer’s spectrum source’s control class.\n\nThis class stores the source control (that is the sound duration and the sound generation\nmethod) used by the Sound Composer for generating the sound from a spectrum source.\n\nTwo sound generation methods are offered:\n\nIFFT: sound generation method based on the Inverse Fast Fourier Transform of the input\nspectrum, using random phases.\n\nHybrid: sound generation method that combines generation of pure tones and IFFT. If peaks\nare detected in the input spectrum, they are generated as pure tones (sine waves). The rest\nis synthesized using the IFFT method.\n\nClass instantiation takes the following parameters.\n\nParameters\n\nduration\n\npython:float, default: 0.0\n\nDuration of the sound generated from the spectrum source, in seconds.\n\nmethod\n\nSpectrumSynthesisMethods, default: SpectrumSynthesisMethods.IFFT\n\nMethod to use for the sound generation: IFFT or Hybrid.\n\nMethods\n\n\n\nAttributes\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.sound_composer.SourceControlTime.load_from_text_file.html#load_from_text_file","title":"load_from_text_file","text":"load_from_text_file\n\n\n\nSourceControlTime.load_from_text_file(file_str)\n\nLoad control data from a text file.\n\nParameters\n\nfile_str\n\npython:str\n\nPath to the text file. Supported files have the same text format (with the header\nAnsysSound_SoundSamples) as supported by Ansys Sound SAS."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.signal_utilities.LoadWav.html#loadwav","title":"LoadWav","text":"LoadWav\n\n\n\nclass ansys.sound.core.signal_utilities.LoadWav(path_to_wav='')\n\nLoads a signal from a WAV file.\n\nClass instantiation takes the following parameters.\n\nParameters\n\npath_to_wav\n\npython:str, default: “”\n\nPath to the WAV file to load. The path can be set during the instantiation\nof the object or with the LoadWav.set_path() method.\n\nMethods\n\n\n\nAttributes\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.xtract.XtractTonal.html#xtracttonal","title":"XtractTonal","text":"XtractTonal\n\n\n\nclass ansys.sound.core.xtract.XtractTonal(input_signal=None, input_parameters=None)\n\nPerforms signal tonal analysis using the Xtract algorithm.\n\nClass instantiation takes the following parameters.\n\nParameters\n\ninput_signal\n\nFieldsContainer | Field, default: python:None\n\nOne or more signals to extract tonal components from\nas a DPF field or fields container.\nWhen inputting a fields container,\neach signal (each field of the fields container) is processed individually.\n\ninput_parameters\n\nXtractTonalParameters, default: python:None\n\nStructure that contains the parameters of the algorithm:\n\nNFFT (int) is the number of points used for the FFT computation.\n\nRegularity setting (float) between 0 and 1.\n\nMaximum slope (float) in dB/Hz.\n\nMinimum duration (float) in seconds.\n\nIntertonal gap (float) in Hz.\n\nLocal emergence (float) in dB.\n\nThis structure is of the XtractTonalParameters type. For more information,\nsee this class.\n\nMethods\n\n\n\nAttributes\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.xtract.XtractTonalParameters.get_parameters_as_generic_data_container.html#get_parameters_as_generic_data_container","title":"get_parameters_as_generic_data_container","text":"get_parameters_as_generic_data_container\n\n\n\nXtractTonalParameters.get_parameters_as_generic_data_container()\n\nGet the parameters as a generic data container.\n\nReturns\n\nGenericDataContainer\n\nParameter structure in a generic data container.\n\nReturn type\n\nGenericDataContainer"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.LoudnessISO532_2.get_erb_center_frequencies.html#get_erb_center_frequencies","title":"get_erb_center_frequencies","text":"get_erb_center_frequencies\n\n\n\nLoudnessISO532_2.get_erb_center_frequencies()\n\nGet the ERB center frequencies in Hz.\n\nThis method returns the center frequencies in Hz of the equivalent rectangular bandwidths\n(ERB), where the specific loudness is defined.\n\nReturns\n\nnumpy.ndarray\n\nArray of ERB center frequencies in Hz.\n\nReturn type\n\nndarray"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.TonalityDIN45681.get_uncertainty.html#get_uncertainty","title":"get_uncertainty","text":"get_uncertainty\n\n\n\nTonalityDIN45681.get_uncertainty()\n\nGet the DIN 45681 uncertainty, in dB.\n\nReturns\n\npython:float\n\nUncertainty in dB.\n\nReturn type\n\nfloat"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.sound_composer.SourceBroadbandNoiseTwoParameters.load_source_bbn_two_parameters.html#load_source_bbn_two_parameters","title":"load_source_bbn_two_parameters","text":"load_source_bbn_two_parameters\n\n\n\nSourceBroadbandNoiseTwoParameters.load_source_bbn_two_parameters(file)\n\nLoad the broadband noise source with two parameters data from a file.\n\nParameters\n\nfile\n\npython:str\n\nPath to the broadband noise source with two parameters file. Supported files have the\nsame text format (with the AnsysSound_BBN_MultipleParameters header) as supported by\nAnsys Sound SAS."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.SharpnessOverTime.get_output_as_nparray.html#get_output_as_nparray","title":"get_output_as_nparray","text":"get_output_as_nparray\n\n\n\nSharpnessOverTime.get_output_as_nparray()\n\nGet the sharpness over time data in a tuple of NumPy arrays.\n\nReturns\n\npython:tuple[numpy.ndarray]\n\nFirst element: maximum sharpness over time, in acum.\n\nSecond element: sharpness over time, in acum.\n\nThird element: time scale, in s.\n\nReturn type\n\ntuple[ndarray]"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.SharpnessOverTime.get_time_scale.html#get_time_scale","title":"get_time_scale","text":"get_time_scale\n\n\n\nSharpnessOverTime.get_time_scale()\n\nGet the time scale of the sharpness over time.\n\nReturns\n\nnumpy.ndarray\n\nTime scale in s.\n\nReturn type\n\nndarray"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.xtract.Xtract.output_transient_signal.html#output_transient_signal","title":"output_transient_signal","text":"output_transient_signal\n\n\n\nproperty Xtract.output_transient_signal: tuple[FieldsContainer, FieldsContainer] | tuple[Field, Field]\n\nTransient signal.\n\nTransient signal in a tuple of DPF fields or fields containers."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.xtract.XtractTonal.input_parameters.html#input_parameters","title":"input_parameters","text":"input_parameters\n\n\n\nproperty XtractTonal.input_parameters: XtractTonalParameters\n\nInput parameters.\n\nStructure that contains the parameters of the algorithm:\n\nNFFT (int) is the number of points used for the FFT computation.\n\nRegularity setting (float) between 0 and 1.\n\nMaximum slope (float) in dB/Hz.\n\nMinimum duration (float) in seconds (s).\n\nIntertonal gap (float) in Hz.\n\nLocal emergence (float) in dB."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.sound_composer.SoundComposer.get_output.html#get_output","title":"get_output","text":"get_output\n\n\n\nSoundComposer.get_output()\n\nGet the generated signal of the Sound Composer project as a DPF field.\n\nReturns\n\nField\n\nGenerated signal as a DPF field.\n\nReturn type\n\nField"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.spectral_processing.PowerSpectralDensity.input_signal.html#input_signal","title":"input_signal","text":"input_signal\n\n\n\nproperty PowerSpectralDensity.input_signal: Field\n\nInput signal."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.ToneToNoiseRatioForOrdersOverTime.signal.html#signal","title":"signal","text":"signal\n\n\n\nproperty ToneToNoiseRatioForOrdersOverTime.signal: Field\n\nInput signal."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.TonalityISO1996_2_OverTime.noise_bandwidth_ratio.html#noise_bandwidth_ratio","title":"noise_bandwidth_ratio","text":"noise_bandwidth_ratio\n\n\n\nproperty TonalityISO1996_2_OverTime.noise_bandwidth_ratio: int | float\n\nNoise bandwidth in proportion to the critical bandwidth.\n\nNoise bandwidth, in proportion to the critical bandwidth, that is taken into account for\nthe calculation of the masking noise level (the default value 0.75 means that the masking\nnoise level is estimated in a band delimited by 75 % of the critical bandwidth on each side\nof the tone). Value must be between 0.75 and 2."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.standard_levels.OverallLevel.frequency_weighting.html#frequency_weighting","title":"frequency_weighting","text":"frequency_weighting\n\n\n\nproperty OverallLevel.frequency_weighting: str\n\nFrequency weighting of the computed level.\n\nAvailable options are “”, “A”, “B”, and “C”. If attribute reference_value\nis 2e-5 Pa, these options allow level calculation in dBSPL, dBA, dBB, and dBC, respectively.\nNote that the frequency weighting is only applied if the attribute scale is set to\n“dB”."},{"objectID":"Home","href":"examples/gallery_examples/009_calculate_tonality_indicators.html#calculate-tonality-indicators","title":"Calculate tonality indicators","text":"Calculate tonality indicators\n\nThis example shows how to calculate tonality indicators.\nThe list of indicators covered in this example is:\n\nAnnex C of ISO1996-2\n\nDIN45681\n\nECMA-418-2\n\nISO/TS 20065\n\nAures\n\nAll these indicators are calculated using the same acoustic signal,\nand the results are commented, compared, and discussed."},{"objectID":"Home","href":"examples/gallery_examples/009_calculate_tonality_indicators.html#set-up-analysis","title":"Calculate tonality indicators > Set up analysis","text":"Set up analysis\n\nSetting up the analysis consists of loading Ansys libraries, connecting to the\nDPF server, and retrieving the example file.\n\nThe signal used in this example is the flyover noise of an aircraft. The signal is sampled at\n10 kHz, and the duration is about 26 seconds.\n\n\n\nFrom the spectrogram, you can see that the signal contains some tonal components,\nespecially the two tones whose frequencies start at around 800 Hz and decrease over the\nduration of the signal, due to the Doppler effect."},{"objectID":"Home","href":"examples/gallery_examples/009_calculate_tonality_indicators.html#iso-1996-2-annex-c","title":"Calculate tonality indicators > ISO 1996-2 annex C","text":"ISO 1996-2 annex C\n\nIn this section, we calculate and print out the tonal audibility of the signal according to\nannex C of the standard ISO 1996-2 using the class TonalityISO1996_2.\n\nYou can also retrieve computation details using the method\nget_computation_details(). As you can notice, computing the ISO\n1996-2 tonality over the whole signal is not relevant, as the tonal audibility equals 0 dB in\nthat case, even if strong tonal components are audible. Rigorously speaking, the ISO 1996-2\nstandard requires at least 1 minute of stationary signal, which is often a very high bar to reach,\nespecially for transient signals. The ISO 1996-2 tonality is therefore not very useful for the\nanalysis of transient signals, and it is recommended to use the ISO 1996-2 tonality over time in\nthat case.\n\nLet us now calculate and plot the ISO 1996-2 tonality over time using the class\nTonalityISO1996_2_OverTime.\n\n\n\nIn this figure, you can notice that the tonal audibility and tonal adjustment show\nstrong tonal components near the beginning and the end of the signal.\nSome tonal content is also detected in the middle part of the signal, but less consistently so.\nThe most likely reason is that, due to the Doppler effect, the frequencies of the tones are\nchanging at a higher rate than in the other parts of the signal."},{"objectID":"Home","href":"examples/gallery_examples/009_calculate_tonality_indicators.html#din-45681","title":"Calculate tonality indicators > DIN 45681","text":"DIN 45681\n\nIn this section, we calculate, print out, and plot the tonality according to the DIN 45681\nstandard using the same signal and the class TonalityDIN45681.\n\nThe DIN 45681 tonality returns results in a similar form as the ISO 1996-2 tonality. However, as\nit is an average of the computed tonality over time, the overall DIN 45681 tonality value is\nmore relevant than that of ISO 1996-2, which computes tonality over the entire signal at once.\n\n\n\nThe DIN 45681 “decisive difference”, displayed in the figure, is comparable in its definition to\nthe ISO 1996-2 tonal audibility over time. However the default time resolution for the\ncomputation of the two indicators is different (3 s for DIN 45681, 250 ms for ISO 1996-2). In\nboth cases, you can change this time resolution using the class properties\nTonalityDIN45681.window_length for DIN 45681, and\nTonalityISO1996_2_OverTime.window_length and\nTonalityISO1996_2_OverTime.overlap for ISO 1996-2.\nAdditionally, the DIN 45681 class provides the frequency of the most prominent tone at each\ncomputation time step, with the method\nTonalityDIN45681.get_decisive_frequency_over_time()."},{"objectID":"Home","href":"examples/gallery_examples/009_calculate_tonality_indicators.html#isots-20065","title":"Calculate tonality indicators > ISO/TS 20065","text":"ISO/TS 20065\n\nIn this section, we calculate, print out, and plot the tonality according to the ISO/TS 20065\nstandard using the same signal and the class TonalityISOTS20065.\n\n\n\nAs you can see from the results, the ISO/TS 20065 tonality is basically the same as the DIN 45681\ntonality. Nonetheless a few minor differences are noteworthy:\n\nthe DIN 45681 standard computes a tonal adjustment Kt, meant to be used as a dBA penalty when\nthe sound has tonal components, whereas the ISO/TS 20065 standard does not.\n\nthe DIN 45681 standard can detect tones down to 90 Hz, whereas this limit is extended to 50 Hz\nin the ISO/TS 20065 standard. This means that a very low frequency tone (that is, between 50\nand 90 Hz) can be detected by the ISO/TS 20065 standard, but will most likely be missed by\nthe DIN 45681 standard.\n\nSome minor differences in the calculation of the detected tones’ edge slopes."},{"objectID":"Home","href":"examples/gallery_examples/009_calculate_tonality_indicators.html#aures","title":"Calculate tonality indicators > Aures","text":"Aures\n\nIn this section, we calculate, print out, and plot the tonality according to Aures model using\nthe same signal and the class TonalityAures.\n\nContrary to previously mentioned tonality standards, Aures tonality is meant to model the\nperceptual scale of tonality, which is known to have a non-linear relation to spectral peak\nemergence as expressed in decibels. It uses a specific unit called tonality unit (tu), using as a\nreference a 1-kHz pure tone with a level of 60 dB SPL, which is assigned a tonality of 1 tu.\n\n\n\nThe figure plots the the Aures tonality over time, which is the main value of interest, and the\ntonal component weighting and relative loudness weighting, which are two intermediate\nmultiplicative parameters used to calculate the tonality."},{"objectID":"Home","href":"examples/gallery_examples/009_calculate_tonality_indicators.html#ecma-418-2","title":"Calculate tonality indicators > ECMA-418-2","text":"ECMA-418-2\n\nIn this section, we calculate, print out, and plot the tonality according to the ECMA-418-2\nstandard (3rd edition, 2024) using the same signal and the class TonalityECMA418_2.\n\nAs with the Aures tonality, the ECMA-418-2 standard uses a perceptual scale, with a specific unit\ncalled tuHMS (tonality unit, hearing model of Sottek). The hearing model of Sottek is a\nperceptual model of sound, where the tonality is computed based on autocorrelation functions\ncalculated in each critical band. A value of 1 tuHMS corresponds to the tonality of a 1-kHz pure\ntone with a level of 40 dB SPL. A value of 0 tuHMS indicates that no tonality could be detected\n(that is, no tonal content), while high values in tuHMS indicate prominent tonal contents.\n\n\n\nThe figure shows the psychoacoustic tonality over time, as well as the frequency of\nthe most prominent tone at each computation time step. The frequency seemingly follows the\nDoppler effect that the previously displayed spectrogram showed, only switching back and forth\nbetween the two main tones’ frequencies.\n\nTotal running time of the script: (1 minutes 31.029 seconds)\n\n\n\nDownload Jupyter notebook: 009_calculate_tonality_indicators.ipynb\n\nDownload Python source code: 009_calculate_tonality_indicators.py\n\nDownload zipped: 009_calculate_tonality_indicators.zip\n\nGallery generated by Sphinx-Gallery"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.sound_composer.SoundComposer.add_track.html#add_track","title":"add_track","text":"add_track\n\n\n\nSoundComposer.add_track(track)\n\nAdd a track to the project.\n\nParameters\n\ntrack\n\nTrack\n\nTrack object to add."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.xtract.XtractTransient.get_output_as_nparray.html#get_output_as_nparray","title":"get_output_as_nparray","text":"get_output_as_nparray\n\n\n\nXtractTransient.get_output_as_nparray()\n\nGet the output of the transient extraction as NumPy arrays.\n\nReturns\n\npython:tuple[numpy.ndarray, numpy.ndarray]\n\nTransient signals and non-transient signals in a tuple as NumPy arrays.\n\nReturn type\n\ntuple[ndarray, ndarray]"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.TonalityISOTS20065.get_output.html#get_output","title":"get_output","text":"get_output\n\n\n\nTonalityISOTS20065.get_output()\n\nGet the ISO/TS 20065 tonality data, in a tuple containing data of various types.\n\nReturns\n\npython:tuple\n\nFirst element (float): ISO/TS 20065 tonality (mean audibility DL), in dB.\n\nSecond element (float): ISO/TS 20065 tonality uncertainty, in dB.\n\nThird element (Field): ISO/TS 20065 tonality over time (decisive audibility DLj),\nin dB.\n\nFourth element (Field): ISO/TS 20065 tonality uncertainty over time, in dB.\n\nFifth element (Field): ISO/TS 20065 decisive frequency over time, in Hz.\n\nSixth element (GenericDataContainerCollection): ISO/TS 20065 tonality details\n(individual tone data for each spectrum).\n\nReturn type\n\ntuple"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.xtract.XtractTonalParameters.html#xtracttonalparameters","title":"XtractTonalParameters","text":"XtractTonalParameters\n\n\n\nclass ansys.sound.core.xtract.XtractTonalParameters(regularity=1.0, maximum_slope=750.0, minimum_duration=1.0, intertonal_gap=20.0, local_emergence=15.0, fft_size=8192)\n\nContains tonal parameters for use in Xtract processing or signal denoising.\n\nClass instantiation takes the following parameters.\n\nParameters\n\nregularity\n\npython:float, default: 1.0\n\nRegularity parameter. Values are between 0 and 1. This parameter is designed to\nreject tonal components with too much frequency variation. You should start with\nthe default value (1.0) and then lower it to remove detected tonals whose\nfrequency evolutions are too erratic.\n\nmaximum_slope\n\npython:float, default: 750.0\n\nMaximum slope in Hz/s for each tonal component. Values are between 0 and 15000 Hz/s.\nA higher value enables finding tonal components with a greater\nfrequency slope over time.\n\nminimum_duration\n\npython:float, default: 1.0\n\nMinimum duration in seconds for each tonal component.\nValues are between 0 and 5.\n\nintertonal_gap\n\npython:float, default: 20.0\n\nMinimum gap in Hz between two tonal components.\nValues are between 10 and 200.\n\nlocal_emergence\n\npython:float, default: 15.0\n\nEmergence of the tonal components compared to the background noise in dB.\nValues are between 0 and 100.\n\nfft_size\n\npython:int, default: 8192\n\nNumber of samples for the FFT computation. The value\nmust be greater than 0.\n\nMethods\n\n\n\nAttributes\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.sound_composer.SourceControlTime.get_output.html#get_output","title":"get_output","text":"get_output\n\n\n\nSourceControlTime.get_output()\n\nGet output.\n\nThere is nothing to output.\n\nReturns\n\npython:None\n\nNone\n\nReturn type\n\nNone"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.ProminenceRatio.psd.html#psd","title":"psd","text":"psd\n\n\n\nproperty ProminenceRatio.psd: Field\n\nInput power spectral density (PSD).\n\nThe PSD field has the following characteristics:\n\nnum_entities = 1\n\nlocation = “TimeFreq_sets”\n\ndata: Vector of amplitude values in unit^2/Hz\n\ntime_freq_support: Vector of regularly spaced frequencies in Hz associated with\namplitude values (from 0 Hz to the maximum frequency)\n\nunit = “<unit>^2/Hz” (where <unit> is Pa for example).\n\nYou can use the function\ncreate_scalar_field()\nto create the field."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.ToneToNoiseRatio.frequency_list.html#frequency_list","title":"frequency_list","text":"frequency_list\n\n\n\nproperty ToneToNoiseRatio.frequency_list: list[float]\n\nTone frequency list in Hz.\n\nList of the frequencies in Hz of the tones (peaks in the PSD) where the TNR shall be\ncalculated. If this parameter is unspecified (None), a peak detection algorithm is\napplied to locate the tones in the input PSD. Then, the TNR is calculated for each detected\ntone."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.LoudnessISO532_2.get_monaural_loudness_sone.html#get_monaural_loudness_sone","title":"get_monaural_loudness_sone","text":"get_monaural_loudness_sone\n\n\n\nLoudnessISO532_2.get_monaural_loudness_sone()\n\nGet the monaural loudness in sone at each ear.\n\nReturns\n\nnumpy.ndarray\n\nMonaural loudness in sone at each ear.\n\nReturn type\n\nndarray"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.LoudnessISO532_1_TimeVarying.get_N10_sone.html#get_n10_sone","title":"get_N10_sone","text":"get_N10_sone\n\n\n\nLoudnessISO532_1_TimeVarying.get_N10_sone()\n\nGet the N10 percentile loudness.\n\nN10 is the loudness that is exceeded during a cumulated 10 % of the signal duration.\n\nReturns\n\npython:float\n\nN10 percentile loudness in sone.\n\nReturn type\n\nfloat"},{"objectID":"Home","href":"api/helpers.html#server-helpers","title":"Server helpers","text":"Server helpers\n\nThis module offers helpers to connect to a DPF server and\nvalidate the availability of DPF Sound.\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.sound_composer.SoundComposer.load.html#load","title":"load","text":"load\n\n\n\nSoundComposer.load(project_path)\n\nLoad a Sound Composer project.\n\nParameters\n\nproject_path\n\npython:str\n\nPath to the Sound Composer project file to load (.scn)."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.signal_processing.Filter.get_output.html#get_output","title":"get_output","text":"get_output\n\n\n\nFilter.get_output()\n\nGet the filtered signal as a DPF field.\n\nReturns\n\nField\n\nFiltered signal as a DPF field.\n\nReturn type\n\nField"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.xtract.XtractTonalParameters.fft_size.html#fft_size","title":"fft_size","text":"fft_size\n\n\n\nproperty XtractTonalParameters.fft_size: int\n\nNumber of FFT points."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.TonalityISOTS20065.get_uncertainty_over_time.html#get_uncertainty_over_time","title":"get_uncertainty_over_time","text":"get_uncertainty_over_time\n\n\n\nTonalityISOTS20065.get_uncertainty_over_time()\n\nGet the ISO/TS 20065 decisive audibility uncertainty, in dB over time.\n\nReturns\n\nnumpy.ndarray\n\nDecisive audibility uncertainty, in dB over time.\n\nReturn type\n\nndarray"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.standard_levels.OctaveLevelsFromSignal.process.html#process","title":"process","text":"process\n\n\n\nOctaveLevelsFromSignal.process()\n\nCompute the octave-band levels."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.xtract.XtractTonalParameters.maximum_slope.html#maximum_slope","title":"maximum_slope","text":"maximum_slope\n\n\n\nproperty XtractTonalParameters.maximum_slope: float\n\nMaximum slope in Hz/s.\n\nMaximum slope in Hz/s for each tonal component. Values are between 0 and 15000 Hz/s.\nA higher value enables finding tonal components with a greater frequency slope over time."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.standard_levels.LevelOverTime.time_weighting.html#time_weighting","title":"time_weighting","text":"time_weighting\n\n\n\nproperty LevelOverTime.time_weighting: str\n\nTime weighting of the computed level.\n\nAvailable options are “Fast”, “Slow”, “Impulse”, and “Custom”. When “Custom” is\nselected, the user can provide custom parameters using the method\nset_custom_parameters()."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.signal_utilities.LoadWav.path_to_wav.html#path_to_wav","title":"path_to_wav","text":"path_to_wav\n\n\n\nproperty LoadWav.path_to_wav: str\n\nPath to the WAV file."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.sound_composer.SourceControlSpectrum.get_output_as_nparray.html#get_output_as_nparray","title":"get_output_as_nparray","text":"get_output_as_nparray\n\n\n\nSourceControlSpectrum.get_output_as_nparray()\n\nGet output as a NumPy array.\n\nThere is nothing to output.\n\nReturns\n\nnumpy.ndarray\n\nEmpty NumPy array.\n\nReturn type\n\nndarray"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.sound_composer.SpectrumSynthesisMethods.html#spectrumsynthesismethods","title":"SpectrumSynthesisMethods","text":"SpectrumSynthesisMethods\n\n\n\nclass ansys.sound.core.sound_composer.SpectrumSynthesisMethods(*values)\n\nClass (enum) providing the list of the available methods to generate a sound from a spectrum.\n\nThe method names used here must all correspond to existing synthesis method identifiers in\nthe DPF Sound operators.\n\nAttributes\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.ProminenceRatioForOrdersOverTime.order_list.html#order_list","title":"order_list","text":"order_list\n\n\n\nproperty ProminenceRatioForOrdersOverTime.order_list: list[float]\n\nOrders list as floats.\n\nList of the order numbers on which to compute the prominence ratio, as floats."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.ProminenceRatio.get_peaks_high_frequencies.html#get_peaks_high_frequencies","title":"get_peaks_high_frequencies","text":"get_peaks_high_frequencies\n\n\n\nProminenceRatio.get_peaks_high_frequencies()\n\nGet the vector of the peaks’ higher-frequency limits.\n\nReturns\n\nnumpy.ndarray\n\nVector of the peaks’ higher-frequency limits in Hz.\n\nReturn type\n\nndarray"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.ProminenceRatioForOrdersOverTime.plot.html#plot","title":"plot","text":"plot\n\n\n\nProminenceRatioForOrdersOverTime.plot(use_rpm_scale=False)\n\nPlot all orders’ PR over time or RPM.\n\nParameters\n\nuse_rpm_scale\n\nbool\n\nIndicates whether to plot the PR as a function of time or RPM."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.sound_composer.SourceAudio.html#sourceaudio","title":"SourceAudio","text":"SourceAudio\n\n\n\nclass ansys.sound.core.sound_composer.SourceAudio(file='')\n\nSound Composer’s audio source class.\n\nThis class creates an audio source for the Sound Composer.\n\nAn audio source simply consists of a sound signal (sound samples in Pa over time).\n\nIt has no source control.\n\nClass instantiation takes the following parameters.\n\nParameters\n\nfile\n\npython:str, default: “”\n\nPath to the audio source file. Supported files are WAV files and and text files with\nthe header AnsysSound_SoundSamples.\n\nMethods\n\n\n\nAttributes\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.sound_composer.SourceControlTime.process.html#process","title":"process","text":"process\n\n\n\nSourceControlTime.process()\n\nProcess inputs.\n\nThere is nothing to process."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.sound_composer.SourceHarmonicsTwoParameters.html#sourceharmonicstwoparameters","title":"SourceHarmonicsTwoParameters","text":"SourceHarmonicsTwoParameters\n\n\n\nclass ansys.sound.core.sound_composer.SourceHarmonicsTwoParameters(file='', source_control_rpm=None, source_control2=None)\n\nSound Composer’s harmonics source with two parameters class.\n\nThis class creates a harmonics source with two parameters for the Sound Composer. A harmonics\nsource with two parameters is used to generate a sound signal from harmonics source data and\ntwo source controls.\n\nThe harmonics source data consists of a series of orders whose levels depend on the values of\ntwo control parameters.\n\nEach of the two source controls contains one control parameter’s values over time.\n\nThe first control parameter must correspond to RPM over time.\n\nClass instantiation takes the following parameters.\n\nParameters\n\nfile\n\npython:str, default: “”\n\nPath to the harmonics source with two parameters file. Supported files are text files\nwith the header AnsysSound_Orders_MultipleParameters and should be created using\nAnsys Sound SAS.\n\nsource_control_rpm\n\nSourceControlTime, default: python:None\n\nFirst source control, consisting of the RPM values over time, to use when generating\nthe sound from this source.\n\nsource_control2\n\nSourceControlTime, default: python:None\n\nSecond source control, consisting of the control parameter values over time, to use\nwhen generating the sound from this source.\n\nMethods\n\n\n\nAttributes\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.sound_composer.Track.source.html#source","title":"source","text":"source\n\n\n\nproperty Track.source: SourceBroadbandNoise | SourceBroadbandNoiseTwoParameters | SourceHarmonics | SourceHarmonicsTwoParameters | SourceSpectrum | SourceAudio\n\nSource object associated with the track.\n\nThe source of the track is used to generate the corresponding signal. Its type can be\neither SourceSpectrum, SourceBroadbandNoise,\nSourceBroadbandNoiseTwoParameters, SourceHarmonics,\nSourceHarmonicsTwoParameters, or SourceAudio."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.sound_composer.SourceBroadbandNoiseTwoParameters.plot_control.html#plot_control","title":"plot_control","text":"plot_control\n\n\n\nSourceBroadbandNoiseTwoParameters.plot_control()\n\nPlot the source controls."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.standard_levels.OctaveLevelsFromPSD.plot.html#plot","title":"plot","text":"plot\n\n\n\nOctaveLevelsFromPSD.plot()\n\nPlot the octave-band levels."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.ProminenceRatioForOrdersOverTime.html#prominenceratioforordersovertime","title":"ProminenceRatioForOrdersOverTime","text":"ProminenceRatioForOrdersOverTime\n\n\n\nclass ansys.sound.core.psychoacoustics.ProminenceRatioForOrdersOverTime(signal=None, profile=None, order_list=None)\n\nComputes the ECMA 418-1/ISO 7779 prominence ratio (PR) for specific orders over time.\n\nThis class computes the PR, as defined in ECMA 418-1 and ISO 7779 standards, following\nspecific orders over time in a given time-domain signal.\n\nClass instantiation takes the following parameters.\n\nParameters\n\nsignal\n\nField, default: python:None\n\nSignal on which to compute prominence ratio.\n\nprofile\n\nField, default: python:None\n\nAssociated RPM profile to the input signal.\n\norder_list\n\npython:list, default: python:None\n\nList of the order numbers, as floats, on which to compute the prominence ratio.\n\nMethods\n\n\n\nAttributes\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.TonalityISOTS20065.get_uncertainty.html#get_uncertainty","title":"get_uncertainty","text":"get_uncertainty\n\n\n\nTonalityISOTS20065.get_uncertainty()\n\nGet the ISO/TS 20065 uncertainty, in dB.\n\nReturns\n\npython:float\n\nUncertainty in dB.\n\nReturn type\n\nfloat"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.LoudnessISO532_1_Stationary.html#loudnessiso532_1_stationary","title":"LoudnessISO532_1_Stationary","text":"LoudnessISO532_1_Stationary\n\n\n\nclass ansys.sound.core.psychoacoustics.LoudnessISO532_1_Stationary(signal=None, field_type='Free')\n\nComputes ISO 532-1:2017 loudness for stationary sounds.\n\nThis class computes the loudness of a signal according to the ISO 532-1:2017 standard,\ncorresponding to the “Zwicker method”, for stationary sounds.\n\nClass instantiation takes the following parameters.\n\nParameters\n\nsignal\n\nField, default: python:None\n\nSignal in Pa on which to compute loudness.\n\nfield_type\n\npython:str, default: “Free”\n\nSound field type. Available options are “Free” and “Diffuse”.\n\nMethods\n\n\n\nAttributes\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.signal_utilities.WriteWav.signal.html#signal","title":"signal","text":"signal\n\n\n\nproperty WriteWav.signal: Field | FieldsContainer\n\nInput signal.\n\nSignal may be single-channel (Field, or FieldsContainer with one Field) or\nmultichannel (FieldsContainer with more than one Field)."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.signal_utilities.CreateSoundField.process.html#process","title":"process","text":"process\n\n\n\nCreateSoundField.process()\n\nCreate the PyAnsys Sound field.\n\nThis method calls the appropriate DPF Sound operator to create the PyAnsys Sound field."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.spectrogram_processing.IsolateOrders.plot.html#plot","title":"plot","text":"plot\n\n\n\nIsolateOrders.plot()\n\nPlot the signal after order isolation."},{"objectID":"Getting started","href":"getting_started.html#getting-started","title":"Getting started","text":"Getting started\n\nThis section explains how to install PyAnsys Sound (ansys-sound-core) in user mode.\nIf you are interested in contributing to PyAnsys Sound, see ref_contribute for\ninformation on installing in developer mode.\n\n"},{"objectID":"Getting started","href":"getting_started.html#prerequisites","title":"Getting started > Prerequisites","text":"Prerequisites\n\nPyAnsys Sound supports Ansys 2024 R2 and later. Make sure that you have a licensed copy of\nAnsys installed. To see which ansys-sound-core version corresponds to which Ansys version,\nsee Compatibility.\n\nPyAnsys Sound relies on these Ansys products:\n\nPyDPF-Core\n\nDPF Sound, which is a plugin for DPF\n\nTo install these prerequisites, you can use one of these methods:\n\nFrom the Download Center on the Ansys Customer Portal, select the appropriate release\nand then click the Ansys Automated Installer button. Use the downloaded installer to\ninstall Ansys and Ansys Sound Analysis and Specification (SAS). Then, perform the steps in\nInstall PyDPF-Core in the PyDPF-Core documentation.\n\nFrom the DPF pre-release, download and install DPF Server and DPF Sound as described\nin the pre-release guidelines in Install DPF Server in the PyDPF-Core documentation.\n\nYou can also use a DPF Server Docker image."},{"objectID":"Getting started","href":"getting_started.html#installation","title":"Getting started > Installation","text":"Installation\n\nTo install the latest ansys-sound-core package with pip, run this command:\n\nTo install a specific package version, specify the version in the pip command. For example, Ansys 2024 R2\nrequires version 0.1.0 of the ansys-sound-core package. To install version 0.1.0, you would run this command:\n\nYou should use a virtual environment\nbecause it keeps Python packages isolated from your Python system.\n\n"},{"objectID":"Getting started","href":"getting_started.html#compatibility","title":"Getting started > Compatibility","text":"Compatibility\n\nThe following table shows which ansys-sound-core version is compatible with which DPF Server\nversion (Ansys version).\n\nBy default, a DPF server is started from the latest installed Ansys version.\n\n\n\n\n\nDPF Server version\n\nansys.sound.core version\n\n8.0 (Ansys 2024 R2 pre0)\n\n0.1.0 and later\n\n10.0 (Ansys 2025 R2 pre0)\n\n0.2.0 and later"},{"objectID":"Getting started","href":"getting_started.html#examples","title":"Getting started > Examples","text":"Examples\n\nComprehensive information on using PyAnsys Sound is available in examples/index.\nAt the end of each example, a button allows you to download the example’s Python source code.\n\n"},{"objectID":"Getting started","href":"getting_started.html#dpf-server-docker-image","title":"Getting started > DPF Server Docker image","text":"DPF Server Docker image\n\nTo use a DPF Server Docker image, follow the steps in Run DPF Server in a Docker container\nin the PyDPF-Core documentation. Make sure that you also download the DPF Sound plugin for the corresponding release,\nsuch as ansys_dpf_sound_win_v2024.1.pre0.zip. After following these steps, you should have a running DPF Docker\ncontainer that listens on port 6780.\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.ToneToNoiseRatioForOrdersOverTime.get_rpm_scale.html#get_rpm_scale","title":"get_rpm_scale","text":"get_rpm_scale\n\n\n\nToneToNoiseRatioForOrdersOverTime.get_rpm_scale()\n\nGet the RPM scale corresponding to the TNR array over time.\n\nReturns\n\nnumpy.ndarray\n\nArray of the RPM values at the time steps of the TNR calculation.\n\nReturn type\n\nndarray"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.SharpnessDIN45692OverTime.plot.html#plot","title":"plot","text":"plot\n\n\n\nSharpnessDIN45692OverTime.plot()\n\nPlot the DIN 45692 sharpness over time."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.sound_composer.SourceAudio.load_from_text_file.html#load_from_text_file","title":"load_from_text_file","text":"load_from_text_file\n\n\n\nSourceAudio.load_from_text_file(file)\n\nLoad the audio source data from a text file.\n\nParameters\n\nfile\n\npython:str\n\nPath to the text file containing the samples over time. Supported files have the same\ntext format (with the AnsysSound_SoundSamples header) as supported by Ansys Sound SAS."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.spectrogram_processing.Stft.get_output.html#get_output","title":"get_output","text":"get_output\n\n\n\nStft.get_output()\n\nGet the STFT of the signal as a DPF fields container.\n\nReturns\n\nFieldsContainer\n\nSTFT of the signal in a DPF fields container.\n\nReturn type\n\nFieldsContainer"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.FluctuationStrength.signal.html#signal","title":"signal","text":"signal\n\n\n\nproperty FluctuationStrength.signal: Field\n\nInput signal in Pa."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.sound_composer.SourceControlSpectrum.get_output.html#get_output","title":"get_output","text":"get_output\n\n\n\nSourceControlSpectrum.get_output()\n\nGet output.\n\nThere is nothing to output.\n\nReturns\n\npython:None\n\nNone\n\nReturn type\n\nNone"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.SharpnessDIN45692.plot.html#plot","title":"plot","text":"plot\n\n\n\nSharpnessDIN45692.plot()\n\nPlot the output.\n\nThere is nothing to plot."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.TonalityISO1996_2.get_output.html#get_output","title":"get_output","text":"get_output\n\n\n\nTonalityISO1996_2.get_output()\n\nGet the ISO 1996-2 tonality data, in a tuple containing data of various types.\n\nReturns\n\npython:tuple\n\nFirst element (float): tonal audibility, in dB.\n\nSecond element (float): tonal adjustment, in dB.\n\nThird element (DataTree): computation details, that is, the main tone’s critical\nband boundary frequencies, and the total tone and noise levels in dBA.\n\nReturn type\n\ntuple[float, float, DataTree]"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.spectrogram_processing.Istft.get_output_as_nparray.html#get_output_as_nparray","title":"get_output_as_nparray","text":"get_output_as_nparray\n\n\n\nIstft.get_output_as_nparray()\n\nGet the ISTFT resulting signal as a NumPy array.\n\nReturns\n\nnumpy.ndarray\n\nISTFT resulting signal in a NumPy array.\n\nReturn type\n\nndarray"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.LoudnessISO532_1_TimeVarying.get_Lmax_phon.html#get_lmax_phon","title":"get_Lmax_phon","text":"get_Lmax_phon\n\n\n\nLoudnessISO532_1_TimeVarying.get_Lmax_phon()\n\nGet the maximum instantaneous loudness level in phon.\n\nReturns\n\npython:float\n\nMaximum loudness level in phon.\n\nReturn type\n\nfloat"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.signal_utilities.SumSignals.process.html#process","title":"process","text":"process\n\n\n\nSumSignals.process()\n\nSum signals.\n\nThis method calls the appropriate DPF Sound operator to sum signals."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.TonalityISO1996_2_OverTime.signal.html#signal","title":"signal","text":"signal\n\n\n\nproperty TonalityISO1996_2_OverTime.signal: Field\n\nInput signal in Pa."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.sound_composer.SourceHarmonics.html#sourceharmonics","title":"SourceHarmonics","text":"SourceHarmonics\n\n\n\nclass ansys.sound.core.sound_composer.SourceHarmonics(file='', source_control=None)\n\nSound Composer’s harmonics source class.\n\nThis class creates a harmonics source for the Sound Composer. A harmonics source is used to\ngenerate a sound signal from harmonics source data and one source control.\n\nThe harmonics source data consists of a series of orders whose levels depend on RPM.\n\nThe source control contains the RPM values over time.\n\nClass instantiation takes the following parameters.\n\nParameters\n\nfile\n\npython:str, default: “”\n\nPath to the harmonics source data file. Supported files are the same XML and text (with\nthe header AnsysSound_Orders) formats as supported by Ansys Sound SAS.\n\nsource_control\n\nSourceControlTime, default: python:None\n\nSource control, consisting of the RPM values over time, to use when generating the\nsound from this source.\n\nMethods\n\n\n\nAttributes\n\n"},{"objectID":"Home","href":"api/spectral_processing.html#spectral-processing","title":"Spectral processing","text":"Spectral processing\n\nThis module provides functions to process signals in the frequency domain,\nsuch as the calculation of the Power Spectral Density (PSD).\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.signal_processing.Filter.design_FIR_from_FRF_file.html#design_fir_from_frf_file","title":"design_FIR_from_FRF_file","text":"design_FIR_from_FRF_file\n\n\n\nFilter.design_FIR_from_FRF_file(file)\n\nDesign a minimum-phase FIR filter from a frequency response function (FRF) file.\n\nComputes the filter coefficients according to the filter sampling frequency and the FRF\ndata that is loaded from the specified file.\n\nIf the maximum frequency specified in the FRF file extends beyond half the filter\nsampling frequency, the FRF data is truncated to this frequency. If, on the contrary,\nthe FRF file’s maximum frequency is lower than half the filter sampling frequency, the\nFRF is zero-padded between the two.\n\nParameters\n\nfile\n\npython:str\n\nPath to the file containing the frequency response function (FRF) to load. The text\nfile shall have the same text format (with the header AnsysSound_FRF), as supported\nby Ansys Sound SAS."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.ProminenceRatio.process.html#process","title":"process","text":"process\n\n\n\nProminenceRatio.process()\n\nCompute the PR.\n\nThis method calls the appropriate DPF Sound operator to compute the PR on the PSD."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.sound_composer.SourceHarmonics.load_source_harmonics.html#load_source_harmonics","title":"load_source_harmonics","text":"load_source_harmonics\n\n\n\nSourceHarmonics.load_source_harmonics(file)\n\nLoad the harmonics source data from a file.\n\nParameters\n\nfile\n\npython:str\n\nPath to the harmonics source file. Supported files are the same XML and text (with the\nheader AnsysSound_Orders) formats as supported by Ansys Sound SAS."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.xtract.XtractTransientParameters.get_parameters_as_generic_data_container.html#get_parameters_as_generic_data_container","title":"get_parameters_as_generic_data_container","text":"get_parameters_as_generic_data_container\n\n\n\nXtractTransientParameters.get_parameters_as_generic_data_container()\n\nGet the parameters as a generic data container.\n\nReturns\n\nGenericDataContainer\n\nParameter structure in a generic data container.\n\nReturn type\n\nGenericDataContainer"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.spectral_processing.PowerSpectralDensity.get_output.html#get_output","title":"get_output","text":"get_output\n\n\n\nPowerSpectralDensity.get_output()\n\nGet the PSD data as a DPF field.\n\nReturns\n\nField\n\nPSD amplitudes in squared linear unit.\n\nReturn type\n\nField"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.TonalityISO1996_2_OverTime.process.html#process","title":"process","text":"process\n\n\n\nTonalityISO1996_2_OverTime.process()\n\nCompute the tonal audibility and tonal adjustment according to ISO1996-2 annex C."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.FluctuationStrength.get_bark_band_frequencies.html#get_bark_band_frequencies","title":"get_bark_band_frequencies","text":"get_bark_band_frequencies\n\n\n\nFluctuationStrength.get_bark_band_frequencies()\n\nGet Bark band frequencies.\n\nThis method returns the frequencies corresponding to the Bark band indexes, as a NumPy\narray.\n\nReference: Traunmüller, Hartmut. “Analytical Expressions for the Tonotopic Sensory Scale.”\nJournal of the Acoustical Society of America. Vol. 88, Issue 1, 1990, pp. 97-100.\n\nReturns\n\nnumpy.ndarray\n\nArray of Bark band frequencies, in Hz.\n\nReturn type\n\nndarray"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.SharpnessOverTime.html#sharpnessovertime","title":"SharpnessOverTime","text":"SharpnessOverTime\n\n\n\nclass ansys.sound.core.psychoacoustics.SharpnessOverTime(signal=None, field_type='Free')\n\nComputes the sharpness of a signal according to Zwicker & Fastl’s model, over time.\n\nThe calculation of this indicator is based on the loudness model for time-varying sounds\ndefined in the standard ISO 532-1. It is the loudness model of the class\nLoudnessISO532_1_TimeVarying.\n\nClass instantiation takes the following parameters.\n\nParameters\n\nsignal\n\nField, default: python:None\n\nSignal in Pa on which to compute sharpness over time.\n\nfield_type\n\npython:str, default: “Free”\n\nSound field type. Available options are “Free” and “Diffuse”.\n\nMethods\n\n\n\nAttributes\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.sound_composer.SourceAudio.set_from_generic_data_containers.html#set_from_generic_data_containers","title":"set_from_generic_data_containers","text":"set_from_generic_data_containers\n\n\n\nSourceAudio.set_from_generic_data_containers(source_data, source_control_data)\n\nSet the source and source control data from generic data containers.\n\nThis method is meant to set the source data from generic data containers obtained when\nloading a Sound Composer project file (.scn) with the method SoundComposer.load().\n\nParameters\n\nsource_data\n\nGenericDataContainer\n\nSource data as a DPF generic data container.\n\nsource_control_data\n\nGenericDataContainer\n\nSource control data as a DPF generic data container. In the case of\nSourceAudio, source control data is ignored."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.sound_composer.Track.get_as_generic_data_containers.html#get_as_generic_data_containers","title":"get_as_generic_data_containers","text":"get_as_generic_data_containers\n\n\n\nTrack.get_as_generic_data_containers()\n\nGet the track data as a generic data container.\n\nThis method is meant to return the track data as a generic data container, in the format\nneeded to save a Sound Composer project file (.scn) with the method\nSoundComposer.save().\n\nReturns\n\nGenericDataContainer\n\nTrack data as a generic data container.\n\nReturn type\n\nGenericDataContainer"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.SharpnessDIN45692.field_type.html#field_type","title":"field_type","text":"field_type\n\n\n\nproperty SharpnessDIN45692.field_type: str\n\nSound field type.\n\nAvailable options are “Free” and “Diffuse”."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.spectrogram_processing.IsolateOrders.get_output.html#get_output","title":"get_output","text":"get_output\n\n\n\nIsolateOrders.get_output()\n\nGet the temporal signal of the isolated orders as a DPF field or fields container.\n\nReturns\n\nField | FieldsContainer\n\nSignal resulting from the order isolation as a DPF field or fields container.\n\nReturn type\n\nField | FieldsContainer"},{"objectID":"Home","href":"api/sound_power.html#sound-power","title":"Sound power","text":"Sound power\n\nThis module provides functions to calculate the sound power level\nfrom time-domain signals.\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.TonalityDIN45681.get_decisive_difference_over_time.html#get_decisive_difference_over_time","title":"get_decisive_difference_over_time","text":"get_decisive_difference_over_time\n\n\n\nTonalityDIN45681.get_decisive_difference_over_time()\n\nGet the DIN 45681 decisive difference DLj, in dB over time.\n\nReturns\n\nnumpy.ndarray\n\nDecisive difference DLj, in dB over time.\n\nReturn type\n\nndarray"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.TonalityAures.get_loudness_weighting_over_time.html#get_loudness_weighting_over_time","title":"get_loudness_weighting_over_time","text":"get_loudness_weighting_over_time\n\n\n\nTonalityAures.get_loudness_weighting_over_time()\n\nGet the relative loudness weighting wGr over time.\n\nReturns\n\nnumpy.ndarray\n\nRelative loudness weighting wGr over time (between 0.0 and 1.0, no unit).\n\nReturn type\n\nndarray"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.TonalityAures.process.html#process","title":"process","text":"process\n\n\n\nTonalityAures.process()\n\nCompute the Aures tonality."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.xtract.XtractDenoiser.output_denoised_signals.html#output_denoised_signals","title":"output_denoised_signals","text":"output_denoised_signals\n\n\n\nproperty XtractDenoiser.output_denoised_signals: FieldsContainer | Field\n\nOutput denoised signals.\n\nOne or more denoised signals as a DPF field or fields container (depending on\nthe input)."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.xtract.XtractTonal.get_output.html#get_output","title":"get_output","text":"get_output\n\n\n\nXtractTonal.get_output()\n\nGet the output of the tonal analysis.\n\nReturns\n\npython:tuple[FieldsContainer, FieldsContainer] | python:tuple[Field, Field]\n\nTonal and non-tonal signals in a tuple as DPF fields containers or fields.\n\nReturn type\n\ntuple[FieldsContainer, FieldsContainer] | tuple[Field, Field]"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.signal_utilities.CreateSoundField.unit.html#unit","title":"unit","text":"unit\n\n\n\nproperty CreateSoundField.unit: str\n\nUnit of the data to store."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.sound_composer.SourceHarmonicsTwoParameters.process.html#process","title":"process","text":"process\n\n\n\nSourceHarmonicsTwoParameters.process(sampling_frequency=44100.0)\n\nGenerate the sound of the harmonics source with two parameters.\n\nThis method generates the sound of the harmonics source with two parameters, using the\ncurrent harmonics source data and source controls.\n\nParameters\n\nsampling_frequency\n\npython:float, default: 44100.0\n\nSampling frequency of the generated sound in Hz."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.ProminenceRatioForOrdersOverTime.get_rpm_scale.html#get_rpm_scale","title":"get_rpm_scale","text":"get_rpm_scale\n\n\n\nProminenceRatioForOrdersOverTime.get_rpm_scale()\n\nGet the RPM scale corresponding to the PR array over time.\n\nReturns\n\nnumpy.ndarray\n\nArray of the RPM values at the time steps of the PR calculation.\n\nReturn type\n\nndarray"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.signal_utilities.LoadWav.process.html#process","title":"process","text":"process\n\n\n\nLoadWav.process()\n\nLoad the WAV file.\n\nThis method calls the appropriate DPF Sound operator to load the WAV file."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.Roughness.html#roughness","title":"Roughness","text":"Roughness\n\n\n\nclass ansys.sound.core.psychoacoustics.Roughness(signal=None)\n\nComputes the roughness and the roughness over time of a sound.\n\nReference: Daniel and Weber, “Psychoacoustical roughness: implementation of an\noptimized model.” Acta Acustica united with Acustica, 83, pp. 113-123 (1997).\n\nClass instantiation takes the following parameters.\n\nParameters\n\nsignal\n\nField, default: python:None\n\nSignal in Pa on which to compute roughness.\n\nMethods\n\n\n\nAttributes\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.ProminenceRatio.get_peaks_frequencies.html#get_peaks_frequencies","title":"get_peaks_frequencies","text":"get_peaks_frequencies\n\n\n\nProminenceRatio.get_peaks_frequencies()\n\nGet the vector of the peaks’ frequencies.\n\nReturns\n\nnumpy.ndarray\n\nVector of the peaks’ frequencies in Hz.\n\nReturn type\n\nndarray"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.sound_composer.SourceSpectrum.get_output_as_nparray.html#get_output_as_nparray","title":"get_output_as_nparray","text":"get_output_as_nparray\n\n\n\nSourceSpectrum.get_output_as_nparray()\n\nGet the generated sound as a NumPy array.\n\nReturns\n\nnumpy.ndarray\n\nGenerated sound as a NumPy array.\n\nReturn type\n\nndarray"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.TonalityISOTS20065.get_tone_number.html#get_tone_number","title":"get_tone_number","text":"get_tone_number\n\n\n\nTonalityISOTS20065.get_tone_number(spectrum_index)\n\nGet the number of tones for a specific spectrum.\n\nReturns the number of tones detected in a specific spectrum (that is, at a specific time\nstep).\n\nParameters\n\nspectrum_index: int\n\nIndex of the spectrum where the tone was detected. The index is 0-based.\n\nReturns\n\npython:int\n\nNumber of tones detected in this spectrum.\n\nReturn type\n\nint"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.sound_composer.SourceBroadbandNoise.is_source_control_valid.html#is_source_control_valid","title":"is_source_control_valid","text":"is_source_control_valid\n\n\n\nSourceBroadbandNoise.is_source_control_valid()\n\nSource control verification function.\n\nCheck if the source control is set.\n\nReturns\n\nbool\n\nTrue if the source control is set.\n\nReturn type\n\nbool"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.sound_composer.SourceBroadbandNoise.set_from_generic_data_containers.html#set_from_generic_data_containers","title":"set_from_generic_data_containers","text":"set_from_generic_data_containers\n\n\n\nSourceBroadbandNoise.set_from_generic_data_containers(source_data, source_control_data)\n\nSet the source and source control data from generic data containers.\n\nThis method is meant to set the source data from generic data containers obtained when\nloading a Sound Composer project file (.scn) with the method SoundComposer.load().\n\nParameters\n\nsource_data\n\nGenericDataContainer\n\nSource data as a DPF generic data container.\n\nsource_control_data\n\nGenericDataContainer\n\nSource control data as a DPF generic data container."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.standard_levels.OctaveLevelsFromPSD.frequency_weighting.html#frequency_weighting","title":"frequency_weighting","text":"frequency_weighting\n\n\n\nproperty OctaveLevelsFromPSD.frequency_weighting: str\n\nFrequency weighting of the computed levels.\n\nAvailable options are “”, “A”, “B”, and “C”, allowing level calculation in dB (or\ndBSPL), dBA, dBB, and dBC, respectively."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.sound_composer.SourceHarmonics.get_as_generic_data_containers.html#get_as_generic_data_containers","title":"get_as_generic_data_containers","text":"get_as_generic_data_containers\n\n\n\nSourceHarmonics.get_as_generic_data_containers()\n\nGet the source and source control data as generic data containers.\n\nThis method is meant to return the source data as generic data containers, in the format\nneeded to save a Sound Composer project file (.scn) with the method\nSoundComposer.save().\n\nReturns\n\npython:tuple[GenericDataContainer]\n\nSource as two generic data containers, for source and source control data, respectively.\n\nReturn type\n\ntuple[GenericDataContainer]"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.TonalityDIN45681.get_tonal_adjustment.html#get_tonal_adjustment","title":"get_tonal_adjustment","text":"get_tonal_adjustment\n\n\n\nTonalityDIN45681.get_tonal_adjustment()\n\nGet the DIN 45681 tonal adjustment, in dB.\n\nReturns\n\npython:float\n\nTonal adjustment Kt, in dB.\n\nReturn type\n\nfloat"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.signal_utilities.ZeroPad.process.html#process","title":"process","text":"process\n\n\n\nZeroPad.process()\n\nPad the end of the signal with zeros.\n\nThis method calls the appropriate DPF Sound operator to append zeros to the\nend of the signal."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.sound_composer.SourceBroadbandNoise.plot_control.html#plot_control","title":"plot_control","text":"plot_control\n\n\n\nSourceBroadbandNoise.plot_control()\n\nPlot the source control."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.sound_composer.SourceBroadbandNoiseTwoParameters.is_source_control_valid.html#is_source_control_valid","title":"is_source_control_valid","text":"is_source_control_valid\n\n\n\nSourceBroadbandNoiseTwoParameters.is_source_control_valid()\n\nSource control verification function.\n\nChecks if the two source controls are set.\n\nReturns\n\nbool\n\nTrue if both source controls are set.\n\nReturn type\n\nbool"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.standard_levels.OneThirdOctaveLevelsFromPSD.get_center_frequencies.html#get_center_frequencies","title":"get_center_frequencies","text":"get_center_frequencies\n\n\n\nOneThirdOctaveLevelsFromPSD.get_center_frequencies()\n\nReturn the center frequencies in Hz of the band levels as a numpy array.\n\nReturns\n\nnp.ndarray\n\nThe center frequencies in Hz of the band levels.\n\nReturn type\n\nndarray"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.signal_utilities.LoadWav.get_output_as_nparray.html#get_output_as_nparray","title":"get_output_as_nparray","text":"get_output_as_nparray\n\n\n\nLoadWav.get_output_as_nparray()\n\nGet the signal loaded from the WAV file as a NumPy array.\n\nReturns\n\nnumpy.ndarray\n\nSignal loaded from the WAV file in a NumPy array.\n\nReturn type\n\nndarray"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.signal_utilities.CropSignal.process.html#process","title":"process","text":"process\n\n\n\nCropSignal.process()\n\nCrop the signal.\n\nThis method calls the appropriate DPF Sound operator to crop the signal."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.sound_composer.SourceHarmonics.get_output_as_nparray.html#get_output_as_nparray","title":"get_output_as_nparray","text":"get_output_as_nparray\n\n\n\nSourceHarmonics.get_output_as_nparray()\n\nGet the generated sound as a NumPy array.\n\nReturns\n\nnumpy.ndarray\n\nGenerated sound (signal samples in Pa) as a NumPy array.\n\nReturn type\n\nndarray"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.FluctuationStrength.get_bark_band_indexes.html#get_bark_band_indexes","title":"get_bark_band_indexes","text":"get_bark_band_indexes\n\n\n\nFluctuationStrength.get_bark_band_indexes()\n\nGet the Bark band indexes.\n\nThis method returns the Bark band indexes used for the fluctuation strength calculation as\na NumPy array.\n\nReturns\n\nnumpy.ndarray\n\nArray of Bark band indexes, in Bark.\n\nReturn type\n\nndarray"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.xtract.XtractDenoiser.get_output.html#get_output","title":"get_output","text":"get_output\n\n\n\nXtractDenoiser.get_output()\n\nGet the output of the denoising.\n\nReturns\n\npython:tuple[FieldsContainer, FieldsContainer] | python:tuple[Field, Field]\n\nDenoised signal and noise signal in a tuple as\nDPF fields containers or fields (depending on the input).\n\nReturn type\n\ntuple[FieldsContainer, FieldsContainer] | tuple[Field, Field]"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.sound_composer.SourceAudio.plot_control.html#plot_control","title":"plot_control","text":"plot_control\n\n\n\nSourceAudio.plot_control()\n\nPlot the source control(s) in a figure."},{"objectID":"Home","href":"examples/gallery_examples/007_calculate_psychoacoustic_indicators.html#calculate-psychoacoustic-indicators","title":"Calculate psychoacoustic indicators","text":"Calculate psychoacoustic indicators\n\nThis example shows how to calculate psychoacoustic indicators.\nThe following indicators are included:\n\nLoudness of stationary sounds according to ISO 532-1.\n\nLoudness of time-varying sounds, according to ISO 532-1.\n\nMonaural and binaural loudness of stationary sounds according to ISO 532-2.\n\nSharpness according to Zwicker and Fastl, “Psychoacoustics: Facts and models”, 1990.\n\nSharpness according to Zwicker and Fastl, over time.\n\nSharpness according to DIN 45692.\n\nSharpness according to DIN 45692, over time.\n\nRoughness and roughness over time according to Daniel and Weber, “Psychoacoustical Roughness:\nImplementation of an Optimized Model, 1997.\n\nFluctuation strength according to Sontacchi, “Entwicklung eines Modulkonzeptes für die\npsychoakustische Geräuschanalyse under MatLab”, 1998.\n\nThe example shows how to perform these operations:\n\nSet up the analysis.\n\nCalculate indicators on loaded WAV files.\n\nGet calculation outputs.\n\nPlot some corresponding curves."},{"objectID":"Home","href":"examples/gallery_examples/007_calculate_psychoacoustic_indicators.html#set-up-analysis","title":"Calculate psychoacoustic indicators > Set up analysis","text":"Set up analysis\n\nSetting up the analysis consists of loading libraries, and connecting to the DPF server."},{"objectID":"Home","href":"examples/gallery_examples/007_calculate_psychoacoustic_indicators.html#load-the-wav-files-used-in-this-example","title":"Calculate psychoacoustic indicators > Load the WAV files used in this example","text":"Load the WAV files used in this example\n\nLoad the signals from WAV files using the LoadWav class. They are returned as\nFieldsContainer objects."},{"objectID":"Home","href":"examples/gallery_examples/007_calculate_psychoacoustic_indicators.html#calculate-iso-532-1-loudness-for-a-stationary-sound","title":"Calculate psychoacoustic indicators > Calculate ISO 532-1 loudness for a stationary sound","text":"Calculate ISO 532-1 loudness for a stationary sound\n\nCreate a LoudnessISO532_1_Stationary object, set its signal, and compute the loudness\naccording to standard ISO 532-1.\n\nGet the ISO 532-1 loudness (in sone) and loudness level (in phon).\n\nPlot the ISO 532-1 specific loudness, that is, the loudness at each Bark band index.\n\n"},{"objectID":"Home","href":"examples/gallery_examples/007_calculate_psychoacoustic_indicators.html#calculate-iso-532-1-loudness-for-a-time-varying-sound","title":"Calculate psychoacoustic indicators > Calculate ISO 532-1 loudness for a time-varying sound","text":"Calculate ISO 532-1 loudness for a time-varying sound\n\nCreate a LoudnessISO532_1_TimeVarying object, set its signal, and compute the loudness.\n\nGet percentile loudness and loudness level values.\n\nPlot the ISO 532-1 loudness as a function of time.\n\n"},{"objectID":"Home","href":"examples/gallery_examples/007_calculate_psychoacoustic_indicators.html#calculate-iso-532-2-loudness-for-a-stationary-sound","title":"Calculate psychoacoustic indicators > Calculate ISO 532-2 loudness for a stationary sound","text":"Calculate ISO 532-2 loudness for a stationary sound\n\nCreate a LoudnessISO532_2 object, set its signal, and compute the loudness\naccording to standard ISO 532-2.\n\nGet the ISO 532-2 binaural and monaural loudness (in sone), and loudness level (in phon).\n\nFor comparison, display the values previously obtained with the ISO 532-1 standard. The two\nstandard rely on similar auditory principles but differ in the way they estimate the loudness.\n\nPlot the ISO 532-2 binaural specific loudness, that is,\nthe binaural loudness at each center frequency of equivalent rectangular bandwidth (ERB).\n\n"},{"objectID":"Home","href":"examples/gallery_examples/007_calculate_psychoacoustic_indicators.html#calculate-sharpness-roughness-and-fluctuation-strength","title":"Calculate psychoacoustic indicators > Calculate sharpness, roughness, and fluctuation strength","text":"Calculate sharpness, roughness, and fluctuation strength\n\nCalculate the sharpness.\n\nCalculate the sharpness over time and plot it.\n\n\n\nCalculate the sharpness according to standard DIN 45692.\n\nCalculate the sharpness according to standard DIN 45692, over time, and plot it.\n\n\n\nCalculate the roughness, and plot the specific roughness and roughness over time.\n\n\n\nCalculate the fluctuation strength.\n\nPrint the calculated indicators.\n\nTotal running time of the script: (0 minutes 16.151 seconds)\n\n\n\nDownload Jupyter notebook: 007_calculate_psychoacoustic_indicators.ipynb\n\nDownload Python source code: 007_calculate_psychoacoustic_indicators.py\n\nDownload zipped: 007_calculate_psychoacoustic_indicators.zip\n\nGallery generated by Sphinx-Gallery"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.standard_levels.OctaveLevelsFromSignal.get_output.html#get_output","title":"get_output","text":"get_output\n\n\n\nOctaveLevelsFromSignal.get_output()\n\nReturn the band levels in dB.\n\nReturns\n\nField\n\nThe band levels in dB (actual unit depends on reference_value and\nfrequency_weighting attributes’ values).\n\nReturn type\n\nField"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.signal_processing.Filter.plot_FRF.html#plot_frf","title":"plot_FRF","text":"plot_FRF\n\n\n\nFilter.plot_FRF()\n\nPlot the frequency response function (FRF) of the filter."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.SharpnessDIN45692OverTime.field_type.html#field_type","title":"field_type","text":"field_type\n\n\n\nproperty SharpnessDIN45692OverTime.field_type: str\n\nSound field type.\n\nAvailable options are “Free” and “Diffuse”."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.SharpnessOverTime.process.html#process","title":"process","text":"process\n\n\n\nSharpnessOverTime.process()\n\nCompute the sharpness over time.\n\nThis method calls the appropriate DPF Sound operator to compute the sharpness over time of\nthe signal."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.LoudnessISO532_1_TimeVarying.process.html#process","title":"process","text":"process\n\n\n\nLoudnessISO532_1_TimeVarying.process()\n\nCompute the time-varying ISO532-1 loudness.\n\nThis method calls the appropriate DPF Sound operator to compute the loudness of the signal."},{"objectID":"Home","href":"examples/gallery_examples/005_xtract_feature.html#use-the-xtract-feature","title":"Use the Xtract feature","text":"Use the Xtract feature\n\nThis example shows how to use the Xtract feature in PyAnsys Sound.\nIt demonstrates different capabilities of this feature, such as\nnoise extraction, tonal extraction, and transient extraction."},{"objectID":"Home","href":"examples/gallery_examples/005_xtract_feature.html#set-up-analysis","title":"Use the Xtract feature > Set up analysis","text":"Set up analysis\n\nSetting up the analysis consists of loading Ansys libraries, connecting to the\nDPF server, and retrieving the example files."},{"objectID":"Home","href":"examples/gallery_examples/005_xtract_feature.html#define-custom-stft-plot-function","title":"Use the Xtract feature > Define custom STFT plot function","text":"Define custom STFT plot function\n\nDefine a custom function for STFT plots. It differs from the Stft.plot() method in that it\ndoes not display the phase and allows setting custom title, maximum SPL, and maximum frequency."},{"objectID":"Home","href":"examples/gallery_examples/005_xtract_feature.html#load-a-demo-signal-for-xtract","title":"Use the Xtract feature > Load a demo signal for Xtract","text":"Load a demo signal for Xtract\n\nLoad a demo signal from a WAV file using the LoadWav class.\nThe WAV file contains harmonics and shocks.\n\n\n\n"},{"objectID":"Home","href":"examples/gallery_examples/005_xtract_feature.html#use-individual-extraction-features","title":"Use the Xtract feature > Use individual extraction features","text":"Use individual extraction features\n\nThe following topics show how to use different capabilities of Xtract independently."},{"objectID":"Home","href":"examples/gallery_examples/005_xtract_feature.html#noise-extraction","title":"Use the Xtract feature > Noise extraction","text":"Noise extraction\n\nThe goal is to isolate a fan noise deprived of any tonal content in the demo signal.\n\n"},{"objectID":"Home","href":"examples/gallery_examples/005_xtract_feature.html#tone-extraction","title":"Use the Xtract feature > Tone extraction","text":"Tone extraction\n\nThe goal is to isolate the tones using the right settings.\n\nPlot the spectrogram to assess the quality of the output.\n\n\n\n\n\nTry again with a different parameter for the maximum slope.\n\n\n\n"},{"objectID":"Home","href":"examples/gallery_examples/005_xtract_feature.html#transient-extraction","title":"Use the Xtract feature > Transient extraction","text":"Transient extraction\n\nThe goal is to isolate the transients using the right settings.\nWhile these settings are not as easy to handle, they are well explained in the tutorial videos\ninstalled with the Ansys Sound Analysis and Specification (SAS) standalone\napplication (with the user interface). You can also find the\nSAS - XTRACT transient\nvideos on the Ansys Learning Hub.\n\n"},{"objectID":"Home","href":"examples/gallery_examples/005_xtract_feature.html#use-a-combination-of-extraction-features-and-loop-on-several-signals","title":"Use the Xtract feature > Use a combination of extraction features and loop on several signals","text":"Use a combination of extraction features and loop on several signals\n\nThe idea here is to loop over several signals and use the Xtract class to combine\nall previous classes.\n\n\n\n\n\n\n\n\n\n\n\n\n\nTotal running time of the script: (4 minutes 13.262 seconds)\n\n\n\nDownload Jupyter notebook: 005_xtract_feature.ipynb\n\nDownload Python source code: 005_xtract_feature.py\n\nDownload zipped: 005_xtract_feature.zip\n\nGallery generated by Sphinx-Gallery"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.ProminenceRatioForOrdersOverTime.signal.html#signal","title":"signal","text":"signal\n\n\n\nproperty ProminenceRatioForOrdersOverTime.signal: Field\n\nInput signal."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.TonalityISO1996_2_OverTime.plot.html#plot","title":"plot","text":"plot\n\n\n\nTonalityISO1996_2_OverTime.plot()\n\nPlot the ISO 1996-2 tonal audibility and tonal adjustment over time."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.sound_composer.SourceSpectrum.get_output.html#get_output","title":"get_output","text":"get_output\n\n\n\nSourceSpectrum.get_output()\n\nGet the generated sound as a DPF field.\n\nReturns\n\nField\n\nGenerated sound as a DPF field.\n\nReturn type\n\nField"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.standard_levels.LevelOverTime.set_custom_parameters.html#set_custom_parameters","title":"set_custom_parameters","text":"set_custom_parameters\n\n\n\nLevelOverTime.set_custom_parameters(time_step=25.0, window_size=1000.0, analysis_window='RECTANGULAR')\n\nSet the custom parameters for the time weighting.\n\nNote that using this method automatically switches attribute time_weighting to\n“Custom”.\n\nParameters\n\ntime_step\n\npython:float, default: 25.0\n\nThe time step in ms.\n\nwindow_size\n\npython:float, default: 1000.0\n\nThe window size in ms.\n\nanalysis_window\n\npython:str, default: “RECTANGULAR”\n\nThe analysis window to use. Available options are “RECTANGULAR”, “HANN”,\n“HAMMING”, “BLACKMAN”, “BLACKMAN-HARRIS”, and “BARTLETT”."},{"objectID":"Home","href":"examples/gallery_examples/002_load_resample_amplify_write_wav_files.html#load-a-signal-from-a-wav-file","title":"Load a signal from a WAV file","text":"Load a signal from a WAV file\n\nThis example shows how to load a signal from a WAV file, modify the signal’s\nsampling frequency, and amplify it. It also shows how to access the corresponding\ndata, display it using Matplotlib, and then write the modified signal to the disk as\na new WAV file."},{"objectID":"Home","href":"examples/gallery_examples/002_load_resample_amplify_write_wav_files.html#set-up-analysis","title":"Load a signal from a WAV file > Set up analysis","text":"Set up analysis\n\nSetting up the analysis consists of loading Ansys libraries, connecting to the\nDPF server, and retrieving the example files."},{"objectID":"Home","href":"examples/gallery_examples/002_load_resample_amplify_write_wav_files.html#load-a-signal","title":"Load a signal from a WAV file > Load a signal","text":"Load a signal\n\nLoad a signal from a WAV file using the LoadWav class. It is returned as a DPF\nfields container. For more information, see module fields_container\nin the DPF-Core API documentation."},{"objectID":"Home","href":"examples/gallery_examples/002_load_resample_amplify_write_wav_files.html#resample-the-signal","title":"Load a signal from a WAV file > Resample the signal","text":"Resample the signal\n\nChange the sampling frequency of the loaded signal."},{"objectID":"Home","href":"examples/gallery_examples/002_load_resample_amplify_write_wav_files.html#apply-a-gain-to-the-signal","title":"Load a signal from a WAV file > Apply a gain to the signal","text":"Apply a gain to the signal\n\nAmplify the resampled signal by 10 decibels."},{"objectID":"Home","href":"examples/gallery_examples/002_load_resample_amplify_write_wav_files.html#plot-signals","title":"Load a signal from a WAV file > Plot signals","text":"Plot signals\n\nPlot both the original signal and modified signal.\n\n"},{"objectID":"Home","href":"examples/gallery_examples/002_load_resample_amplify_write_wav_files.html#write-the-signal-as-a-wav-file","title":"Load a signal from a WAV file > Write the signal as a WAV file","text":"Write the signal as a WAV file\n\nWrite the modified signal to the disk as a WAV file.\n\nTotal running time of the script: (0 minutes 3.086 seconds)\n\n\n\nDownload Jupyter notebook: 002_load_resample_amplify_write_wav_files.ipynb\n\nDownload Python source code: 002_load_resample_amplify_write_wav_files.py\n\nDownload zipped: 002_load_resample_amplify_write_wav_files.zip\n\nGallery generated by Sphinx-Gallery"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.signal_utilities.SumSignals.signals.html#signals","title":"signals","text":"signals\n\n\n\nproperty SumSignals.signals: FieldsContainer\n\nInput signals as a DPF fields container."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.sound_power.SoundPowerLevelISO3744.get_Lw_A.html#get_lw_a","title":"get_Lw_A","text":"get_Lw_A\n\n\n\nSoundPowerLevelISO3744.get_Lw_A()\n\nGet A-weighted sound power level.\n\nReturns\n\npython:float\n\nA-weighted sound power level (Lw(A)) in dBA.\n\nReturn type\n\nfloat"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.ToneToNoiseRatio.get_peaks_levels.html#get_peaks_levels","title":"get_peaks_levels","text":"get_peaks_levels\n\n\n\nToneToNoiseRatio.get_peaks_levels()\n\nGet the vector of the peaks’ level values in dB SPL.\n\nReturns\n\nnumpy.ndarray\n\nVector of the peaks’ level values in dB SPL.\n\nReturn type\n\nndarray"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.signal_utilities.CreateSoundField.html#createsoundfield","title":"CreateSoundField","text":"CreateSoundField\n\n\n\nclass ansys.sound.core.signal_utilities.CreateSoundField(data=array([], dtype=float64), sampling_frequency=44100.0, unit='Pa')\n\nCreates a PyAnsys Sound field.\n\nThis class creates a DPF field with correct PyAnsys Sound metadata from a vector.\n\nClass instantiation takes the following parameters.\n\nParameters\n\ndata\n\nnumpy.ndarray, default: np.empty(0)\n\nData to use to create the PyAnsys Sound field as a 1D NumPy array.\n\nsampling_frequency\n\npython:float, default: 44100.0\n\nSampling frequency of the data.\n\nunit\n\npython:str, default: “Pa”\n\nUnit of the data.\n\nMethods\n\n\n\nAttributes\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.spectral_processing.PowerSpectralDensity.process.html#process","title":"process","text":"process\n\n\n\nPowerSpectralDensity.process()\n\nCalculate the PSD.\n\nThis method calls the appropriate DPF Sound operator to compute the PSD."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.sound_composer.SourceSpectrum.load_source_spectrum.html#load_source_spectrum","title":"load_source_spectrum","text":"load_source_spectrum\n\n\n\nSourceSpectrum.load_source_spectrum(file_source)\n\nLoad the spectrum source data from a spectrum file.\n\nParameters\n\nfile_source\n\npython:str\n\nPath to the spectrum source file. Supported files are the same XML and text (with the\nAnsysSound_Spectrum header) formats as supported by Ansys Sound SAS."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.xtract.XtractTransient.input_signal.html#input_signal","title":"input_signal","text":"input_signal\n\n\n\nproperty XtractTransient.input_signal: FieldsContainer | Field\n\nInput signal.\n\nOne or more signals from which to extract transient components, as a DPF field or fields\ncontainer. When inputting a fields container, each signal (each field of the fields\ncontainer) is processed individually."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.standard_levels.OctaveLevelsFromSignal.get_output_as_nparray.html#get_output_as_nparray","title":"get_output_as_nparray","text":"get_output_as_nparray\n\n\n\nOctaveLevelsFromSignal.get_output_as_nparray()\n\nReturn the band levels in dB and center frequencies in Hz as a tuple of numpy arrays.\n\nReturns\n\nnp.ndarray\n\nThe band levels in dB (actual unit depends on reference_value and\nfrequency_weighting attributes’ values).\n\nnp.ndarray\n\nThe center frequencies in Hz of the band levels.\n\nReturn type\n\ntuple[ndarray]"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.signal_processing.Filter.plot.html#plot","title":"plot","text":"plot\n\n\n\nFilter.plot()\n\nPlot the filtered signal in a figure."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.standard_levels.OneThirdOctaveLevelsFromSignal.frequency_weighting.html#frequency_weighting","title":"frequency_weighting","text":"frequency_weighting\n\n\n\nproperty OneThirdOctaveLevelsFromSignal.frequency_weighting: str\n\nFrequency weighting of the computed levels.\n\nAvailable options are “”, “A”, “B”, and “C”, allowing level calculation in dB (or\ndBSPL), dBA, dBB, and dBC, respectively."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.signal_utilities.Resample.get_output.html#get_output","title":"get_output","text":"get_output\n\n\n\nResample.get_output()\n\nGet the resampled signal as a DPF fields container.\n\nReturns\n\nFieldsContainer\n\nResampled signal in a DPF fields container.\n\nReturn type\n\nFieldsContainer | Field"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.spectrogram_processing.Stft.window_type.html#window_type","title":"window_type","text":"window_type\n\n\n\nproperty Stft.window_type: str\n\nWindow type.\n\nSupported options are 'TRIANGULAR', 'BLACKMAN', 'BLACKMANHARRIS', 'HAMMING',\n'HANN', 'GAUSS', 'FLATTOP', and 'RECTANGULAR'."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.standard_levels.OctaveLevelsFromSignal.frequency_weighting.html#frequency_weighting","title":"frequency_weighting","text":"frequency_weighting\n\n\n\nproperty OctaveLevelsFromSignal.frequency_weighting: str\n\nFrequency weighting of the computed levels.\n\nAvailable options are “”, “A”, “B”, and “C”, allowing level calculation in dB (or\ndBSPL), dBA, dBB, and dBC, respectively."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.SharpnessDIN45692OverTime.signal.html#signal","title":"signal","text":"signal\n\n\n\nproperty SharpnessDIN45692OverTime.signal: Field\n\nInput signal in Pa."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.standard_levels.OctaveLevelsFromPSD.get_output.html#get_output","title":"get_output","text":"get_output\n\n\n\nOctaveLevelsFromPSD.get_output()\n\nReturn the band levels in dB.\n\nReturns\n\nField\n\nThe band levels in dB (actual unit depends on reference_value and\nfrequency_weighting attributes’ values).\n\nReturn type\n\nField"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.signal_utilities.Resample.new_sampling_frequency.html#new_sampling_frequency","title":"new_sampling_frequency","text":"new_sampling_frequency\n\n\n\nproperty Resample.new_sampling_frequency: float\n\nNew sampling frequency in Hz."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.signal_processing.Filter.signal.html#signal","title":"signal","text":"signal\n\n\n\nproperty Filter.signal: Field\n\nInput signal."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.ToneToNoiseRatio.get_TNR_values.html#get_tnr_values","title":"get_TNR_values","text":"get_TNR_values\n\n\n\nToneToNoiseRatio.get_TNR_values()\n\nGet the vector of the peaks’ TNR values in dB.\n\nReturns\n\nnumpy.ndarray\n\nVector of the peaks’ TNR values in dB.\n\nReturn type\n\nndarray"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.SharpnessDIN45692.html#sharpnessdin45692","title":"SharpnessDIN45692","text":"SharpnessDIN45692\n\n\n\nclass ansys.sound.core.psychoacoustics.SharpnessDIN45692(signal=None, field_type='Free')\n\nComputes the sharpness of a signal according to the DIN 45692 standard.\n\nThe calculation of this indicator is based on the specific loudness result from\nthe loudness model for stationary sounds defined in the ISO 532-1 standard.\nThis is the same loudness model used in the\nLoudnessISO532_1_Stationary class.\n\nClass instantiation takes the following parameters.\n\nParameters\n\nsignal\n\nField, default: python:None\n\nSignal in Pa on which to compute sharpness.\n\nfield_type\n\npython:str, default: “Free”\n\nSound field type. Available options are “Free” and “Diffuse”.\n\nMethods\n\n\n\nAttributes\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.spectrogram_processing.Stft.get_stft_magnitude_as_nparray.html#get_stft_magnitude_as_nparray","title":"get_stft_magnitude_as_nparray","text":"get_stft_magnitude_as_nparray\n\n\n\nStft.get_stft_magnitude_as_nparray()\n\nGet the amplitude of the STFT as a NumPy array.\n\nReturns\n\nnumpy.ndarray\n\nAmplitude of the STFT in a NumPy array.\n\nReturn type\n\nndarray"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.sound_composer.SourceAudio.get_output.html#get_output","title":"get_output","text":"get_output\n\n\n\nSourceAudio.get_output()\n\nGet the generated sound as a DPF field.\n\nReturns\n\nField\n\nGenerated sound as a DPF field.\n\nReturn type\n\nField"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.sound_composer.SourceAudio.is_source_control_valid.html#is_source_control_valid","title":"is_source_control_valid","text":"is_source_control_valid\n\n\n\nSourceAudio.is_source_control_valid()\n\nCheck if the source control is valid.\n\nReturn type\n\nbool"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.standard_levels.LevelOverTime.get_output_as_nparray.html#get_output_as_nparray","title":"get_output_as_nparray","text":"get_output_as_nparray\n\n\n\nLevelOverTime.get_output_as_nparray()\n\nReturn the maximum level, level over time, and time scale.\n\nReturns\n\nnumpy.ndarray\n\nFirst element: maximum level.\n\nSecond element: level over time.\n\nThird element: time scale in s.\n\nReturn type\n\ntuple[ndarray]"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.xtract.XtractDenoiserParameters.get_output.html#get_output","title":"get_output","text":"get_output\n\n\n\nXtractDenoiserParameters.get_output()\n\nGet output.\n\nThere is nothing to output.\n\nReturns\n\npython:None\n\nNone\n\nReturn type\n\nNone"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.Sharpness.html#sharpness","title":"Sharpness","text":"Sharpness\n\n\n\nclass ansys.sound.core.psychoacoustics.Sharpness(signal=None, field_type='Free')\n\nComputes the sharpness of a signal according to Zwicker & Fastl’s model.\n\nThe calculation of this indicator is based on the loudness model for stationary sounds\ndefined in the standard ISO 532-1. It is the loudness model of the class\nLoudnessISO532_1_Stationary.\n\nClass instantiation takes the following parameters.\n\nParameters\n\nsignal\n\nField, default: python:None\n\nSignal in Pa on which to compute sharpness.\n\nfield_type\n\npython:str, default: “Free”\n\nSound field type. Available options are “Free” and “Diffuse”.\n\nMethods\n\n\n\nAttributes\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.TonalityDIN45681.get_mean_difference.html#get_mean_difference","title":"get_mean_difference","text":"get_mean_difference\n\n\n\nTonalityDIN45681.get_mean_difference()\n\nGet the DIN 45681 tonality (mean difference DL), in dB.\n\nReturns\n\npython:float\n\nMean difference DL in dB.\n\nReturn type\n\nfloat"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.sound_power.SoundPowerLevelISO3744.surface_shape.html#surface_shape","title":"surface_shape","text":"surface_shape\n\n\n\nproperty SoundPowerLevelISO3744.surface_shape: str\n\nShape of the measurement surface.\n\nAvailable options are ‘Hemisphere’ and ‘Half-hemisphere’."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.sound_composer.SourceBroadbandNoise.get_output.html#get_output","title":"get_output","text":"get_output\n\n\n\nSourceBroadbandNoise.get_output()\n\nGet the generated sound as a DPF field.\n\nReturns\n\nField\n\nGenerated sound as a DPF field.\n\nReturn type\n\nField"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.sound_power.SoundPowerLevelISO3744.set_K2_from_room_properties.html#set_k2_from_room_properties","title":"set_K2_from_room_properties","text":"set_K2_from_room_properties\n\n\n\nSoundPowerLevelISO3744.set_K2_from_room_properties(length, width, height, alpha)\n\nSet K2 from measurement room properties and measurement surface area.\n\nSets K2 following Annex A of ISO 3744, based on specified room dimensions and averaged\nsound absorption coefficient, and current measurement surface area (that is,\nshape and radius).\n\nParameters\n\nlength\n\npython:float\n\nMeasurement room length in m.\n\nwidth\n\npython:float\n\nMeasurement room width in m.\n\nheight\n\npython:float\n\nMeasurement room height in m.\n\nalpha\n\npython:float\n\nMean sound absorption coefficient between 0 and 1. Typical example values are\ngiven in Table A.1 of ISO 3744.\n\nReturns\n\npython:float\n\nCalculated correction K2 in dB\n\nReturn type\n\nfloat"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.LoudnessISO532_2.signal.html#signal","title":"signal","text":"signal\n\n\n\nproperty LoudnessISO532_2.signal: Field | FieldsContainer\n\nInput sound signal in Pa.\n\nSignal in Pa on which to compute loudness. If signal is a\nField, the listening assumption is diotic (same\nsignal presented at both ears). If signal is a\nFieldsContainer, with exactly 2\nfields, the listening assumption is dichotic (each field’s signal presented at each ear)."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.TonalityECMA418_2.get_tone_frequency_time_scale.html#get_tone_frequency_time_scale","title":"get_tone_frequency_time_scale","text":"get_tone_frequency_time_scale\n\n\n\nTonalityECMA418_2.get_tone_frequency_time_scale()\n\nGet the ECMA-418-2 tone frequency time scale, in s.\n\nReturns\n\nnumpy.ndarray\n\nTime array, in seconds, of the ECMA-418-2 tone frequency over time.\n\nReturn type\n\nndarray"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.spectrogram_processing.IsolateOrders.html#isolateorders","title":"IsolateOrders","text":"IsolateOrders\n\n\n\nclass ansys.sound.core.spectrogram_processing.IsolateOrders(signal=None, rpm_profile=None, orders=None, fft_size=1024, window_type='HANN', window_overlap=0.5, width_selection=10)\n\nIsolates the orders of a signal.\n\nThis class isolates the order of a signal that has an associated RPM profile.\n\nClass instantiation takes the following parameters.\n\nParameters\n\nsignal\n\nFieldsContainer | Field, default: python:None\n\nOne or more input signals on which to isolate orders.\n\nrpm_profile\n\nField, default: python:None\n\nRPM signal associated with the time-domain signals.\nIt is assumed that the signal’s unit is rpm. If this is not the case,\ninaccurate behavior might occur during the conversion from RPM to frequency.\n\norders\n\npython:list, default: python:None\n\nList of the order numbers to isolate. The list must contain at least one value.\n\nfft_size\n\npython:int, default: 1024\n\nSize of the FFT used to compute the STFT.\n\nwindow_type\n\npython:str, default: ‘HANN’\n\nWindow type used for the FFT computation. Options are 'TRIANGULAR', 'BLACKMAN',\n'BLACKMANHARRIS', 'HAMMING', 'HANN', 'GAUSS', 'FLATTOP',\nand 'RECTANGULAR'.\n\nwindow_overlap\n\npython:float, default: 0.5\n\nOverlap value between two successive FFT computations. Values can range from 0 to 1.\nFor example, 0 means no overlap, and 0.5 means 50% overlap.\n\nwidth_selection\n\npython:int, default: 10\n\nWidth in Hz of the area used to select each individual order.\nNote that its precision depends on the FFT size.\n\nMethods\n\n\n\nAttributes\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.SharpnessOverTime.get_output.html#get_output","title":"get_output","text":"get_output\n\n\n\nSharpnessOverTime.get_output()\n\nGet the sharpness over time data in a tuple.\n\nReturns\n\npython:tuple\n\nFirst element (float): maximum sharpness over time, in acum.\n\nSecond element (Field): sharpness over time, in acum.\n\nReturn type\n\ntuple"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.sound_power.SoundPowerLevelISO3744.get_Lw_octave.html#get_lw_octave","title":"get_Lw_octave","text":"get_Lw_octave\n\n\n\nSoundPowerLevelISO3744.get_Lw_octave()\n\nGet octave-band power sound levels.\n\nReturns\n\nnumpy.ndarray\n\nArray of octave-band sound power levels in dB.\n\nReturn type\n\nndarray"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.sound_composer.SourceBroadbandNoiseTwoParameters.source_control2.html#source_control2","title":"source_control2","text":"source_control2\n\n\n\nproperty SourceBroadbandNoiseTwoParameters.source_control2: SourceControlTime\n\nSecond source control for the broadband noise source with two parameters.\n\nContains the second control parameter values over time."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.sound_power.SoundPowerLevelISO3744.get_Lw.html#get_lw","title":"get_Lw","text":"get_Lw\n\n\n\nSoundPowerLevelISO3744.get_Lw()\n\nGet unweighted sound power level.\n\nReturns\n\npython:float\n\nUnweighted sound power level (Lw) in dB.\n\nReturn type\n\nfloat"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.LoudnessISO532_1_TimeVarying.plot.html#plot","title":"plot","text":"plot\n\n\n\nLoudnessISO532_1_TimeVarying.plot()\n\nPlot the instantaneous loudness, in sone, and loudness level, in phon.\n\nThis method displays the instantaneous loudness (N), in sone, and instantaneous loudness\nlevel (L_N), in phon."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.SharpnessOverTime.plot.html#plot","title":"plot","text":"plot\n\n\n\nSharpnessOverTime.plot()\n\nPlot the sharpness over time."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.spectrogram_processing.Stft.html#stft","title":"Stft","text":"Stft\n\n\n\nclass ansys.sound.core.spectrogram_processing.Stft(signal=None, fft_size=2048, window_type='HANN', window_overlap=0.5)\n\nComputes the short-time Fourier transform (STFT) of a signal.\n\nClass instantiation takes the following parameters.\n\nParameters\n\nsignal\n\nField | FieldsContainer, default: python:None\n\nInput signal on which to compute the STFT.\n\nfft_size\n\npython:int, default: 2048\n\nSize of the FFT to compute the STFT.\nUse a power of 2 for better performance.\n\nwindow_type\n\npython:str, default: ‘HANN’\n\nWindow type used for the FFT computation. Options are 'TRIANGULAR', 'BLACKMAN',\n'BLACKMANHARRIS', 'HAMMING', 'HANN', 'GAUSS', 'FLATTOP', and\n'RECTANGULAR'.\n\nwindow_overlap\n\npython:float, default: 0.5\n\nOverlap value between two successive FFT computations. Values can range from 0 to 1.\nFor example, 0 means no overlap, and 0.5 means 50% overlap.\n\nMethods\n\n\n\nAttributes\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.standard_levels.OneThirdOctaveLevelsFromSignal.plot.html#plot","title":"plot","text":"plot\n\n\n\nOneThirdOctaveLevelsFromSignal.plot()\n\nPlot the 1/3-octave-band levels."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.standard_levels.LevelOverTime.process.html#process","title":"process","text":"process\n\n\n\nLevelOverTime.process()\n\nCompute the overall level."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.ProminenceRatio.get_peaks_low_frequencies.html#get_peaks_low_frequencies","title":"get_peaks_low_frequencies","text":"get_peaks_low_frequencies\n\n\n\nProminenceRatio.get_peaks_low_frequencies()\n\nGet the vector of the peaks’ lower-frequency limits.\n\nReturns\n\nnumpy.ndarray\n\nVector of the peaks’ lower-frequency limits in Hz.\n\nReturn type\n\nndarray"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.spectral_processing.PowerSpectralDensity.window_type.html#window_type","title":"window_type","text":"window_type\n\n\n\nproperty PowerSpectralDensity.window_type: str\n\nWindow type.\n\nSupported options are 'TRIANGULAR', 'BLACKMAN', 'HAMMING',\n'HANN', 'GAUSS', 'FLATTOP', and 'RECTANGULAR'."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.TonalityAures.get_tonality.html#get_tonality","title":"get_tonality","text":"get_tonality\n\n\n\nTonalityAures.get_tonality()\n\nGet the overall Aures tonality in tu.\n\nReturns\n\npython:float\n\nOverall Aures tonality, in tu (tonality unit).\n\nReturn type\n\nfloat"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.signal_utilities.ZeroPad.duration_zeros.html#duration_zeros","title":"duration_zeros","text":"duration_zeros\n\n\n\nproperty ZeroPad.duration_zeros: float\n\nDuration in s of the zero-padding at the end of the signal."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.spectral_processing.PowerSpectralDensity.get_PSD_dB.html#get_psd_db","title":"get_PSD_dB","text":"get_PSD_dB\n\n\n\nPowerSpectralDensity.get_PSD_dB(ref_value=1.0)\n\nGet the PSD in dB/Hz, as a Field.\n\nParameters\n\nref_value\n\npython:float, default: 1.0\n\nReference value for dB level calculation, by default 1.0. Example: ref_value = 2e-5 Pa\nfor sound pressure level (dBSPL/Hz).\n\nReturns\n\nField\n\nField containing the PSD in dB/Hz, and associated frequencies in Hz.\n\nReturn type\n\nField"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.sound_power.SoundPowerLevelISO3744.get_Lw_thirdoctave.html#get_lw_thirdoctave","title":"get_Lw_thirdoctave","text":"get_Lw_thirdoctave\n\n\n\nSoundPowerLevelISO3744.get_Lw_thirdoctave()\n\nGet one-third-octave-band power sound levels.\n\nReturns\n\nnumpy.ndarray\n\nArray of one-third-octave-band sound power levels in dB.\n\nReturn type\n\nndarray"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.TonalityISO1996_2.html#tonalityiso1996_2","title":"TonalityISO1996_2","text":"TonalityISO1996_2\n\n\n\nclass ansys.sound.core.psychoacoustics.TonalityISO1996_2(signal=None, noise_pause_threshold=1.0, effective_analysis_bandwidth=5.0, noise_bandwidth_ratio=0.75)\n\nComputes the tonality according to the standard ISO 1996-2:2007, annex C.\n\nThis class is used to compute the tonal audibility and tonal adjustment of a signal according\nto the annex C of the ISO 1996-2:2007 standard.\n\nClass instantiation takes the following parameters.\n\nParameters\n\nsignal: Field, default: None\n\nSignal in Pa on which to calculate the tonality.\n\nnoise_pause_threshold: float, default: 1.0\n\nNoise pause detection threshold (“level excess”) in dB.\n\neffective_analysis_bandwidth: float, default: 5.0\n\nEffective analysis bandwidth in Hz.\n\nnoise_bandwidth_ratio: float, default: 0.75\n\nNoise bandwidth, in proportion to the critical bandwidth, that is taken into account\nfor the calculation of the masking noise level (the default value 0.75 means that the\nmasking noise level is estimated in a band delimited by 75 % of the critical bandwidth\non each side of the tone). Value must be between 0.75 and 2.\n\nFor more information about the parameters, please refer to the Ansys Sound SAS user guide.\n\n\n\nMethods\n\n\n\nAttributes\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.standard_levels.OneThirdOctaveLevelsFromSignal.get_band_levels.html#get_band_levels","title":"get_band_levels","text":"get_band_levels\n\n\n\nOneThirdOctaveLevelsFromSignal.get_band_levels()\n\nReturn the band levels in dB as a numpy array.\n\nReturns\n\nnp.ndarray\n\nThe band levels in dB (actual unit depends on reference_value and\nfrequency_weighting attributes’ values).\n\nReturn type\n\nndarray"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.sound_power.SoundPowerLevelISO3744.delete_microphone_signal.html#delete_microphone_signal","title":"delete_microphone_signal","text":"delete_microphone_signal\n\n\n\nSoundPowerLevelISO3744.delete_microphone_signal(index)\n\nDelete microphone signal.\n\nDeletes the microphone signal that corresponds to the specified index.\n\nParameters\n\nindex\n\npython:int\n\nSignal index."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.TonalityISO1996_2.get_tonal_adjustment.html#get_tonal_adjustment","title":"get_tonal_adjustment","text":"get_tonal_adjustment\n\n\n\nTonalityISO1996_2.get_tonal_adjustment()\n\nGet the ISO 1996-2 tonal adjustment, in dB.\n\nReturns\n\npython:float\n\nISO 1996-2 tonal adjustment, in dB.\n\nReturn type\n\nfloat"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.TonalityISO1996_2.noise_bandwidth_ratio.html#noise_bandwidth_ratio","title":"noise_bandwidth_ratio","text":"noise_bandwidth_ratio\n\n\n\nproperty TonalityISO1996_2.noise_bandwidth_ratio: float\n\nNoise bandwidth in proportion to the critical bandwidth.\n\nNoise bandwidth, in proportion to the critical bandwidth, that is taken into account for\nthe calculation of the masking noise level (the default value 0.75 means that the masking\nnoise level is estimated in a band delimited by 75 % of the critical bandwidth on each side\nof the tone). Value must be between 0.75 and 2."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.TonalityDIN45681.get_spectrum_number.html#get_spectrum_number","title":"get_spectrum_number","text":"get_spectrum_number\n\n\n\nTonalityDIN45681.get_spectrum_number()\n\nGet the number of spectra.\n\nReturns the number of analyzed spectra, that is, the number of computation time steps.\n\nReturns\n\npython:int\n\nNumber of spectra.\n\nReturn type\n\nint"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.signal_utilities.ApplyGain.gain.html#gain","title":"gain","text":"gain\n\n\n\nproperty ApplyGain.gain: float\n\nGain value in dB or in linear unit (depending on gain_in_db value)."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.xtract.Xtract.html#xtract","title":"Xtract","text":"Xtract\n\n\n\nclass ansys.sound.core.xtract.Xtract(input_signal=None, parameters_denoiser=None, parameters_tonal=None, parameters_transient=None)\n\nProvides Xtract processing.\n\nPyAnsys Sound performs Xtract processing in the same way as Ansys Sound Analysis\nand Specification (SAS). This operator chains a denoising step, followed by a\ntonal extraction step, and then a transient extraction step. It returns the\nindividual signals processed at each step, as well as the remainder.\n\nClass instantiation takes the following parameters.\n\nParameters\n\ninput_signal\n\nFieldsContainer | Field, default: python:None\n\nOne or more signals to apply Xtract processing on as a DPF field or fields container.\n\nparameters_denoiser\n\nXtractDenoiserParameters, default: python:None\n\nStructure that contains the parameters of the denoising step:\n\nNoise PSD (Field) is the power spectral density (PSD) of the noise.\n\nThis structure is of the XtractDenoiserParameters type. For more information,\nsee this class.\n\nparameters_tonal\n\nXtractTonalParameters, default: python:None\n\nStructure that contains the parameters of the tonal extraction step:\n\nNFFT (int) is the number of points used for the FFT computation.\n\nRegularity setting (float) in percent.\n\nMaximum slope (float) in dB/Hz.\n\nMinimum duration (float) in seconds.\n\nIntertonal gap (float) in Hz.\n\nLocal emergence (float) in dB.\n\nThis structure is of the XtractTonalParameters type. For more information,\nsee this class.\n\nparameters_transient\n\nXtractTransientParameters, default: python:None\n\nStructure that contains the parameters of the transient extraction step:\n\nLower threshold (float), which is between 0 and 100 percent.\n\nUpper threshold (float), which is between 0 and 100 percent.\n\nThis structure is of the XtractTransientParameters type. For more information,\nsee this class.\n\nMethods\n\n\n\nAttributes\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.sound_composer.SourceBroadbandNoise.plot.html#plot","title":"plot","text":"plot\n\n\n\nSourceBroadbandNoise.plot()\n\nPlot the resulting signal."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.signal_utilities.CreateSoundField.get_output.html#get_output","title":"get_output","text":"get_output\n\n\n\nCreateSoundField.get_output()\n\nGet the data as a DPF field.\n\nReturns\n\nField\n\nData in a DPF field.\n\nReturn type\n\nField"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.spectrogram_processing.Istft.plot.html#plot","title":"plot","text":"plot\n\n\n\nIstft.plot()\n\nPlot signals.\n\nPlot the signal resulting from the ISTFT."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.spectral_processing.PowerSpectralDensity.get_PSD_squared_linear.html#get_psd_squared_linear","title":"get_PSD_squared_linear","text":"get_PSD_squared_linear\n\n\n\nPowerSpectralDensity.get_PSD_squared_linear()\n\nGet the PSD in squared linear unit.\n\nReturns\n\nField\n\nPSD data in squared linear unit.\n\nReturn type\n\nField"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.standard_levels.OneThirdOctaveLevelsFromSignal.reference_value.html#reference_value","title":"reference_value","text":"reference_value\n\n\n\nproperty OneThirdOctaveLevelsFromSignal.reference_value: float\n\nReference value for the levels’ computation.\n\nIf the levels are computed with a PSD in Pa^2/Hz, the reference value should be 2e-5 (Pa)."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.FluctuationStrength.process.html#process","title":"process","text":"process\n\n\n\nFluctuationStrength.process()\n\nCompute the fluctuation strength.\n\nThis method calls the corresponding DPF Sound operator to compute the fluctuation strength\nof the signal."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.sound_power.SoundPowerLevelISO3744.get_all_signal_names.html#get_all_signal_names","title":"get_all_signal_names","text":"get_all_signal_names\n\n\n\nSoundPowerLevelISO3744.get_all_signal_names()\n\nGet all signal names.\n\nGets the list of the names of all signals that were added.\n\nReturns\n\npython:tuple[python:tuple]\n\nList of all signal names, preceded by their indexes in the list.\n\nReturn type\n\ntuple[tuple]"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.xtract.XtractDenoiser.input_signal.html#input_signal","title":"input_signal","text":"input_signal\n\n\n\nproperty XtractDenoiser.input_signal: FieldsContainer | Field\n\nInput signal.\n\nOne or more signals to denoise, as a DPF field or fields container. When inputting a\nfields container, each signal (each field of the fields container) is processed\nindividually."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.signal_utilities.ApplyGain.signal.html#signal","title":"signal","text":"signal\n\n\n\nproperty ApplyGain.signal: Field | FieldsContainer\n\nInput signal as a DPF field or fields container."},{"objectID":"Home","href":"examples/gallery_examples/008_calculate_levels.html#calculate-rms-dbspl-and-dba-levels","title":"Calculate RMS, dBSPL and dBA levels","text":"Calculate RMS, dBSPL and dBA levels\n\nThis example shows how to calculate RMS, dBSPL and dBA levels.\nThe following levels are included:\n\nOverall RMS level\n\nOverall dBSPL level\n\nOverall dBA level\n\nRMS level over time\n\ndBSPL level over time\n\ndBA level over time\n\nThe example shows how to perform these operations:\n\nSet up the analysis.\n\nCalculate levels on loaded WAV files.\n\nGet calculation outputs.\n\nPlot some corresponding curves.\n\nExport levels into a .csv files."},{"objectID":"Home","href":"examples/gallery_examples/008_calculate_levels.html#set-up-analysis","title":"Calculate RMS, dBSPL and dBA levels > Set up analysis","text":"Set up analysis\n\nSetting up the analysis consists of loading Ansys libraries, and connecting to the DPF server."},{"objectID":"Home","href":"examples/gallery_examples/008_calculate_levels.html#calculate-overall-rms-dbspl-and-dba-levels","title":"Calculate RMS, dBSPL and dBA levels > Calculate overall RMS, dBSPL and dBA levels","text":"Calculate overall RMS, dBSPL and dBA levels\n\nLoad a signal from a WAV file using the LoadWav class. It is returned as a\nFieldsContainer object.\n\nCreate a first .csv file in which the overall levels will be written, and write the header row.\n\nFor each sound, create an OverallLevel object, set its signals, compute the overall RMS,\ndBSPL and dBA levels, and then write the results into the .csv file."},{"objectID":"Home","href":"examples/gallery_examples/008_calculate_levels.html#calculate-rms-dbspl-and-dba-levels-over-time","title":"Calculate RMS, dBSPL and dBA levels > Calculate RMS, dBSPL and dBA levels over time","text":"Calculate RMS, dBSPL and dBA levels over time\n\nInitialize empty lists to store the levels in order to plot them.\n\nFor each sound, create a LevelOverTime object, set its signals, compute and plot the\nRMS level over time, the dBSPL level over time and the dBA level over time, then write the\nresults into an individual .csv file.\n\nUse the object’s plot() method to plot the level over time (here, level in dBA, for the\nsecond signal).\n\n\n\nAlternatively, plot the results over time for both signals into three graphs.\n\n\n\nTotal running time of the script: (0 minutes 5.560 seconds)\n\n\n\nDownload Jupyter notebook: 008_calculate_levels.ipynb\n\nDownload Python source code: 008_calculate_levels.py\n\nDownload zipped: 008_calculate_levels.zip\n\nGallery generated by Sphinx-Gallery"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.TonalityISOTS20065.overlap.html#overlap","title":"overlap","text":"overlap\n\n\n\nproperty TonalityISOTS20065.overlap: float\n\nOverlap, in %, between two consecutive slices of the signal."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.SharpnessDIN45692.get_output.html#get_output","title":"get_output","text":"get_output\n\n\n\nSharpnessDIN45692.get_output()\n\nGet the DIN 45692 sharpness.\n\nReturns\n\npython:float\n\nSharpness value in acum.\n\nReturn type\n\nfloat"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.LoudnessISO532_2.get_binaural_loudness_sone.html#get_binaural_loudness_sone","title":"get_binaural_loudness_sone","text":"get_binaural_loudness_sone\n\n\n\nLoudnessISO532_2.get_binaural_loudness_sone()\n\nGet the binaural loudness in sone.\n\nReturns\n\npython:float\n\nBinaural loudness in sone.\n\nReturn type\n\nfloat"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.TonalityDIN45681.overlap.html#overlap","title":"overlap","text":"overlap\n\n\n\nproperty TonalityDIN45681.overlap: float\n\nOverlap, in %, between two consecutive slices of the signal."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.sound_composer.SourceBroadbandNoiseTwoParameters.html#sourcebroadbandnoisetwoparameters","title":"SourceBroadbandNoiseTwoParameters","text":"SourceBroadbandNoiseTwoParameters\n\n\n\nclass ansys.sound.core.sound_composer.SourceBroadbandNoiseTwoParameters(file='', source_control1=None, source_control2=None)\n\nSound Composer’s broadband noise source with two parameters class.\n\nThis class creates a broadband noise source with two parameters for the Sound Composer. A\nbroadband noise source with two parameters is used to generate a sound signal from broadband\nnoise source data and two source controls.\n\nThe broadband noise source data consists of a series of noise spectra, each corresponding to a\npair of control parameter values.\n\nEach of the two source controls contains one control parameter’s values over time.\n\nClass instantiation takes the following parameters.\n\nParameters\n\nfile\n\npython:str, default: “”\n\nPath to the broadband noise with two parameters file. Supported files are text files\nwith the header AnsysSound_BBN_MultipleParameters and should be created using\nAnsys Sound SAS.\n\nsource_control1\n\nSourceControlTime, default: python:None\n\nFirst source control, consisting of the control parameter values over time, to use when\ngenerating the sound from this source.\n\nsource_control2\n\nSourceControlTime, default: python:None\n\nSecond source control, consisting of the control parameter values over time, to use\nwhen generating the sound from this source.\n\nMethods\n\n\n\nAttributes\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.standard_levels.OneThirdOctaveLevelsFromPSD.get_band_levels.html#get_band_levels","title":"get_band_levels","text":"get_band_levels\n\n\n\nOneThirdOctaveLevelsFromPSD.get_band_levels()\n\nReturn the band levels in dB as a numpy array.\n\nReturns\n\nnp.ndarray\n\nThe band levels in dB (actual unit depends on reference_value and\nfrequency_weighting attributes’ values).\n\nReturn type\n\nndarray"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.SharpnessDIN45692.process.html#process","title":"process","text":"process\n\n\n\nSharpnessDIN45692.process()\n\nCompute the DIN 45692 sharpness.\n\nThis method calls the appropriate DPF Sound operator."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.TonalityISOTS20065.get_decisive_audibility_over_time.html#get_decisive_audibility_over_time","title":"get_decisive_audibility_over_time","text":"get_decisive_audibility_over_time\n\n\n\nTonalityISOTS20065.get_decisive_audibility_over_time()\n\nGet the ISO/TS 20065 decisive audibility DLj, in dB over time.\n\nReturns\n\nnumpy.ndarray\n\nDecisive audibility DLj, in dB over time.\n\nReturn type\n\nndarray"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.signal_processing.Filter.frf.html#frf","title":"frf","text":"frf\n\n\n\nproperty Filter.frf: Field\n\nFrequency response function (FRF) of the filter.\n\nContains the response magnitude in dB of the filter as a function of frequency."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.TonalityISOTS20065.get_spectrum_number.html#get_spectrum_number","title":"get_spectrum_number","text":"get_spectrum_number\n\n\n\nTonalityISOTS20065.get_spectrum_number()\n\nGet the number of spectra.\n\nReturns the number of analyzed spectra, that is, the number of computation time steps.\n\nReturns\n\npython:int\n\nNumber of spectra.\n\nReturn type\n\nint"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.ToneToNoiseRatio.get_single_tone_info.html#get_single_tone_info","title":"get_single_tone_info","text":"get_single_tone_info\n\n\n\nToneToNoiseRatio.get_single_tone_info(tone_index)\n\nGet the TNR information for a tone.\n\nParameters\n\ntone_index\n\npython:int\n\nIndex of the tone.\n\nReturns\n\npython:tuple[python:float]\n\nFirst element: frequency of the peak in Hz.\n\nSecond element: TNR value in dB.\n\nThird element: level of the peak in dB SPL.\n\nFourth element: lower-frequency limit of the critical band centered on the peak,\nin Hz.\n\nFifth element: higher-frequency limit of the critical band centered on the peak,\nin Hz.\n\nReturn type\n\ntuple[float]"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.standard_levels.OneThirdOctaveLevelsFromPSD.get_output_as_nparray.html#get_output_as_nparray","title":"get_output_as_nparray","text":"get_output_as_nparray\n\n\n\nOneThirdOctaveLevelsFromPSD.get_output_as_nparray()\n\nReturn the band levels in dB and center frequencies in Hz as a tuple of numpy arrays.\n\nReturns\n\nnp.ndarray\n\nThe band levels in dB (actual unit depends on reference_value and\nfrequency_weighting attributes’ values).\n\nnp.ndarray\n\nThe center frequencies in Hz of the band levels.\n\nReturn type\n\ntuple[ndarray]"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.sound_composer.SourceSpectrum.source_control.html#source_control","title":"source_control","text":"source_control\n\n\n\nproperty SourceSpectrum.source_control: SourceControlSpectrum\n\nSource control of the spectrum source.\n\nContains the duration in seconds of the signal to generate, and the method to use to\ngenerate the signal."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.sound_power.SoundPowerLevelISO3744.load_project.html#load_project","title":"load_project","text":"load_project\n\n\n\nSoundPowerLevelISO3744.load_project(filename)\n\nSet all sound power level parameters according to a project file created in SAS.\n\nSets measurement surface shape and radius, K1, K2, C1, C2, and list of signals as specified\nin a sound power level project created in Ansys Sound Analysis & Specification.\n\nParameters\n\nfilename: string\n\nSound power level project file."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.sound_power.SoundPowerLevelISO3744.C2.html#c2","title":"C2","text":"C2\n\n\n\nproperty SoundPowerLevelISO3744.C2: float\n\nMeteorological radiation impedance correction C2 in dB.\n\nSee annex G of ISO 3744)."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.SpectralCentroid.process.html#process","title":"process","text":"process\n\n\n\nSpectralCentroid.process()\n\nCompute the spectral centroid."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.sound_composer.SourceAudio.get_output_as_nparray.html#get_output_as_nparray","title":"get_output_as_nparray","text":"get_output_as_nparray\n\n\n\nSourceAudio.get_output_as_nparray()\n\nGet the generated sound as a NumPy array.\n\nReturns\n\nnumpy.ndarray\n\nGenerated sound as a NumPy array.\n\nReturn type\n\nndarray"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.SpectralCentroid.get_spectral_centroid.html#get_spectral_centroid","title":"get_spectral_centroid","text":"get_spectral_centroid\n\n\n\nSpectralCentroid.get_spectral_centroid()\n\nGet the spectral centroid.\n\nReturns\n\npython:float\n\nSpectral centroid in Hz.\n\nReturn type\n\nfloat"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.TonalityISO1996_2.get_output_as_nparray.html#get_output_as_nparray","title":"get_output_as_nparray","text":"get_output_as_nparray\n\n\n\nTonalityISO1996_2.get_output_as_nparray()\n\nGet the ISO 1996-2 tonality data, in a tuple of NumPy arrays.\n\nReturns\n\npython:tuple\n\nFirst element: tonal audibility, in dB.\n\nSecond element: tonal adjustment, in dB.\n\nThird element: computation details, that is, the main tone’s critical band boundary\nfrequencies, and the total tone and noise levels in dBA.\n\nReturn type\n\ntuple[ndarray]"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.TonalityDIN45681.process.html#process","title":"process","text":"process\n\n\n\nTonalityDIN45681.process()\n\nCompute the DIN 45681 tonality.\n\nThis method calls the appropriate DPF Sound operator."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.sound_composer.SourceHarmonics.plot.html#plot","title":"plot","text":"plot\n\n\n\nSourceHarmonics.plot()\n\nPlot the resulting signal."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.spectrogram_processing.IsolateOrders.fft_size.html#fft_size","title":"fft_size","text":"fft_size\n\n\n\nproperty IsolateOrders.fft_size: int\n\nNumber of FFT points."},{"objectID":"Home","href":"api/signal_utilities.html#signal-utilities","title":"Signal utilities","text":"Signal utilities\n\nThis module provides utility functions for time-domain signals, such as\nreading and writing WAV files, resampling, cropping, zero-padding, and applying a gain.\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.spectrogram_processing.Stft.signal.html#signal","title":"signal","text":"signal\n\n\n\nproperty Stft.signal: Field\n\nInput signal.\n\nCan be provided as a DPF field or fields container, but will be stored as DPF field\nregardless."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.xtract.XtractTonal.output_non_tonal_signals.html#output_non_tonal_signals","title":"output_non_tonal_signals","text":"output_non_tonal_signals\n\n\n\nproperty XtractTonal.output_non_tonal_signals: FieldsContainer | Field\n\nOutput non-tonal signals.\n\nOne or more non-tonal signals as a DPF field or fields container (depending on the input)."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.TonalityDIN45681.signal.html#signal","title":"signal","text":"signal\n\n\n\nproperty TonalityDIN45681.signal: Field\n\nInput signal in Pa."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.standard_levels.OverallLevel.get_output_as_nparray.html#get_output_as_nparray","title":"get_output_as_nparray","text":"get_output_as_nparray\n\n\n\nOverallLevel.get_output_as_nparray()\n\nReturn the overall level as a numpy array.\n\nReturns\n\nnumpy.ndarray\n\nThe overall level value as a numpy array.\n\nReturn type\n\nndarray"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.xtract.XtractTonalParameters.process.html#process","title":"process","text":"process\n\n\n\nXtractTonalParameters.process()\n\nProcess inputs.\n\nThere is nothing to process."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.Sharpness.plot.html#plot","title":"plot","text":"plot\n\n\n\nSharpness.plot()\n\nPlot the output.\n\nThere is nothing to plot."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.spectrogram_processing.IsolateOrders.rpm_profile.html#rpm_profile","title":"rpm_profile","text":"rpm_profile\n\n\n\nproperty IsolateOrders.rpm_profile: Field\n\nRPM profile."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.sound_composer.SourceHarmonicsTwoParameters.source_harmonics_two_parameters.html#source_harmonics_two_parameters","title":"source_harmonics_two_parameters","text":"source_harmonics_two_parameters\n\n\n\nproperty SourceHarmonicsTwoParameters.source_harmonics_two_parameters: FieldsContainer\n\nSource data for the harmonics source with two parameters.\n\nThe harmonics source with two parameters data consists of a series of orders whose levels\ndepend on the values of two parameters, the first of which is always RPM. Levels must be\nspecified in unit^2 (for example Pa^2/Hz)."},{"objectID":"Home","href":"examples/gallery_examples/006_calculate_PR_and_TNR.html#calculate-tnr-and-pr","title":"Calculate TNR and PR","text":"Calculate TNR and PR\n\nIn the first part, this example shows how to calculate tone-to-noise ratio (TNR) and prominence\nratio (PR) following the ECMA 418-1 and ISO 7779 standards. It also extracts\nthe desired TNR and PR information and displays it in the console.\n\nIn the second part, the example shows how to calculate TNR and PR for specific\norders, when the input signal is associated with an RPM profile."},{"objectID":"Home","href":"examples/gallery_examples/006_calculate_PR_and_TNR.html#set-up-analysis","title":"Calculate TNR and PR > Set up analysis","text":"Set up analysis\n\nSetting up the analysis consists of loading Ansys libraries, connecting to the\nDPF server, and retrieving the example files."},{"objectID":"Home","href":"examples/gallery_examples/006_calculate_PR_and_TNR.html#calculate-tnr-from-a-psd","title":"Calculate TNR and PR > Calculate TNR from a PSD","text":"Calculate TNR from a PSD\n\nLoad a power spectral density (PSD) stored as a text file and then use it to create\na field that serves as an input for the TNR calculation.\n\nCreate a ToneToNoiseRatio object, set the created PSD field as input, and compute the\nTNR.\n\nPrint results.\n\nPlot the TNR over frequency.\n\n\n\nRecalculate the TNR for specific frequencies.\n\nPrint information for a specific detected peak."},{"objectID":"Home","href":"examples/gallery_examples/006_calculate_PR_and_TNR.html#calculate-pr-from-a-signal","title":"Calculate TNR and PR > Calculate PR from a signal","text":"Calculate PR from a signal\n\nUse the PowerSpectralDensity class to calculate a PSD, and compute Prominence Ratio\n(PR).\n\nCreate a PowerSpectralDensity object, set its input signal and parameters,\nand compute the PSD.\n\nGet the computed PSD as a Field.\n\nCreate a ProminenceRatio object, set the computed PSD as input, and compute the PR.\n\nPrint the results.\n\nPlot the PR as a function of frequency.\n\n\n\nRecalculate the PR for specific frequencies.\n\nPrint information for a specific detected peak."},{"objectID":"Home","href":"examples/gallery_examples/006_calculate_PR_and_TNR.html#calculate-tnr-over-time-for-specific-orders","title":"Calculate TNR and PR > Calculate TNR over time for specific orders","text":"Calculate TNR over time for specific orders\n\nLoad an acoustic signal and its associated RPM over time profile and calculate the TNR for\norder numbers 2, 4, and 6.\n\nCreate a ToneToNoiseRatioForOrdersOverTime object, set the input signal, the associated\nRPM profile, and the orders of interest, and compute the orders’ TNR over time.\n\nDisplay the TNR values over time, for the orders of interest.\n\n\n\nYou can then notice that order #2’s TNR is above 0 dB at around 10 s and after 18 s, order #4’s,\nat various times throughout the signal duration, and order #6’s exceeds 0 dB more rarely."},{"objectID":"Home","href":"examples/gallery_examples/006_calculate_PR_and_TNR.html#calculate-pr-over-time-for-specific-orders","title":"Calculate TNR and PR > Calculate PR over time for specific orders","text":"Calculate PR over time for specific orders\n\nCreate a ProminenceRatioForOrdersOverTime object, set the input signal, the associated\nRPM profile, and the orders of interest, and compute the orders’ PR over time.\n\nDisplay the PR values over RPM, for the orders of interest.\n\n\n\nYou can then notice that order #6’s PR is above 0 dB mostly in the range 2600-3600 rpm,\norder #4’s, only above 4000 rpm, and order #2’s, at various RPM values above 3000 rpm.\n\nTotal running time of the script: (0 minutes 20.418 seconds)\n\n\n\nDownload Jupyter notebook: 006_calculate_PR_and_TNR.ipynb\n\nDownload Python source code: 006_calculate_PR_and_TNR.py\n\nDownload zipped: 006_calculate_PR_and_TNR.zip\n\nGallery generated by Sphinx-Gallery"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.spectrogram_processing.Stft.fft_size.html#fft_size","title":"fft_size","text":"fft_size\n\n\n\nproperty Stft.fft_size: int\n\nNumber of FFT points."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.SharpnessOverTime.signal.html#signal","title":"signal","text":"signal\n\n\n\nproperty SharpnessOverTime.signal: Field\n\nInput signal in Pa."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.SharpnessDIN45692OverTime.get_output_as_nparray.html#get_output_as_nparray","title":"get_output_as_nparray","text":"get_output_as_nparray\n\n\n\nSharpnessDIN45692OverTime.get_output_as_nparray()\n\nGet the DIN 45692 sharpness over time data, as a tuple of NumPy arrays.\n\nReturns\n\npython:tuple[numpy.ndarray]\n\nFirst element: maximum sharpness over time, in acum.\n\nSecond element: sharpness over time, in acum.\n\nThird element: time scale, in s.\n\nReturn type\n\ntuple[ndarray]"},{"objectID":"Home","href":"index.html#pyansys-sound","title":"PyAnsys Sound","text":"PyAnsys Sound\n\n\n\nPyAnsys Sound lets you use the main features of Ansys Sound to perform\nthe postprocessing and analysis of sounds and vibrations in Python. This library is based on\nPyDPF-Core and the DPF Sound plugin. It is a Python wrapper that implements classes on top\nof DPF Sound operators.\n\nThese documentation sections provide information on installing and using PyAnsys Sound:\n\nGetting started \n\nLearn how to install PyAnsys Sound and its prerequisites in user mode.\n\ngetting_started\n\nUser guide \n\nLearn how to start a DPF server, load a signal from a WAV files, and perform operations\non the signal.\n\nuser_guide\n\nAPI reference \n\nUnderstand how to use Python to interact programmatically with PyAnsys Sound.\n\napi/index\n\nExamples \n\nExplore examples that show how to use PyAnsys Sound for various workflows.\n\nexamples/index\n\nContribute \n\nLearn how to contribute to the PyAnsys Sound codebase or documentation.\n\ncontribute"},{"objectID":"Home","href":"index.html#key-features","title":"PyAnsys Sound > Key features","text":"Key features\n\nThe following API reference pages describe some key features of PyAnsys Sound:\n\napi/signal_utilities: Tools to read and write WAV files in the format used by Ansys Sound Analysis\nand Specification (SAS) and tools to perform basic editing of audio signals.\n\napi/signal_processing: Tools to perform time-domain signal processing, such as filtering.\n\napi/spectral_processing: Tools to perform frequency-domain signal processing, such as\ncalculating a power spectral density (PSD).\n\napi/spectrogram_processing: Spectrogram calculation and editing tools.\n\napi/psychoacoustics: Psychoacoustic indicators computation to measure perceived sound quality.\n\napi/xtract: Separation of a signal into several components, such as tonal, transient, and noise parts.\n\napi/sound_composer: Generation of sounds from sources defined in the time domain or the frequency domain.\nCreation of complex sounds by mixing several tracks (each track contains a specific user-defined source).\n\napi/standard_levels: Calculation of standard levels for time-domain signals.\n\napi/sound_power: Calculation of sound power from time-domain signals.\n\nNot all features of Ansys SAS are available in PyAnsys Sound. Features are regularly\nadded in new versions.\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.LoudnessANSI_S3_4.html#loudnessansi_s3_4","title":"LoudnessANSI_S3_4","text":"LoudnessANSI_S3_4\n\n\n\nclass ansys.sound.core.psychoacoustics.LoudnessANSI_S3_4(signal=None, field_type='Free')\n\nComputes ANSI S3.4-2007 loudness.\n\nThis class computes the loudness of a signal according to the ANSI S3.4-2007 standard.\n\nClass instantiation takes the following parameters.\n\nParameters\n\nsignal\n\nField, default: python:None\n\nInput signal in Pa.\n\nfield_type\n\npython:str, default: “Free”\n\nSound field type. Available options are “Free” and “Diffuse”.\n\nMethods\n\n\n\nAttributes\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.signal_processing.Filter.get_output_as_nparray.html#get_output_as_nparray","title":"get_output_as_nparray","text":"get_output_as_nparray\n\n\n\nFilter.get_output_as_nparray()\n\nGet the filtered signal as a NumPy array.\n\nReturns\n\nnumpy.ndarray\n\nFiltered signal as a NumPy array.\n\nReturn type\n\nndarray"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.xtract.Xtract.process.html#process","title":"process","text":"process\n\n\n\nXtract.process()\n\nProcess the Xtract algorithm."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.SharpnessDIN45692OverTime.process.html#process","title":"process","text":"process\n\n\n\nSharpnessDIN45692OverTime.process()\n\nCompute the DIN 45692 sharpness, over time.\n\nThis method calls the appropriate DPF Sound operator."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.LoudnessISO532_1_Stationary.get_bark_band_indexes.html#get_bark_band_indexes","title":"get_bark_band_indexes","text":"get_bark_band_indexes\n\n\n\nLoudnessISO532_1_Stationary.get_bark_band_indexes()\n\nGet Bark band indexes.\n\nThis method returns the Bark band indexes used for the loudness calculation as a NumPy\narray.\n\nReturns\n\nnumpy.ndarray\n\nArray of Bark band indexes, in Bark.\n\nReturn type\n\nndarray"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.ProminenceRatioForOrdersOverTime.profile.html#profile","title":"profile","text":"profile\n\n\n\nproperty ProminenceRatioForOrdersOverTime.profile: Field\n\nRPM over time related to the input signal."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.sound_composer.SourceSpectrum.source_spectrum_data.html#source_spectrum_data","title":"source_spectrum_data","text":"source_spectrum_data\n\n\n\nproperty SourceSpectrum.source_spectrum_data: Field\n\nSource data for the spectrum source.\n\nThe source data consists of a power spectral density (PSD), where levels are specified in\nunit^2/Hz (for example Pa^2/Hz)."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.standard_levels.LevelOverTime.reference_value.html#reference_value","title":"reference_value","text":"reference_value\n\n\n\nproperty LevelOverTime.reference_value: float\n\nReference value for the level computation.\n\nIf the overall level is computed with a sound pressure signal in Pa, the reference value\nshould be 2e-5 (Pa)."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.sound_composer.SourceBroadbandNoise.html#sourcebroadbandnoise","title":"SourceBroadbandNoise","text":"SourceBroadbandNoise\n\n\n\nclass ansys.sound.core.sound_composer.SourceBroadbandNoise(file='', source_control=None)\n\nSound Composer’s broadband noise source class.\n\nThis class creates a broadband noise source for the Sound Composer. A broadband noise source is\nused to generate a sound signal from broadband noise source data and one source control.\n\nThe broadband noise source data consists of a series of noise spectra, each corresponding to a\ncontrol parameter value.\n\nThe source control contains the control parameter values over time.\n\nClass instantiation takes the following parameters.\n\nParameters\n\nfile\n\npython:str, default: “”\n\nPath to the broadband noise file. Supported files are text files with the header\nAnsysSound_BBN.\n\nsource_control\n\nSourceControlTime, default: python:None\n\nSource control, consisting of the control parameter values over time to use when\ngenerating the sound from this source.\n\nMethods\n\n\n\nAttributes\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.LoudnessANSI_S3_4.field_type.html#field_type","title":"field_type","text":"field_type\n\n\n\nproperty LoudnessANSI_S3_4.field_type: str\n\nSound field type.\n\nAvailable options are “Free” and “Diffuse”."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.sound_composer.SourceAudio.process.html#process","title":"process","text":"process\n\n\n\nSourceAudio.process(sampling_frequency=44100.0)\n\nGenerate the sound of the audio source.\n\nThis method simply copies the audio source data to the output, possibly after having\nresampled it to the sampling frequency given as input.\n\nParameters\n\nsampling_frequency\n\npython:float, default: 44100.0\n\nSampling frequency of the generated sound in Hz."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.standard_levels.OneThirdOctaveLevelsFromSignal.get_output.html#get_output","title":"get_output","text":"get_output\n\n\n\nOneThirdOctaveLevelsFromSignal.get_output()\n\nReturn the band levels in dB.\n\nReturns\n\nField\n\nThe band levels in dB (actual unit depends on reference_value and\nfrequency_weighting attributes’ values).\n\nReturn type\n\nField"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.sound_composer.SourceSpectrum.set_from_generic_data_containers.html#set_from_generic_data_containers","title":"set_from_generic_data_containers","text":"set_from_generic_data_containers\n\n\n\nSourceSpectrum.set_from_generic_data_containers(source_data, source_control_data)\n\nSet the source and source control data from generic data containers.\n\nThis method is meant to set the source data from generic data containers obtained when\nloading a Sound Composer project file (.scn) with the method SoundComposer.load().\n\nParameters\n\nsource_data\n\nGenericDataContainer\n\nSource data as a DPF generic data container.\n\nsource_control_data\n\nGenericDataContainer\n\nSource control data as a DPF generic data container."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.sound_composer.SoundComposer.process.html#process","title":"process","text":"process\n\n\n\nSoundComposer.process(sampling_frequency=44100.0)\n\nGenerate the signal of the current Sound Composer project.\n\nGenerates the project’s signal corresponding to the sum of all the track signals.\n\nParameters\n\nsampling_frequency\n\npython:float, default: 44100.0\n\nSampling frequency of the generated sound in Hz."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.TonalityISO1996_2.noise_pause_threshold.html#noise_pause_threshold","title":"noise_pause_threshold","text":"noise_pause_threshold\n\n\n\nproperty TonalityISO1996_2.noise_pause_threshold: float\n\nNoise pause detection threshold (level excess) in dB."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.sound_composer.SpectrumSynthesisMethods.Hybrid.html#hybrid","title":"Hybrid","text":"Hybrid\n\n\n\nSpectrumSynthesisMethods.Hybrid = 'Hybrid'\n\nHybrid: sound generation method that combines generation of pure tones and IFFT.\nIf peaks are detected in the input spectrum, they are generated as pure tones (sine waves).\nThe rest is synthesized using the IFFT method."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.standard_levels.OctaveLevelsFromSignal.get_band_levels.html#get_band_levels","title":"get_band_levels","text":"get_band_levels\n\n\n\nOctaveLevelsFromSignal.get_band_levels()\n\nReturn the band levels in dB as a numpy array.\n\nReturns\n\nnp.ndarray\n\nThe band levels in dB (actual unit depends on reference_value and\nfrequency_weighting attributes’ values).\n\nReturn type\n\nndarray"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.xtract.Xtract.get_output_as_nparray.html#get_output_as_nparray","title":"get_output_as_nparray","text":"get_output_as_nparray\n\n\n\nXtract.get_output_as_nparray()\n\nGet the output of the Xtract algorithm in a tuple as NumPy arrays.\n\nReturns\n\npython:tuple[numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray]\n\nNoise signal, tonal signal, transient signal, and remainder signal in a\ntuple as NumPy arrays.\n\nReturn type\n\ntuple[ndarray, ndarray, ndarray, ndarray]"},{"objectID":"Home","href":"examples/gallery_examples/003_compute_stft.html#spectrogram-compute-the-stft-and-istft","title":"Spectrogram: compute the STFT and ISTFT","text":"Spectrogram: compute the STFT and ISTFT\n\nThis example shows how to compute the short-time Fourier transform (STFT) of a signal.\nIt also shows how to compute the inverse short-time Fourier transform (ISTFT) from a\nSTFT matrix and get a signal."},{"objectID":"Home","href":"examples/gallery_examples/003_compute_stft.html#set-up-analysis","title":"Spectrogram: compute the STFT and ISTFT > Set up analysis","text":"Set up analysis\n\nSetting up the analysis consists of loading Ansys libraries, connecting to the\nDPF server, and retrieving the example files."},{"objectID":"Home","href":"examples/gallery_examples/003_compute_stft.html#load-a-signal","title":"Spectrogram: compute the STFT and ISTFT > Load a signal","text":"Load a signal\n\nLoad a signal from a WAV file using the LoadWav class. It is returned as a DPF\nfield container. For more information, see fields_container\nin the DPF-Core API documentation.\n\n"},{"objectID":"Home","href":"examples/gallery_examples/003_compute_stft.html#compute-and-plot-stft","title":"Spectrogram: compute the STFT and ISTFT > Compute and plot STFT","text":"Compute and plot STFT\n\n\n\nModify the STFT parameters using the setters of the Stft class.\nDisplay the new STFT colormap.\n\n"},{"objectID":"Home","href":"examples/gallery_examples/003_compute_stft.html#compute-and-plot-istft","title":"Spectrogram: compute the STFT and ISTFT > Compute and plot ISTFT","text":"Compute and plot ISTFT\n\nPlot the output, which is the original signal.\n\n\n\nTotal running time of the script: (0 minutes 35.287 seconds)\n\n\n\nDownload Jupyter notebook: 003_compute_stft.ipynb\n\nDownload Python source code: 003_compute_stft.py\n\nDownload zipped: 003_compute_stft.zip\n\nGallery generated by Sphinx-Gallery"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.spectral_processing.PowerSpectralDensity.window_length.html#window_length","title":"window_length","text":"window_length\n\n\n\nproperty PowerSpectralDensity.window_length: int\n\nNumber of window points."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.TonalityAures.get_time_scale.html#get_time_scale","title":"get_time_scale","text":"get_time_scale\n\n\n\nTonalityAures.get_time_scale()\n\nGet the time scale.\n\nReturns\n\nnumpy.ndarray\n\nTime scale in s.\n\nReturn type\n\nndarray"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.sound_composer.Track.name.html#name","title":"name","text":"name\n\n\n\nproperty Track.name: str\n\nName of the track."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.sound_composer.SoundComposer.plot.html#plot","title":"plot","text":"plot\n\n\n\nSoundComposer.plot()\n\nPlot the generated signal of the Sound Composer project."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.ToneToNoiseRatioForOrdersOverTime.get_order_tone_to_noise_ratio_over_time.html#get_order_tone_to_noise_ratio_over_time","title":"get_order_tone_to_noise_ratio_over_time","text":"get_order_tone_to_noise_ratio_over_time\n\n\n\nToneToNoiseRatioForOrdersOverTime.get_order_tone_to_noise_ratio_over_time(order_index)\n\nGet the tone-to-noise ratio over time for a specific order.\n\nParameters\n\norder_index\n\npython:int\n\nIndex of the order for which to get the tone-to-noise ratio over time.\nThe index refers to the list of orders stored in order_list.\n\nReturns\n\nnumpy.ndarray\n\nTone-to-noise ratio over time, in dB, for the specified order.\n\nReturn type\n\nndarray"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.spectrogram_processing.Stft.get_output_as_nparray.html#get_output_as_nparray","title":"get_output_as_nparray","text":"get_output_as_nparray\n\n\n\nStft.get_output_as_nparray()\n\nGet the STFT of the signal as a NumPy array.\n\nReturns\n\nnumpy.ndarray\n\nSTFT of the signal in a NumPy array.\n\nReturn type\n\nndarray"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.signal_utilities.CropSignal.end_time.html#end_time","title":"end_time","text":"end_time\n\n\n\nproperty CropSignal.end_time: float\n\nEnd time of the part to crop in s."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.Roughness.get_time_scale.html#get_time_scale","title":"get_time_scale","text":"get_time_scale\n\n\n\nRoughness.get_time_scale()\n\nGet the time scale of the roughness over time, in s.\n\nReturns\n\nnumpy.ndarray\n\nTime scale of the roughness over time, in s.\n\nReturn type\n\nndarray"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.sound_composer.Track.get_output.html#get_output","title":"get_output","text":"get_output\n\n\n\nTrack.get_output()\n\nGet the generated signal of the track as a DPF field.\n\nReturns\n\nField\n\nGenerated signal as a DPF field.\n\nReturn type\n\nField"},{"objectID":"Home","href":"api/index.html#api-reference","title":"API reference","text":"API reference\n\nThis section describes how to use Python to interact programmatically with PyAnsys Sound.\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.sound_composer.SourceBroadbandNoiseTwoParameters.source_bbn_two_parameters.html#source_bbn_two_parameters","title":"source_bbn_two_parameters","text":"source_bbn_two_parameters\n\n\n\nproperty SourceBroadbandNoiseTwoParameters.source_bbn_two_parameters: FieldsContainer\n\nSource data for the broadband noise source with two parameters.\n\nThe broadband noise source with two parameters data consists of a series of spectra, each\ncorresponding to a pair of control parameter values.\n\nEach field contains the level over frequency of the noise at a given pair of values of the\ntwo control parameters. Level over frequency may be specified as a power spectral density\n(PSD) in Pa^2/Hz, as octave-band levels in Pa^2, or as 1/3-octave-band levels in Pa^2. The\nunit must be indicated in each field’s unit. The type of data (‘Narrow band’, ‘Octave’, or\n‘Third octave’) must be indicated in the field’s FieldDefinition attribute, as a\nquantity type.\n\nThe two control parameters’ values corresponding to spectra must be stored in the fields\ncontainer’s supports named “control_parameter_1”, “control_parameter_2”, respectively."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.standard_levels.OctaveLevelsFromPSD.get_center_frequencies.html#get_center_frequencies","title":"get_center_frequencies","text":"get_center_frequencies\n\n\n\nOctaveLevelsFromPSD.get_center_frequencies()\n\nReturn the center frequencies in Hz of the band levels as a numpy array.\n\nReturns\n\nnp.ndarray\n\nThe center frequencies in Hz of the band levels.\n\nReturn type\n\nndarray"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.standard_levels.OctaveLevelsFromPSD.process.html#process","title":"process","text":"process\n\n\n\nOctaveLevelsFromPSD.process()\n\nCompute the band levels."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.spectrogram_processing.Istft.html#istft","title":"Istft","text":"Istft\n\n\n\nclass ansys.sound.core.spectrogram_processing.Istft(stft=None)\n\nComputes the inverse short-time Fourier transform (ISTFT) of a signal.\n\nClass instantiation takes the following parameters.\n\nParameters\n\nstft\n\nFieldsContainer, default: python:None\n\nDPF fields container containing a short-time Fourier transform (STFT)\ncomputed with the Stft class.\n\nMethods\n\n\n\nAttributes\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.sound_composer.SourceHarmonicsTwoParameters.plot.html#plot","title":"plot","text":"plot\n\n\n\nSourceHarmonicsTwoParameters.plot()\n\nPlot the resulting signal."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.sound_composer.SourceHarmonics.source_harmonics.html#source_harmonics","title":"source_harmonics","text":"source_harmonics\n\n\n\nproperty SourceHarmonics.source_harmonics: FieldsContainer\n\nSource data for the harmonics source.\n\nThe harmonics source data consists of a series of orders whose levels depend on RPM. Levels\nmust be specified in unit^2 (for example Pa^2/Hz)."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.sound_power.SoundPowerLevelISO3744.get_octave_center_frequencies.html#get_octave_center_frequencies","title":"get_octave_center_frequencies","text":"get_octave_center_frequencies\n\n\n\nSoundPowerLevelISO3744.get_octave_center_frequencies()\n\nGet octave-band center frequencies.\n\nReturns\n\nnumpy.ndarray\n\nArray of octave-band center frequencies in Hz.\n\nReturn type\n\nndarray"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.signal_processing.Filter.process.html#process","title":"process","text":"process\n\n\n\nFilter.process()\n\nFilter the signal with the current coefficients."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.ToneToNoiseRatio.get_peaks_frequencies.html#get_peaks_frequencies","title":"get_peaks_frequencies","text":"get_peaks_frequencies\n\n\n\nToneToNoiseRatio.get_peaks_frequencies()\n\nGet the vector of the peaks’ frequencies in Hz.\n\nReturns\n\nnumpy.ndarray\n\nVector of the peaks’ frequencies in Hz.\n\nReturn type\n\nndarray"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.xtract.XtractTransientParameters.plot.html#plot","title":"plot","text":"plot\n\n\n\nXtractTransientParameters.plot()\n\nPlot the output.\n\nThere is nothing to plot."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.ToneToNoiseRatioForOrdersOverTime.plot.html#plot","title":"plot","text":"plot\n\n\n\nToneToNoiseRatioForOrdersOverTime.plot(use_rpm_scale=False)\n\nPlot all orders’ TNR over time or RPM.\n\nParameters\n\nuse_rpm_scale\n\nbool\n\nIndicates whether to plot the TNR as a function of time or RPM."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.Roughness.get_output.html#get_output","title":"get_output","text":"get_output\n\n\n\nRoughness.get_output()\n\nGet roughness data.\n\nReturns\n\npython:tuple\n\nFirst element (float): overall roughness in asper.\n\nSecond element (Field): specific roughness, that is, the roughness in each\nBark band, in asper/Bark.\n\nThird element (Field): roughness over time, in asper.\n\nReturn type\n\ntuple"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.sound_composer.SourceBroadbandNoiseTwoParameters.get_output.html#get_output","title":"get_output","text":"get_output\n\n\n\nSourceBroadbandNoiseTwoParameters.get_output()\n\nGet the generated sound as a DPF field.\n\nReturns\n\nField\n\nGenerated sound as a DPF field.\n\nReturn type\n\nField"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.TonalityISO1996_2_OverTime.get_segment_count.html#get_segment_count","title":"get_segment_count","text":"get_segment_count\n\n\n\nTonalityISO1996_2_OverTime.get_segment_count()\n\nGet the number of segments.\n\nReturns the number of overlapping windows (segments) on which the ISO 1996-2 tonality was\ncomputed.\n\nReturns\n\npython:int\n\nNumber of segments.\n\nReturn type\n\nint"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.standard_levels.OctaveLevelsFromSignal.reference_value.html#reference_value","title":"reference_value","text":"reference_value\n\n\n\nproperty OctaveLevelsFromSignal.reference_value: float\n\nReference value for the levels’ computation.\n\nIf the levels are computed with a PSD in Pa^2/Hz, the reference value should be 2e-5 (Pa)."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.LoudnessISO532_1_TimeVarying.get_time_scale.html#get_time_scale","title":"get_time_scale","text":"get_time_scale\n\n\n\nLoudnessISO532_1_TimeVarying.get_time_scale()\n\nGet the time scale of the instantaneous loudness and loudness level.\n\nReturns\n\nnumpy.ndarray\n\nArray of the time steps of the instantaneous loudness and loudness level, in seconds.\n\nReturn type\n\nndarray"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.TonalityISO1996_2.get_tonal_audibility.html#get_tonal_audibility","title":"get_tonal_audibility","text":"get_tonal_audibility\n\n\n\nTonalityISO1996_2.get_tonal_audibility()\n\nGet the ISO 1996-2 tonal audibility, in dB.\n\nReturns\n\npython:float\n\nISO 1996-2 tonal audibility, in dB.\n\nReturn type\n\nfloat"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.standard_levels.OverallLevel.process.html#process","title":"process","text":"process\n\n\n\nOverallLevel.process()\n\nCompute the overall level."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.TonalityISO1996_2_OverTime.get_output_as_nparray.html#get_output_as_nparray","title":"get_output_as_nparray","text":"get_output_as_nparray\n\n\n\nTonalityISO1996_2_OverTime.get_output_as_nparray()\n\nGet the ISO 1996-2 tonality data as NumPy arrays.\n\nReturns\n\npython:tuple[numpy.ndarray]\n\nFirst element: tonal audibility over time, in dB.\n\nSecond element: tonal adjustment over time, in dB.\n\nThird element: time scale in s.\n\nReturn type\n\ntuple[ndarray]"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.ToneToNoiseRatio.get_output_as_nparray.html#get_output_as_nparray","title":"get_output_as_nparray","text":"get_output_as_nparray\n\n\n\nToneToNoiseRatio.get_output_as_nparray()\n\nGet TNR data in a tuple as a NumPy array.\n\nReturns\n\npython:tuple\n\nFirst element: array of peaks’ frequencies in Hz.\n\nSecond element: array of peaks’ TNR values in dB.\n\nThird element: array of peaks’ level values in dB SPL.\n\nFourth element: array of the lower-frequency limits, in Hz, of the critical\nbandwidths centered on the peaks’ frequencies.\n\nFifth element: array of the upper-frequency limits, in Hz, of the critical\nbandwidths centered on the peaks’ frequencies.\n\nSixth element: maximum TNR value in dB.\n\nThe first five elements are arrays of the same length. The sixth element is a float.\n\nReturn type\n\ntuple[ndarray] | None"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.Roughness.get_roughness_over_time.html#get_roughness_over_time","title":"get_roughness_over_time","text":"get_roughness_over_time\n\n\n\nRoughness.get_roughness_over_time()\n\nGet the roughness over time in asper.\n\nReturns\n\nnumpy.ndarray\n\nRoughness over time in asper.\n\nReturn type\n\nndarray"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.SharpnessDIN45692OverTime.get_max_sharpness.html#get_max_sharpness","title":"get_max_sharpness","text":"get_max_sharpness\n\n\n\nSharpnessDIN45692OverTime.get_max_sharpness()\n\nGet the maximum value of the DIN 45692 sharpness over time.\n\nReturns\n\npython:float\n\nMaximum value of the sharpness over time, in acum.\n\nReturn type\n\nfloat"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.xtract.XtractDenoiserParameters.create_noise_psd_from_automatic_estimation.html#create_noise_psd_from_automatic_estimation","title":"create_noise_psd_from_automatic_estimation","text":"create_noise_psd_from_automatic_estimation\n\n\n\nXtractDenoiserParameters.create_noise_psd_from_automatic_estimation(signal, window_length=50)\n\nCreate a power spectral density (PSD) of noise using an automatic estimation.\n\nParameters\n\nsignal\n\nField\n\nSignal to estimate the noise profile from.\n\nwindow_length\n\npython:int, default: 50\n\nWindow length for the noise level estimation in milliseconds (ms).\n\nReturns\n\nField\n\nPSD of noise in unit^2/Hz (Pa^2/Hz for example).\n\nReturn type\n\nField"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.xtract.XtractTonalParameters.regularity.html#regularity","title":"regularity","text":"regularity\n\n\n\nproperty XtractTonalParameters.regularity: float\n\nRegularity parameter.\n\nValues are between 0 and 1. This parameter is designed to reject tonal components with too\nmuch frequency variation. You should start with the default value (1.0) and then lower\nit to remove detected tonals whose frequency evolutions are too erratic."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.xtract.XtractDenoiser.input_parameters.html#input_parameters","title":"input_parameters","text":"input_parameters\n\n\n\nproperty XtractDenoiser.input_parameters: XtractDenoiserParameters\n\nInput parameters.\n\nStructure that contains the parameters of the algorithm:\n\nPower spectral density of the noise, as a DPF field."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.TonalityDIN45681.get_uncertainty_over_time.html#get_uncertainty_over_time","title":"get_uncertainty_over_time","text":"get_uncertainty_over_time\n\n\n\nTonalityDIN45681.get_uncertainty_over_time()\n\nGet the DIN 45681 decisive difference uncertainty, in dB over time.\n\nReturns\n\nnumpy.ndarray\n\nDecisive difference uncertainty, in dB over time.\n\nReturn type\n\nndarray"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.xtract.XtractTonalParameters.local_emergence.html#local_emergence","title":"local_emergence","text":"local_emergence\n\n\n\nproperty XtractTonalParameters.local_emergence: float\n\nLocal emergence in dB.\n\nEmergence in dB of the tonal components compared to the background noise. Values are\nbetween 0 and 100 dB."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.sound_composer.SourceHarmonics.process.html#process","title":"process","text":"process\n\n\n\nSourceHarmonics.process(sampling_frequency=44100.0)\n\nGenerate the sound of the harmonics source.\n\nThis method generates the sound of the harmonics source, using the current harmonics\ndata and source control (RPM).\n\nParameters\n\nsampling_frequency\n\npython:float, default: 44100.0\n\nSampling frequency of the generated sound in Hz."},{"objectID":"Home","href":"api/signal_processing.html#signal-processing","title":"Signal processing","text":"Signal processing\n\nThis module provides useful functions to process time-domain signals, such as filtering.\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.xtract.XtractTonal.process.html#process","title":"process","text":"process\n\n\n\nXtractTonal.process()\n\nProcess the tonal analysis."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.LoudnessISO532_1_Stationary.process.html#process","title":"process","text":"process\n\n\n\nLoudnessISO532_1_Stationary.process()\n\nCompute the loudness.\n\nThis method calls the appropriate DPF Sound operator to compute the loudness of the signal."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.TonalityISOTS20065.signal.html#signal","title":"signal","text":"signal\n\n\n\nproperty TonalityISOTS20065.signal: Field\n\nInput signal in Pa."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.spectral_processing.PowerSpectralDensity.get_frequencies.html#get_frequencies","title":"get_frequencies","text":"get_frequencies\n\n\n\nPowerSpectralDensity.get_frequencies()\n\nGet the frequencies associated with the PSD.\n\nReturns\n\nnumpy.ndarray\n\nArray of frequencies, in Hz.\n\nReturn type\n\nndarray"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.xtract.XtractTransientParameters.upper_threshold.html#upper_threshold","title":"upper_threshold","text":"upper_threshold\n\n\n\nproperty XtractTransientParameters.upper_threshold: float\n\nUpper threshold.\n\nMaximum threshold, which is related to the maximum energy of transient components.\nValues are between 0 and 100. You should set this parameter as low as possible provided\nthat no transient element remains in the remainder (non-transient signal)."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.sound_composer.SourceBroadbandNoiseTwoParameters.source_control1.html#source_control1","title":"source_control1","text":"source_control1\n\n\n\nproperty SourceBroadbandNoiseTwoParameters.source_control1: SourceControlTime\n\nFirst source control for the broadband noise source with two parameters.\n\nContains the first control parameter values over time."},{"objectID":"Home","href":"examples/gallery_examples/001_initialize_server_and_deal_with_license.html#initialize-pyansys-sound-and-check-out-the-license","title":"Initialize PyAnsys Sound and check out the license","text":"Initialize PyAnsys Sound and check out the license\n\nThis example shows how to initialize PyDPF-Core, load DPF Sound, and check out the\nrequired Ansys license (increment avrxp_snd_level1) only once. It also shows\nhow to connect to the DPF server, verify where it is located, and get other useful\ninformation.\n\nThis example also demonstrates the use of the LicenseContextManager, a mechanism that lets you\ncheck out the license only once for the duration of the session, which greatly improves performance.\nIt shows the execution time of a simple DPF Sound operator when you do not use the\nLicenseContextManager versus when you do use it.\n\nPrerequisites\n\nEnsure that you have installed PyDPF-Core and DPF Sound according to procedures in\nthe PyDPF-Core documentation:\n\nIf you have installed the latest Ansys release, see Install using pip.\n\nIf you want to use the DPF standalone version, see Install DPF Server."},{"objectID":"Home","href":"examples/gallery_examples/001_initialize_server_and_deal_with_license.html#perform-required-imports","title":"Initialize PyAnsys Sound and check out the license > Perform required imports","text":"Perform required imports\n\nPerform the required imports:"},{"objectID":"Home","href":"examples/gallery_examples/001_initialize_server_and_deal_with_license.html#use-a-dpf-server-without-a-licensecontextmanager","title":"Initialize PyAnsys Sound and check out the license > Use a DPF server without a LicenseContextManager","text":"Use a DPF server without a LicenseContextManager\n\nInitialize a DPF server without using a LicenseContextManager.\n\nNote: When use_license_context=False, the license is checked out each time\nyou use a DPF Sound operator.\n\nDisplay information about the server that you are using.\n\nExecute the PyAnsys Sound LoadWav operator several times in a row\nand measure the execution time.\n\nDisconnect (shut down) the server."},{"objectID":"Home","href":"examples/gallery_examples/001_initialize_server_and_deal_with_license.html#use-a-dpf-server-with-a-licensecontextmanager","title":"Initialize PyAnsys Sound and check out the license > Use a DPF server with a LicenseContextManager","text":"Use a DPF server with a LicenseContextManager\n\nInitialize a DPF server using a LicenseContextManager and execute the same code as run previously.\n\nNote: The LicenseContextManager is a mechanism that checks out a license increment\nwhen entering the context and releases it when exiting the context.\n\nYou can see that the execution time is much faster when you use a LicenseContextManager.\nThis is because when a LicenseContactManager is not used, the license is checked out\neach time you use a DPF Sound operator.\n\nYou can release the license increment by deleting the LicenseContextManager object.\n\nNow that the LicenseContextManager has been deleted, any new call to a PyAnsys Sound function\nwill spend time checking out the license increment again. Let us call the same function as before\nand measure the execution time again:\n\nDisconnect (shut down) the server.\n\nTotal running time of the script: (0 minutes 27.883 seconds)\n\n\n\nDownload Jupyter notebook: 001_initialize_server_and_deal_with_license.ipynb\n\nDownload Python source code: 001_initialize_server_and_deal_with_license.py\n\nDownload zipped: 001_initialize_server_and_deal_with_license.zip\n\nGallery generated by Sphinx-Gallery"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.xtract.XtractTonal.plot.html#plot","title":"plot","text":"plot\n\n\n\nXtractTonal.plot()\n\nPlot the output of the tonal analysis.\n\nThis method plots both the tonal and non-tonal signals."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.xtract.XtractDenoiser.html#xtractdenoiser","title":"XtractDenoiser","text":"XtractDenoiser\n\n\n\nclass ansys.sound.core.xtract.XtractDenoiser(input_signal=None, input_parameters=None)\n\nProvides signal denoising using the Xtract algorithm.\n\nClass instantiation takes the following parameters.\n\nParameters\n\ninput_signal\n\nFieldsContainer | Field, default: python:None\n\nOne or more signals to denoise as a DPF fields container or field. When inputting a\nfields container, each signal (each field of the fields container) is processed\nindividually.\n\ninput_parameters\n\nXtractDenoiserParametersm, default: python:None\n\nStructure that contains the parameters of the algorithm:\n\nNoise PSD (Field): Power spectral density of the noise\n\nThis structure is of the XtractDenoiserParameters type. For more information,\nsee this class.\n\nMethods\n\n\n\nAttributes\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.SharpnessDIN45692OverTime.get_time_scale.html#get_time_scale","title":"get_time_scale","text":"get_time_scale\n\n\n\nSharpnessDIN45692OverTime.get_time_scale()\n\nGet the time scale.\n\nReturns\n\nnumpy.ndarray\n\nTime scale in s.\n\nReturn type\n\nndarray"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.signal_utilities.WriteWav.html#writewav","title":"WriteWav","text":"WriteWav\n\n\n\nclass ansys.sound.core.signal_utilities.WriteWav(signal=None, path_to_write='', bit_depth='float32')\n\nWrites a signal into a WAV file.\n\nClass instantiation takes the following parameters.\n\nParameters\n\nsignal\n\nField | FieldsContainer, default: python:None\n\nSignal to write to a WAV file. Signal may be single-channel (Field, or\nFieldsContainer with one Field) or multichannel (FieldsContainer with more\nthan one Field).\n\npath_to_write\n\npython:str, default: ‘’\n\nPath for the WAV file.\n\nbit_depth\n\npython:str, default: ‘float32’\n\nBit depth. Options are ‘float32’, ‘int32’, ‘int16’, and ‘int8’.\nThese mean that the samples are coded into the WAV file using 32 bits (32-bit IEEE\nFloat), 32 bits (int), 16 bits (int), or 8 bits (int), respectively.\n\nMethods\n\n\n\nAttributes\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.TonalityISOTS20065.get_decisive_frequency_over_time.html#get_decisive_frequency_over_time","title":"get_decisive_frequency_over_time","text":"get_decisive_frequency_over_time\n\n\n\nTonalityISOTS20065.get_decisive_frequency_over_time()\n\nGet the ISO/TS 20065 decisive frequency, in Hz over time.\n\nReturns\n\nnumpy.ndarray\n\nDecisive frequency, in Hz over time.\n\nReturn type\n\nndarray"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.SpectralCentroid.get_output_as_nparray.html#get_output_as_nparray","title":"get_output_as_nparray","text":"get_output_as_nparray\n\n\n\nSpectralCentroid.get_output_as_nparray()\n\nGet the spectral centroid as a NumPy array.\n\nReturns\n\nnumpy.ndarray\n\nSingleton array containing the spectral centroid in Hz.\n\nReturn type\n\nndarray"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.SharpnessOverTime.get_sharpness_over_time.html#get_sharpness_over_time","title":"get_sharpness_over_time","text":"get_sharpness_over_time\n\n\n\nSharpnessOverTime.get_sharpness_over_time()\n\nGet the sharpness over time.\n\nReturns\n\nnumpy.ndarray\n\nSharpness over time, in acum.\n\nReturn type\n\nndarray"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.xtract.XtractDenoiserParameters.plot.html#plot","title":"plot","text":"plot\n\n\n\nXtractDenoiserParameters.plot()\n\nPlot the output.\n\nThere is nothing to plot."},{"objectID":"Home","href":"api/spectrogram_processing.html#spectrogram-processing","title":"Spectrogram processing","text":"Spectrogram processing\n\nThis module provides functions to process signals in the time-frequency domain,\nsuch as the calculation of the Short-Time Fourier Transform (STFT) and Inverse STFT (ISTFT).\n\nIn the case of rotating machines, given the RPM information,\nit also allows you to isolate specific orders from a spectrogram.\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.LoudnessISO532_2.get_output_as_nparray.html#get_output_as_nparray","title":"get_output_as_nparray","text":"get_output_as_nparray\n\n\n\nLoudnessISO532_2.get_output_as_nparray()\n\nGet loudness data in a tuple of NumPy arrays.\n\nReturns\n\npython:tuple[numpy.ndarray]\n\nFirst element: binaural loudness in sone.\n\nSecond element: binaural loudness level in phon.\n\nThird element: monaural loudness in sone at each ear.\n\nFourth element: monaural loudness level in phon at each ear.\n\nFifth element: binaural specific loudness in sone/Cam, as a function of the ERB\ncenter frequency.\n\nSixth element: monaural specific loudness in sone/Cam at each ear, as a function of\nthe ERB center frequency.\n\nSeventh element: ERBn-number scale in Cam, where specific loudness is defined.\n\nReturn type\n\ntuple[ndarray]"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.spectral_processing.PowerSpectralDensity.get_PSD_dB_as_nparray.html#get_psd_db_as_nparray","title":"get_PSD_dB_as_nparray","text":"get_PSD_dB_as_nparray\n\n\n\nPowerSpectralDensity.get_PSD_dB_as_nparray(ref_value=1.0)\n\nGet the PSD in dB/Hz as a NumPy array.\n\nParameters\n\nref_value\n\npython:float, default: 1.0\n\nReference value for dB level calculation, by default 1.0. Example: ref_value = 2e-5 Pa\nfor sound pressure level (dBSPL/Hz).\n\nReturns\n\nnumpy.ndarray\n\nThe PSD in dB/Hz as a NumPy array.\n\nReturn type\n\nndarray"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.standard_levels.OneThirdOctaveLevelsFromPSD.psd.html#psd","title":"psd","text":"psd\n\n\n\nproperty OneThirdOctaveLevelsFromPSD.psd: Field\n\nInput power spectral density (PSD)."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.ToneToNoiseRatio.get_peaks_low_frequencies.html#get_peaks_low_frequencies","title":"get_peaks_low_frequencies","text":"get_peaks_low_frequencies\n\n\n\nToneToNoiseRatio.get_peaks_low_frequencies()\n\nGet the vector of the peaks’ lower-frequency limits in Hz.\n\nReturns\n\nnumpy.ndarray\n\nVector of the peaks’ lower-frequency limits in Hz.\n\nReturn type\n\nndarray"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.SharpnessOverTime.field_type.html#field_type","title":"field_type","text":"field_type\n\n\n\nproperty SharpnessOverTime.field_type: str\n\nSound field type.\n\nAvailable options are “Free” and “Diffuse”."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.SpectralCentroid.signal.html#signal","title":"signal","text":"signal\n\n\n\nproperty SpectralCentroid.signal: Field\n\nInput signal."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.sound_composer.Track.html#track","title":"Track","text":"Track\n\n\n\nclass ansys.sound.core.sound_composer.Track(name='', gain=0.0, source=None, filter=None)\n\nSound Composer’s track class.\n\nThis class creates a track for the Sound Composer. A track is made of a source (including its\nsource control) and an optional filter (which models the transfer from source to receiver).\n\nA track allows the generation of the sound corresponding to the source, optionally filtered\nwith the associated filter.\n\nClass instantiation takes the following parameters.\n\nParameters\n\nname\n\npython:str, default: “”\n\nName of the track.\n\ngain\n\npython:float, default: 0.0\n\nGain to apply to the track’s generated sound, in dB.\n\nsource\n\nSourceSpectrum, SourceBroadbandNoise, SourceBroadbandNoiseTwoParameters,             SourceHarmonics, SourceHarmonicsTwoParameters or SourceAudio, default: python:None\n\nSource of the track.\n\nfilter\n\nFilter, default: python:None\n\nFilter of the track.\n\nMethods\n\n\n\nAttributes\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.SpectralCentroid.plot.html#plot","title":"plot","text":"plot\n\n\n\nSpectralCentroid.plot()\n\nPlot the output.\n\nThere is nothing to plot."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.sound_composer.SourceControlSpectrum.duration.html#duration","title":"duration","text":"duration\n\n\n\nproperty SourceControlSpectrum.duration: float\n\nDuration of the generated sound, in seconds."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.sound_composer.SourceAudio.plot.html#plot","title":"plot","text":"plot\n\n\n\nSourceAudio.plot()\n\nPlot the generated sound."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.LoudnessISO532_2.process.html#process","title":"process","text":"process\n\n\n\nLoudnessISO532_2.process()\n\nCompute the loudness.\n\nThis method calls the appropriate DPF Sound operator to compute the loudness of the signal."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.sound_composer.SourceControlTime.control.html#control","title":"control","text":"control\n\n\n\nproperty SourceControlTime.control: Field\n\nControl profile (control parameter values over time)."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.sound_composer.SourceHarmonicsTwoParameters.get_as_generic_data_containers.html#get_as_generic_data_containers","title":"get_as_generic_data_containers","text":"get_as_generic_data_containers\n\n\n\nSourceHarmonicsTwoParameters.get_as_generic_data_containers()\n\nGet the source and source control data as generic data containers.\n\nThis method is meant to return the source data as generic data containers, in the format\nneeded to save a Sound Composer project file (.scn) with the method\nSoundComposer.save().\n\nReturns\n\npython:tuple[GenericDataContainer]\n\nSource as two generic data containers, for source and source control data, respectively.\n\nReturn type\n\ntuple[GenericDataContainer]"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.sound_power.SoundPowerLevelISO3744.get_output.html#get_output","title":"get_output","text":"get_output\n\n\n\nSoundPowerLevelISO3744.get_output()\n\nGet the sound power level data as floats and DPF fields.\n\nReturns\n\npython:tuple\n\nFirst element: unweighted sound power level (Lw) in dB.\n\nSecond element: A-weighted sound power level (Lw(A)) in dBA.\n\nThird element is a DPF field containing an array of the octave-band sound power\nlevels, in dB.\n\nFourth element is a DPF field containing an array of the one-third-octave-band\nsound power levels, in dB.\n\nReturn type\n\ntuple"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.sound_composer.Track.filter.html#filter","title":"filter","text":"filter\n\n\n\nproperty Track.filter: Filter\n\nFilter object of the track."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.LoudnessISO532_1_Stationary.get_bark_band_frequencies.html#get_bark_band_frequencies","title":"get_bark_band_frequencies","text":"get_bark_band_frequencies\n\n\n\nLoudnessISO532_1_Stationary.get_bark_band_frequencies()\n\nGet Bark band frequencies.\n\nThis method returns the frequencies corresponding to the Bark band indexes as a NumPy array.\n\nReference:\nTraunmüller, Hartmut. “Analytical Expressions for the Tonotopic Sensory Scale.” Journal of\nthe Acoustical Society of America. Vol. 88, Issue 1, 1990, pp. 97–100.\n\nReturns\n\nnumpy.ndarray\n\nArray of Bark band frequencies in Hz.\n\nReturn type\n\nndarray"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.sound_composer.SourceHarmonicsTwoParameters.get_output_as_nparray.html#get_output_as_nparray","title":"get_output_as_nparray","text":"get_output_as_nparray\n\n\n\nSourceHarmonicsTwoParameters.get_output_as_nparray()\n\nGet the generated sound as a NumPy array.\n\nReturns\n\nnumpy.ndarray\n\nGenerated sound (signal samples in Pa) as a NumPy array.\n\nReturn type\n\nndarray"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.standard_levels.OneThirdOctaveLevelsFromSignal.html#onethirdoctavelevelsfromsignal","title":"OneThirdOctaveLevelsFromSignal","text":"OneThirdOctaveLevelsFromSignal\n\n\n\nclass ansys.sound.core.standard_levels.OneThirdOctaveLevelsFromSignal(signal=None, reference_value=1.0, frequency_weighting='')\n\nCompute 1/3-octave levels from a time-domain signal input.\n\nThis class computes 1/3-octave levels from a time-domain signal.\n\nAdded in DPF server version 11.0.\n\nClass instantiation takes the following parameters.\n\nParameters\n\nsignal\n\nField, default: python:None\n\nThe time-domain signal from which the levels are computed.\n\nreference_value\n\npython:float, default: 1.0\n\nThe reference value for the levels’ computation. If the levels are computed with a PSD\nin Pa^2/Hz, the reference value should be 2e-5 (Pa).\n\nfrequency_weighting\n\npython:str, default: “”\n\nThe frequency weighting to apply to the signal before computing the levels. Available\noptions are “”, “A”, “B”,  and “C”, to get levels in dB (or dBSPL), dBA, dBB,\nand dBC, respectively.\n\nMethods\n\n\n\nAttributes\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.ToneToNoiseRatio.get_max_TNR_value.html#get_max_tnr_value","title":"get_max_TNR_value","text":"get_max_TNR_value\n\n\n\nToneToNoiseRatio.get_max_TNR_value()\n\nGet the maximum TNR value in dB.\n\nReturns\n\npython:float\n\nMaximum TNR value in dB.\n\nReturn type\n\nfloat"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.xtract.Xtract.output_remainder_signal.html#output_remainder_signal","title":"output_remainder_signal","text":"output_remainder_signal\n\n\n\nproperty Xtract.output_remainder_signal: tuple[FieldsContainer, FieldsContainer] | tuple[Field, Field]\n\nRemainder signal.\n\nRemainder signal in a tuple of DPF fields or fields containers."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.LoudnessISO532_2.get_output.html#get_output","title":"get_output","text":"get_output\n\n\n\nLoudnessISO532_2.get_output()\n\nGet the binaural and monaural loudness, loudness level, and specific loudness.\n\nReturns\n\npython:tuple\n\nFirst element (float): binaural loudness in sone.\n\nSecond element (float): binaural loudness level in phon.\n\nThird element (DPFarray): monaural loudness in sone at each ear.\n\nFourth element (DPFarray): monaural loudness level in phon at each ear.\n\nFifth element (Field): binaural specific loudness in sone/Cam, as a function of the\nERB center frequency.\n\nSixth element (FieldsContainer): monaural specific loudness in sone/Cam at each ear,\nas a function of the ERB center frequency.\n\nReturn type\n\ntuple"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.TonalityISO1996_2.plot.html#plot","title":"plot","text":"plot\n\n\n\nTonalityISO1996_2.plot()\n\nPlot the output.\n\nThere is nothing to plot."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.xtract.XtractDenoiser.plot.html#plot","title":"plot","text":"plot\n\n\n\nXtractDenoiser.plot()\n\nPlot signals.\n\nThis method plots both the denoised signal and the noise signal."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.TonalityECMA418_2.get_tonality.html#get_tonality","title":"get_tonality","text":"get_tonality\n\n\n\nTonalityECMA418_2.get_tonality()\n\nGet the ECMA-418-2 tonality, in tuHMS.\n\nReturns\n\npython:float\n\nECMA-418-2 tonality, in tuHMS.\n\nReturn type\n\nfloat"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.signal_utilities.Resample.process.html#process","title":"process","text":"process\n\n\n\nResample.process()\n\nResample the signal.\n\nThis method calls the appropriate DPF Sound operator to resample the signal."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.sound_composer.SourceAudio.get_as_generic_data_containers.html#get_as_generic_data_containers","title":"get_as_generic_data_containers","text":"get_as_generic_data_containers\n\n\n\nSourceAudio.get_as_generic_data_containers()\n\nGet the source data as generic data containers.\n\nThis method is meant to return the source data as generic data containers, in the format\nneeded to save a Sound Composer project file (.scn) with the method\nSoundComposer.save().\n\nReturns\n\npython:tuple[GenericDataContainer]\n\nSource as two generic data containers, for source and source control data, respectively.\nIn the case of SourceAudio, there is no source control data, so None is\nalways returned as the second element.\n\nReturn type\n\ntuple[GenericDataContainer]"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.sound_composer.SourceControlTime.load_from_wave_file.html#load_from_wave_file","title":"load_from_wave_file","text":"load_from_wave_file\n\n\n\nSourceControlTime.load_from_wave_file(file_str)\n\nLoad control data from a WAV file.\n\nParameters\n\nfile_str\n\npython:str\n\nPath to the WAV file."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.TonalityISO1996_2_OverTime.get_segment_details.html#get_segment_details","title":"get_segment_details","text":"get_segment_details\n\n\n\nTonalityISO1996_2_OverTime.get_segment_details(segment_index)\n\nGet the ISO 1996-2 tonality details in the specified segment of the input signal.\n\nParameters\n\nsegment_index\n\npython:int\n\nIndex of the segment.\n\nReturns\n\npython:dict[python:str, python:float]\n\nDictionary containing the ISO 1996-2 tonality details for the specified segment, namely:\n\nSegment start time in s (“segment_start_time_s”),\n\nSegment end time in s (“segment_end_time_s”),\n\nMain tone’s critical band lower frequency in Hz (“lower_critical_band_limit_Hz”),\n\nMain tone’s critical band higher frequency in Hz\n(“higher_critical_band_limit_Hz”),\n\nTotal tone level in dBA (“total_tonal_level_dBA”),\n\nTotal noise level in dBA (“total_noise_level_dBA”).\n\nReturn type\n\ndict[str, float]"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.ProminenceRatioForOrdersOverTime.get_output.html#get_output","title":"get_output","text":"get_output\n\n\n\nProminenceRatioForOrdersOverTime.get_output()\n\nGet PR data over time and its associated RPM profile.\n\nReturns\n\npython:tuple[FieldsContainer, Field]\n\nFirst element (FieldsContainer): prominence ratio data over time for the requested\norders. Each field of the fields container gives the PR over time, in dB, for each\nrequested order in order_list.\n\nSecond element (Field): RPM over time profile corresponding to the PR over time.\n\nReturn type\n\ntuple[FieldsContainer, Field]"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.sound_composer.SourceHarmonicsTwoParameters.source_control_rpm.html#source_control_rpm","title":"source_control_rpm","text":"source_control_rpm\n\n\n\nproperty SourceHarmonicsTwoParameters.source_control_rpm: SourceControlTime\n\nFirst source control (must be RPM) for the harmonics source with two parameters.\n\nContains the RPM values over time."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.ProminenceRatio.get_peaks_levels.html#get_peaks_levels","title":"get_peaks_levels","text":"get_peaks_levels\n\n\n\nProminenceRatio.get_peaks_levels()\n\nGet the vector of the peaks’ level values.\n\nReturns\n\nnumpy.ndarray\n\nVector of the peaks’ level values in dB SPL.\n\nReturn type\n\nndarray"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.LoudnessISO532_2.recording_type.html#recording_type","title":"recording_type","text":"recording_type\n\n\n\nproperty LoudnessISO532_2.recording_type: str\n\nRecording type.\n\nAvailable options are “Mic” for a single microphone and “Head” for a head and torso\nsimulator."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.Roughness.get_output_as_nparray.html#get_output_as_nparray","title":"get_output_as_nparray","text":"get_output_as_nparray\n\n\n\nRoughness.get_output_as_nparray()\n\nGet roughness data in a tuple of NumPy arrays.\n\nReturns\n\npython:tuple[numpy.ndarray]\n\nFirst element: overall roughness in asper.\n\nSecond element: specific roughness, that is, the roughness in each Bark band,\nin asper/Bark.\n\nThird element: Bark band indexes at which the specific roughness is defined,\nin Bark.\n\nFourth element: roughness over time, in asper.\n\nFifth element: time scale of the roughness over time, in s.\n\nReturn type\n\ntuple[ndarray]"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.TonalityISOTS20065.html#tonalityisots20065","title":"TonalityISOTS20065","text":"TonalityISOTS20065\n\n\n\nclass ansys.sound.core.psychoacoustics.TonalityISOTS20065(signal=None, window_length=3.0, overlap=0.0)\n\nComputes ISO/TS 20065:2022 tonality.\n\nThis class is used to compute the tonality (mean audibility) of a signal according to the\nISO/TS 20065:2022 standard.\n\nClass instantiation takes the following parameters.\n\nParameters\n\nsignal: Field, default: None\n\nSignal in Pa on which to calculate the tonality.\n\nwindow_length: float, default: 3.0\n\nLength, in s, of each slice of the signal used to calculate an average spectrum.\n\noverlap: float, default: 0.0\n\nOverlap, in %, between two successive slices of the signal.\n\nFor more information about the parameters, please refer to the Ansys Sound SAS user guide.\n\n\n\nMethods\n\n\n\nAttributes\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.standard_levels.OctaveLevelsFromSignal.get_center_frequencies.html#get_center_frequencies","title":"get_center_frequencies","text":"get_center_frequencies\n\n\n\nOctaveLevelsFromSignal.get_center_frequencies()\n\nReturn the center frequencies in Hz of the band levels as a numpy array.\n\nReturns\n\nnp.ndarray\n\nThe center frequencies in Hz of the band levels.\n\nReturn type\n\nndarray"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.standard_levels.OneThirdOctaveLevelsFromPSD.use_ansi_s1_11_1986.html#use_ansi_s1_11_1986","title":"use_ansi_s1_11_1986","text":"use_ansi_s1_11_1986\n\n\n\nproperty OneThirdOctaveLevelsFromPSD.use_ansi_s1_11_1986: bool\n\nWhether to simulate the 1/3-octave band filterbank (ANSI S1.11-1986/IEC 61260)."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.xtract.XtractDenoiser.process.html#process","title":"process","text":"process\n\n\n\nXtractDenoiser.process()\n\nApply denoising."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.signal_utilities.LoadWav.get_output.html#get_output","title":"get_output","text":"get_output\n\n\n\nLoadWav.get_output()\n\nGet the signal loaded from the WAV file as a DPF fields container.\n\nReturns\n\nFieldsContainer\n\nSignal loaded from the WAV file in a DPF fields container.\n\nReturn type\n\nFieldsContainer"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.signal_utilities.ZeroPad.get_output_as_nparray.html#get_output_as_nparray","title":"get_output_as_nparray","text":"get_output_as_nparray\n\n\n\nZeroPad.get_output_as_nparray()\n\nGet the zero-padded signal as a NumPy array.\n\nReturns\n\nnumpy.ndarray\n\nZero-padded signal in a NumPy array.\n\nReturn type\n\nndarray"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.xtract.XtractTransient.output_transient_signals.html#output_transient_signals","title":"output_transient_signals","text":"output_transient_signals\n\n\n\nproperty XtractTransient.output_transient_signals: FieldsContainer | Field\n\nOutput transient signals.\n\nOne or more transient signals as a DPF field or fields container (depending on the input)."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.TonalityDIN45681.get_tonal_adjustment_over_time.html#get_tonal_adjustment_over_time","title":"get_tonal_adjustment_over_time","text":"get_tonal_adjustment_over_time\n\n\n\nTonalityDIN45681.get_tonal_adjustment_over_time()\n\nGet the DIN 45681 tonal adjustment Kt, in dB over time.\n\nReturns\n\nnumpy.ndarray\n\nTonal adjustment Kt, in dB over time.\n\nReturn type\n\nndarray"},{"objectID":"Home","href":"examples/gallery_examples/sg_execution_times.html#computation-times","title":"Computation times","text":"Computation times\n\n10:34.921 total execution time for 11 files from examplesgallery_examples:\n\n\n\n\n\n\n\nExample\n\nTime\n\nMem (MB)\n\nsphx_glr_examples_gallery_examples_005_xtract_feature.py (005_xtract_feature.py)\n\n04:13.262\n\n0.0\n\nsphx_glr_examples_gallery_examples_004_isolate_orders.py (004_isolate_orders.py)\n\n02:07.431\n\n0.0\n\nsphx_glr_examples_gallery_examples_009_calculate_tonality_indicators.py (009_calculate_tonality_indicators.py)\n\n01:31.029\n\n0.0\n\nsphx_glr_examples_gallery_examples_010_sound_composer_load_project.py (010_sound_composer_load_project.py)\n\n00:38.647\n\n0.0\n\nsphx_glr_examples_gallery_examples_003_compute_stft.py (003_compute_stft.py)\n\n00:35.287\n\n0.0\n\nsphx_glr_examples_gallery_examples_001_initialize_server_and_deal_with_license.py (001_initialize_server_and_deal_with_license.py)\n\n00:27.883\n\n0.0\n\nsphx_glr_examples_gallery_examples_006_calculate_PR_and_TNR.py (006_calculate_PR_and_TNR.py)\n\n00:20.418\n\n0.0\n\nsphx_glr_examples_gallery_examples_011_sound_composer_create_project.py (011_sound_composer_create_project.py)\n\n00:16.166\n\n0.0\n\nsphx_glr_examples_gallery_examples_007_calculate_psychoacoustic_indicators.py (007_calculate_psychoacoustic_indicators.py)\n\n00:16.151\n\n0.0\n\nsphx_glr_examples_gallery_examples_008_calculate_levels.py (008_calculate_levels.py)\n\n00:05.560\n\n0.0\n\nsphx_glr_examples_gallery_examples_002_load_resample_amplify_write_wav_files.py (002_load_resample_amplify_write_wav_files.py)\n\n00:03.086\n\n0.0"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.xtract.Xtract.output_tonal_signal.html#output_tonal_signal","title":"output_tonal_signal","text":"output_tonal_signal\n\n\n\nproperty Xtract.output_tonal_signal: tuple[FieldsContainer, FieldsContainer] | tuple[Field, Field]\n\nTonal signal.\n\nTonal signal in a tuple of DPF fields or fields containers."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.LoudnessISO532_2.get_monaural_specific_loudness.html#get_monaural_specific_loudness","title":"get_monaural_specific_loudness","text":"get_monaural_specific_loudness\n\n\n\nLoudnessISO532_2.get_monaural_specific_loudness()\n\nGet the monaural specific loudness at each ear.\n\nReturns\n\nnumpy.ndarray\n\nMonaural specific loudness array in sone/Cam at each ear, as a function of the ERB\ncenter frequency.\n\nReturn type\n\nndarray"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.LoudnessISO532_1_TimeVarying.get_L5_phon.html#get_l5_phon","title":"get_L5_phon","text":"get_L5_phon\n\n\n\nLoudnessISO532_1_TimeVarying.get_L5_phon()\n\nGet the L5 percentile loudness level.\n\nL5 is the loudness level that is exceeded during a cumulated 5 % of the signal duration.\n\nReturns\n\npython:float\n\nL5 percentile loudness level in phon.\n\nReturn type\n\nfloat"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.sound_composer.SourceHarmonicsTwoParameters.plot_control.html#plot_control","title":"plot_control","text":"plot_control\n\n\n\nSourceHarmonicsTwoParameters.plot_control()\n\nPlot the source controls."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.sound_power.SoundPowerLevelISO3744.K2.html#k2","title":"K2","text":"K2\n\n\n\nproperty SoundPowerLevelISO3744.K2: float\n\nEnvironmental correction K2 in dB.\n\nSee annex A of ISO 3744.."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.signal_utilities.WriteWav.get_output.html#get_output","title":"get_output","text":"get_output\n\n\n\nWriteWav.get_output()\n\nGet output.\n\nThere is nothing to output.\n\nReturns\n\npython:None\n\nNone\n\nReturn type\n\nNone"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.TonalityAures.get_tonality_over_time.html#get_tonality_over_time","title":"get_tonality_over_time","text":"get_tonality_over_time\n\n\n\nTonalityAures.get_tonality_over_time()\n\nGet the Aures tonality over time.\n\nReturns\n\nnumpy.ndarray\n\nAures tonality over time, in tu (tonality unit).\n\nReturn type\n\nndarray"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.standard_levels.LevelOverTime.get_level_over_time.html#get_level_over_time","title":"get_level_over_time","text":"get_level_over_time\n\n\n\nLevelOverTime.get_level_over_time()\n\nReturn the level over time.\n\nReturns\n\nnumpy.ndarray\n\nThe level over time.\n\nReturn type\n\nndarray"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.xtract.XtractTransient.output_non_transient_signals.html#output_non_transient_signals","title":"output_non_transient_signals","text":"output_non_transient_signals\n\n\n\nproperty XtractTransient.output_non_transient_signals: FieldsContainer | Field\n\nOutput non-transient signals.\n\nOne or more non-transient signals (original signal minus transient signal) as a DPF field\nor fields container (depending on the input)."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.sound_composer.SourceHarmonicsTwoParameters.load_source_harmonics_two_parameters.html#load_source_harmonics_two_parameters","title":"load_source_harmonics_two_parameters","text":"load_source_harmonics_two_parameters\n\n\n\nSourceHarmonicsTwoParameters.load_source_harmonics_two_parameters(file)\n\nLoad the harmonics source with two parameters data from a file.\n\nParameters\n\nfile\n\npython:str\n\nPath to the harmonics source with two parameters file. Supported files have the same\ntext format (with the AnsysSound_Orders_MultipleParameters header) as supported by\nAnsys Sound SAS."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.spectrogram_processing.IsolateOrders.window_overlap.html#window_overlap","title":"window_overlap","text":"window_overlap\n\n\n\nproperty IsolateOrders.window_overlap: float\n\nWindow overlap in %."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.ToneToNoiseRatio.get_peaks_high_frequencies.html#get_peaks_high_frequencies","title":"get_peaks_high_frequencies","text":"get_peaks_high_frequencies\n\n\n\nToneToNoiseRatio.get_peaks_high_frequencies()\n\nGet the vector of the peaks’ higher-frequency limits in Hz.\n\nReturns\n\nnumpy.ndarray\n\nVector of the peaks’ higher-frequency limits in Hz.\n\nReturn type\n\nndarray"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.sound_composer.SourceHarmonics.get_output.html#get_output","title":"get_output","text":"get_output\n\n\n\nSourceHarmonics.get_output()\n\nGet the generated sound as a DPF field.\n\nReturns\n\nField\n\nGenerated sound as a DPF field.\n\nReturn type\n\nField"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.standard_levels.OctaveLevelsFromSignal.html#octavelevelsfromsignal","title":"OctaveLevelsFromSignal","text":"OctaveLevelsFromSignal\n\n\n\nclass ansys.sound.core.standard_levels.OctaveLevelsFromSignal(signal=None, reference_value=1.0, frequency_weighting='')\n\nCompute octave levels from a time-domain signal input.\n\nThis class computes octave levels from a time-domain signal.\n\nNotes\n\nFor consistency with other Ansys Sound applications, octave-band levels are derived from\none-third-octave levels, and frequency weighting is applied before the conversion. In other\nwords, each octave-band level is obtained by summing the 3 one-third-octave levels within\n(in squared units), each weighted with the frequency weighting obtained at the\none-third-octave-band center frequency. Note that the highest-frequency octave band\n(centered at 16000 Hz) is obtained by only summing the 2 highest one-third-octave bands\n(since the 30th one-third-octave band centered at 20000 Hz is not considered).\n\nAdded in DPF server version 11.0.\n\nClass instantiation takes the following parameters.\n\nParameters\n\nsignal\n\nField, default: python:None\n\nThe time-domain signal from which the levels are computed.\n\nreference_value\n\npython:float, default: 1.0\n\nThe reference value for the levels’ computation. If the levels are computed with a PSD\nin Pa^2/Hz, the reference value should be 2e-5 (Pa).\n\nfrequency_weighting\n\npython:str, default: “”\n\nThe frequency weighting to apply to the signal before computing the levels. Available\noptions are “”, “A”, “B”,  and “C”, to get levels in dB (or dBSPL), dBA, dBB,\nand dBC, respectively.\n\nMethods\n\n\n\nAttributes\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.ProminenceRatio.get_output.html#get_output","title":"get_output","text":"get_output\n\n\n\nProminenceRatio.get_output()\n\nGet PR data in a tuple as a generic data container.\n\nReturns\n\nGenericDataContainer\n\nPR data as a generic data container.\n\nReturn type\n\nGenericDataContainer"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.standard_levels.OverallLevel.reference_value.html#reference_value","title":"reference_value","text":"reference_value\n\n\n\nproperty OverallLevel.reference_value: float\n\nReference value for the level computation.\n\nIf the overall level is computed with a sound pressure signal in Pa, the reference value\nshould be 2e-5 (Pa)."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.sound_composer.SourceBroadbandNoise.get_output_as_nparray.html#get_output_as_nparray","title":"get_output_as_nparray","text":"get_output_as_nparray\n\n\n\nSourceBroadbandNoise.get_output_as_nparray()\n\nGet the generated sound as a NumPy array.\n\nReturns\n\nnumpy.ndarray\n\nGenerated sound (signal samples in Pa) as a NumPy array.\n\nReturn type\n\nndarray"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.sound_composer.SourceBroadbandNoise.get_as_generic_data_containers.html#get_as_generic_data_containers","title":"get_as_generic_data_containers","text":"get_as_generic_data_containers\n\n\n\nSourceBroadbandNoise.get_as_generic_data_containers()\n\nGet the source and source control data as generic data containers.\n\nThis method is meant to return the source data as generic data containers, in the format\nneeded to save a Sound Composer project file (.scn) with the method\nSoundComposer.save().\n\nReturns\n\npython:tuple[GenericDataContainer]\n\nSource as two generic data containers, for source and source control data, respectively.\n\nReturn type\n\ntuple[GenericDataContainer]"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.FluctuationStrength.get_fluctuation_strength.html#get_fluctuation_strength","title":"get_fluctuation_strength","text":"get_fluctuation_strength\n\n\n\nFluctuationStrength.get_fluctuation_strength()\n\nGet fluctuation strength in vacil.\n\nReturns\n\npython:float\n\nFluctuation strength in vacil.\n\nReturn type\n\nfloat"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.Sharpness.get_output_as_nparray.html#get_output_as_nparray","title":"get_output_as_nparray","text":"get_output_as_nparray\n\n\n\nSharpness.get_output_as_nparray()\n\nGet the sharpness as a NumPy array.\n\nReturns\n\nnumpy.ndarray:\n\nSingleton array containing the sharpness value in acum.\n\nReturn type\n\nndarray"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.LoudnessANSI_S3_4.get_output.html#get_output","title":"get_output","text":"get_output\n\n\n\nLoudnessANSI_S3_4.get_output()\n\nGet loudness data.\n\nReturns\n\npython:tuple[python:float]\n\nFirst element (float): loudness in sone.\n\nSecond element (float): loudness level in phon.\n\nReturn type\n\ntuple[float]"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.TonalityECMA418_2.html#tonalityecma418_2","title":"TonalityECMA418_2","text":"TonalityECMA418_2\n\n\n\nclass ansys.sound.core.psychoacoustics.TonalityECMA418_2(signal=None, field_type=None, edition=None)\n\nComputes ECMA-418-2 tonality.\n\nThis class is used to compute the tonality according to the ECMA-418-2 standard (Sottek Hearing\nModel), formerly known as ECMA-74, annex G.\n\nThe releases of DPF Sound 2026 R1 and PyAnsys Sound 0.2 introduce the 3rd edition of\nECMA-418-2, in addition to the 1st edition implemented in previous versions. Theoretically,\nthe 1st and 3rd editions of ECMA-418-2 are supposed to describe the same algorithm of\npsychoacoustic tonality calculation. However, the standard does not include any real\nverification data and its 1st edition noticeably included errors and unclear computation\ndetails open to interpretation. The 3rd edition was largely improved in that regard, and\nnow allows producing consistent results throughout distinct implementations of the standard.\nAs a consequence, this 3rd edition is strongly recommended in most cases, while the 1st\nedition should only be used when backward compatibility is required.\n\nPrior to release 0.2 of PyAnsys Sound, only the 1st edition of ECMA-418-2 was proposed.\nSimilarly, the calculation was only available in free field. Release 0.2 includes the\npossibility to use the 3rd edition of ECMA-418-2, and perform the calculation in diffuse\nfield (with either edition), using the two new attributes edition and\nfield_type. This means that older code using this class needs be updated with\nvalues assigned to these two attributes. This can be done either when instantiating the\nclass:my_tonality = TonalityECMA418_2(my_signal, my_field_type, my_edition), or later,\nby setting the field_type and edition attributes:\nmy_tonality.field_type = my_field_type and my_tonality.edition = my_edition.\n\nClass instantiation takes the following parameters.\n\nParameters\n\nsignal: Field, default: None\n\nSignal in Pa on which to calculate the tonality.\n\nfield_type: str, default: None\n\nSound field type. Available options are “Free” and “Diffuse”.\n\nedition: str, default: None\n\nEdition of the ECMA-418-2 standard to use. Available options are “1st” and “3rd”,\nwhich correspond to the 2020 and 2024 versions of the ECMA-418-2 standard, respectively.\n\nMethods\n\n\n\nAttributes\n\n"},{"objectID":"Home","href":"examples/gallery_examples/004_isolate_orders.html#isolate-orders","title":"Isolate orders","text":"Isolate orders\n\nOrders are harmonic and partial components in the sound related to the speed of a\nrotating machine. This example shows how to isolate orders in a signal containing an RPM profile.\nIt also uses additional classes from PyAnsys Sound to compute spectrograms\nand the loudness of the isolated signals."},{"objectID":"Home","href":"examples/gallery_examples/004_isolate_orders.html#set-up-analysis","title":"Isolate orders > Set up analysis","text":"Set up analysis\n\nSetting up the analysis consists of loading Ansys libraries, connecting to the\nDPF server, and retrieving the example files."},{"objectID":"Home","href":"examples/gallery_examples/004_isolate_orders.html#define-custom-stft-plot-function","title":"Isolate orders > Define custom STFT plot function","text":"Define custom STFT plot function\n\nDefine a custom function for STFT plots. It differs from the Stft.plot() method in that it\ndoes not display the phase and allows setting custom title, maximum SPL, and maximum frequency."},{"objectID":"Home","href":"examples/gallery_examples/004_isolate_orders.html#load-a-signal-with-an-rpm-profile","title":"Isolate orders > Load a signal with an RPM profile","text":"Load a signal with an RPM profile\n\nLoad a signal that has been generated with Ansys Sound Analysis\nand Specification (SAS) from a WAV file using the LoadWav class.\nThis class contains two channels:\n\nThe actual signal (an acceleration recording)\n\nThe associated RPM profile\n\n"},{"objectID":"Home","href":"examples/gallery_examples/004_isolate_orders.html#plot-spectrogram-of-the-original-signal","title":"Isolate orders > Plot spectrogram of the original signal","text":"Plot spectrogram of the original signal\n\nPlot the spectrogram of the original signal.\n\n"},{"objectID":"Home","href":"examples/gallery_examples/004_isolate_orders.html#isolate-orders","title":"Isolate orders","text":"Isolate orders\n\nIsolate orders 2, 4, and 6 with the IsolateOrders class.\n\n"},{"objectID":"Home","href":"examples/gallery_examples/004_isolate_orders.html#isolate-different-orders","title":"Isolate orders > Isolate different orders","text":"Isolate different orders\n\nChange FFT size, order indexes, and window type. Then re-isolate the orders.\n\n"},{"objectID":"Home","href":"examples/gallery_examples/004_isolate_orders.html#work-with-the-isolated-signal","title":"Isolate orders > Work with the isolated signal","text":"Work with the isolated signal\n\nPlot the signal containing the isolated orders and compute its loudness.\n\n"},{"objectID":"Home","href":"examples/gallery_examples/004_isolate_orders.html#isolate-orders-of-several-signals-in-a-loop","title":"Isolate orders > Isolate orders of several signals in a loop","text":"Isolate orders of several signals in a loop\n\nLoop over a list of given signals and write them as a WAV file.\n\nTotal running time of the script: (2 minutes 7.431 seconds)\n\n\n\nDownload Jupyter notebook: 004_isolate_orders.ipynb\n\nDownload Python source code: 004_isolate_orders.py\n\nDownload zipped: 004_isolate_orders.zip\n\nGallery generated by Sphinx-Gallery"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.SharpnessDIN45692OverTime.html#sharpnessdin45692overtime","title":"SharpnessDIN45692OverTime","text":"SharpnessDIN45692OverTime\n\n\n\nclass ansys.sound.core.psychoacoustics.SharpnessDIN45692OverTime(signal=None, field_type='Free')\n\nComputes the sharpness of a signal according to the DIN 45692 standard, over time.\n\nThe standard DIN 45692 does not include a method for calculation over time. The computation\nof the present indicator is thus not entirely covered by the standard. The method used here\napplies the sharpness calculation described in the standard DIN45692, using, at each time\nstep, the specific loudness calculated according the loudness model for time-varying sounds\nin the standard ISO 532-1. It is the loudness model of the class\nLoudnessISO532_1_TimeVarying.\n\nClass instantiation takes the following parameters.\n\nParameters\n\nsignal\n\nField, default: python:None\n\nSignal in Pa on which to compute sharpness over time.\n\nfield_type\n\npython:str, default: “Free”\n\nSound field type. Available options are “Free” and “Diffuse”.\n\nMethods\n\n\n\nAttributes\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.sound_composer.SourceControlTime.html#sourcecontroltime","title":"SourceControlTime","text":"SourceControlTime\n\n\n\nclass ansys.sound.core.sound_composer.SourceControlTime(file_str='')\n\nSound Composer’s time source control class.\n\nThis class stores the source control (that is, the control parameter values over time) used by\nthe Sound Composer to generate a sound from sources of types broadband noise and harmonics\n(with one or two control parameters).\n\nClass instantiation takes the following parameters.\n\nParameters\n\nfile_str\n\npython:str, default: “”\n\nPath to the control data file. Supported files are WAV files and and text files with\nthe header AnsysSound_SoundSamples.\n\nMethods\n\n\n\nAttributes\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.xtract.XtractTransient.plot.html#plot","title":"plot","text":"plot\n\n\n\nXtractTransient.plot()\n\nPlot signals.\n\nThis method plots the transient signal and non-transient signal."},{"objectID":"Home","href":"api/xtract.html#xtract","title":"Xtract","text":"Xtract\n\nXtract is a module designed for denoising and extracting components from time-domain signals.\n\nThe module, based on 3 extraction algorithms, lets you split a time-domain signal into 4 components:\nnoise, tones, transients, and the remaining part (that is, everything that is not detected as\neither of the other 3 components).\n\nThe algorithm parameters can be set automatically or manually.\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.sound_composer.SourceHarmonicsTwoParameters.set_from_generic_data_containers.html#set_from_generic_data_containers","title":"set_from_generic_data_containers","text":"set_from_generic_data_containers\n\n\n\nSourceHarmonicsTwoParameters.set_from_generic_data_containers(source_data, source_control_data)\n\nSet the source and source control data from generic data containers.\n\nThis method is meant to set the source data from generic data containers obtained when\nloading a Sound Composer project file (.scn) with the method SoundComposer.load().\n\nParameters\n\nsource_data\n\nGenericDataContainer\n\nSource data as a DPF generic data container.\n\nsource_control_data\n\nGenericDataContainer\n\nSource control data as a DPF generic data container."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.LoudnessISO532_1_Stationary.plot.html#plot","title":"plot","text":"plot\n\n\n\nLoudnessISO532_1_Stationary.plot()\n\nPlot the specific loudness.\n\nThis method displays the specific loudness in sone/Bark as a function of the Bark band\nindex."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.ProminenceRatio.get_PR_values.html#get_pr_values","title":"get_PR_values","text":"get_PR_values\n\n\n\nProminenceRatio.get_PR_values()\n\nGet the vector of the peaks’ PR values.\n\nReturns\n\nnumpy.ndarray\n\nVector of the peaks’ PR values in dB.\n\nReturn type\n\nndarray"},{"objectID":"Home","href":"api/standard_levels.html#standard-levels","title":"Standard levels","text":"Standard levels\n\nThis module provides functions to calculate standard levels from time-domain signals.\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.sound_composer.SourceAudio.source_audio_data.html#source_audio_data","title":"source_audio_data","text":"source_audio_data\n\n\n\nproperty SourceAudio.source_audio_data: Field\n\nSource data of the audio source.\n\nThe audio source data consists of the audio samples over time, in Pa."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.SharpnessDIN45692.get_sharpness.html#get_sharpness","title":"get_sharpness","text":"get_sharpness\n\n\n\nSharpnessDIN45692.get_sharpness()\n\nGet the DIN 45692 sharpness.\n\nReturns\n\npython:float\n\nSharpness value in acum.\n\nReturn type\n\nfloat"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.xtract.Xtract.parameters_denoiser.html#parameters_denoiser","title":"parameters_denoiser","text":"parameters_denoiser\n\n\n\nproperty Xtract.parameters_denoiser: XtractDenoiserParameters\n\nParameters of the denoiser step.\n\nStructure that contains the parameters of the denoising step:\n\nPower spectral density of the noise as a DPF field."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.TonalityAures.plot.html#plot","title":"plot","text":"plot\n\n\n\nTonalityAures.plot()\n\nPlot the tonality over time."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.standard_levels.OctaveLevelsFromPSD.reference_value.html#reference_value","title":"reference_value","text":"reference_value\n\n\n\nproperty OctaveLevelsFromPSD.reference_value: float\n\nReference value for the levels’ computation.\n\nIf the levels are computed with a PSD in Pa^2/Hz, the reference value should be 2e-5 (Pa)."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.standard_levels.LevelOverTime.signal.html#signal","title":"signal","text":"signal\n\n\n\nproperty LevelOverTime.signal: Field\n\nInput signal."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.LoudnessISO532_1_TimeVarying.get_N5_sone.html#get_n5_sone","title":"get_N5_sone","text":"get_N5_sone\n\n\n\nLoudnessISO532_1_TimeVarying.get_N5_sone()\n\nGet the N5 percentile loudness.\n\nN5 is the loudness that is exceeded during a cumulated 5 % of the signal duration.\n\nReturns\n\npython:float\n\nN5 percentile loudness in sone.\n\nReturn type\n\nfloat"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.TonalityDIN45681.html#tonalitydin45681","title":"TonalityDIN45681","text":"TonalityDIN45681\n\n\n\nclass ansys.sound.core.psychoacoustics.TonalityDIN45681(signal=None, window_length=3.0, overlap=0.0)\n\nComputes DIN 45681 tonality.\n\nThis class is used to compute the tonality (mean difference) and tonal adjustment of\na signal according to the DIN 45681 standard.\n\nClass instantiation takes the following parameters.\n\nParameters\n\nsignal: Field, default: None\n\nSignal in Pa on which to calculate the tonality.\n\nwindow_length: float, default: 3.0\n\nLength, in s, of each slice of the signal used to calculate an average spectrum.\n\noverlap: float, default: 0.0\n\nOverlap, in %, between two successive slices of the signal.\n\nFor more information about the parameters, please refer to the Ansys Sound SAS user guide.\n\n\n\nMethods\n\n\n\nAttributes\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.xtract.XtractTonalParameters.plot.html#plot","title":"plot","text":"plot\n\n\n\nXtractTonalParameters.plot()\n\nPlot the output.\n\nThere is nothing to plot."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.sound_power.SoundPowerLevelISO3744.set_C1_C2_from_meteo_parameters.html#set_c1_c2_from_meteo_parameters","title":"set_C1_C2_from_meteo_parameters","text":"set_C1_C2_from_meteo_parameters\n\n\n\nSoundPowerLevelISO3744.set_C1_C2_from_meteo_parameters(pressure=101.325, temperature=23.0)\n\nSet C1 and C2 from static pressure and temperature.\n\nSets C1 and C2 following Annex G of ISO 3744, based on specified static pressure and\ntemperature.\n\nParameters\n\npressure\n\npython:float, default: 101.325\n\nStatic pressure in kPa.\n\ntemperature\n\npython:float, default: 23.0\n\nTemperature in °C.\n\nReturns\n\npython:tuple[python:float]\n\nFirst element: correction C1 in dB.\nSecond element: correction C2 in dB.\n\nReturn type\n\ntuple"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.ProminenceRatioForOrdersOverTime.get_output_as_nparray.html#get_output_as_nparray","title":"get_output_as_nparray","text":"get_output_as_nparray\n\n\n\nProminenceRatioForOrdersOverTime.get_output_as_nparray()\n\nGet PR data in a tuple of NumPy arrays.\n\nReturns\n\npython:tuple\n\nFirst element: prominence ratio data over time for the requested orders. Each\ncolumn corresponds to the PR over time, in dB, for each requested order in\norder_list.\n\nSecond element: time scale associated with the output prominence ratios.\n\nThird element: RPM over time profile corresponding to the TNR over time.\n\nReturn type\n\ntuple[ndarray]"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.TonalityAures.get_output.html#get_output","title":"get_output","text":"get_output\n\n\n\nTonalityAures.get_output()\n\nGet Aures’ tonality data.\n\nReturns\n\npython:tuple[float,Field,Field,Field]\n\nFirst element (float): overall tonality value, in tu (tonality unit).\n\nSecond element (Field): tonality over time, in tu.\n\nThird element (Field): tonal component weighting wT over time (between 0.0 and\n1.0, no unit).\n\nFourth element (Field): relative loudness weighting wGr over time (between 0.0\nand 1.0, no unit).\n\nReturn type\n\ntuple[float, Field, Field, Field]"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.sound_composer.SourceSpectrum.plot_control.html#plot_control","title":"plot_control","text":"plot_control\n\n\n\nSourceSpectrum.plot_control()\n\nPlot the source control(s) in a figure."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.signal_utilities.ZeroPad.plot.html#plot","title":"plot","text":"plot\n\n\n\nZeroPad.plot()\n\nPlot the resulting signals in a single figure."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.LoudnessISO532_1_Stationary.get_loudness_level_phon.html#get_loudness_level_phon","title":"get_loudness_level_phon","text":"get_loudness_level_phon\n\n\n\nLoudnessISO532_1_Stationary.get_loudness_level_phon()\n\nGet the loudness level in phon.\n\nReturns\n\npython:float\n\nLoudness level in phon.\n\nReturn type\n\nfloat"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.standard_levels.LevelOverTime.get_time_scale.html#get_time_scale","title":"get_time_scale","text":"get_time_scale\n\n\n\nLevelOverTime.get_time_scale()\n\nReturn the time scale.\n\nReturns\n\nnumpy.ndarray\n\nThe time scale in s.\n\nReturn type\n\nndarray"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.sound_composer.SourceBroadbandNoiseTwoParameters.get_output_as_nparray.html#get_output_as_nparray","title":"get_output_as_nparray","text":"get_output_as_nparray\n\n\n\nSourceBroadbandNoiseTwoParameters.get_output_as_nparray()\n\nGet the generated sound as a NumPy array.\n\nReturns\n\nnumpy.ndarray\n\nGenerated sound (signal samples in Pa) as a NumPy array.\n\nReturn type\n\nndarray"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.signal_processing.Filter.get_sampling_frequency.html#get_sampling_frequency","title":"get_sampling_frequency","text":"get_sampling_frequency\n\n\n\nFilter.get_sampling_frequency()\n\nGet the filter sampling frequency.\n\nReturns\n\npython:float\n\nSampling frequency, in Hz, associated with the filter coefficients.\n\nReturn type\n\nfloat"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.Roughness.signal.html#signal","title":"signal","text":"signal\n\n\n\nproperty Roughness.signal: Field\n\nInput signal in Pa."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.TonalityISOTS20065.get_time_scale.html#get_time_scale","title":"get_time_scale","text":"get_time_scale\n\n\n\nTonalityISOTS20065.get_time_scale()\n\nGet the ISO/TS 20065 time scale, in s.\n\nReturns\n\nnumpy.ndarray\n\nTime array, in seconds, of the ISO/TS 20065 parameters over time\n(decisive audibility and uncertainty).\n\nReturn type\n\nndarray"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.xtract.XtractTransient.html#xtracttransient","title":"XtractTransient","text":"XtractTransient\n\n\n\nclass ansys.sound.core.xtract.XtractTransient(input_signal=None, input_parameters=None)\n\nExtracts the transient components of a signal using the Xtract algorithm.\n\nClass instantiation takes the following parameters.\n\nParameters\n\ninput_signal\n\nFieldsContainer | Field, default: python:None\n\nOne or more signals to extract transient components on\nas a DPF fields container or fields. When inputting a fields container,\neach signal (each field of the fields container) is processed individually.\n\ninput_parameters\n\nXtractTransientParameters, default: python:None\n\nStructure that contains the parameters of the algorithm:\n\nLower threshold (float), which is between 0 and 100.\n\nUpper threshold (float), which is between 0 and 100.\n\nThis structure is of the XtractTransientParameters type. For more information,\nsee this class.\n\nMethods\n\n\n\nAttributes\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.sound_composer.SourceBroadbandNoiseTwoParameters.plot.html#plot","title":"plot","text":"plot\n\n\n\nSourceBroadbandNoiseTwoParameters.plot()\n\nPlot the resulting signal."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.sound_composer.SourceBroadbandNoise.source_control.html#source_control","title":"source_control","text":"source_control\n\n\n\nproperty SourceBroadbandNoise.source_control: SourceControlTime\n\nSource control of the broadband noise source.\n\nContains the control parameter values over time."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.xtract.XtractDenoiser.output_noise_signals.html#output_noise_signals","title":"output_noise_signals","text":"output_noise_signals\n\n\n\nproperty XtractDenoiser.output_noise_signals: FieldsContainer | Field\n\nOutput noise signals.\n\nOne or more noise signals as a DPF field or fields container (depending on the input).\nThe noise signal is the original signal minus the denoised signal."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.standard_levels.OneThirdOctaveLevelsFromPSD.html#onethirdoctavelevelsfrompsd","title":"OneThirdOctaveLevelsFromPSD","text":"OneThirdOctaveLevelsFromPSD\n\n\n\nclass ansys.sound.core.standard_levels.OneThirdOctaveLevelsFromPSD(psd=None, use_ansi_s1_11_1986=False, reference_value=1.0, frequency_weighting='')\n\nCompute 1/3-octave levels from a power spectral density (PSD) input.\n\nThis class computes 1/3-octave levels from a PSD.\n\nAdded in DPF server version 11.0.\n\nClass instantiation takes the following parameters.\n\nParameters\n\npsd\n\nField, default: python:None\n\nThe power spectral density (PSD) from which the levels are computed.\n\nuse_ansi_s1_11_1986\n\nbool, default: python:False\n\nWhether to simulate the 1/3-octave filterbank as defined in ANSI S1.11-1986 and\nIEC 61260 standards.\n\nreference_value\n\npython:float, default: 1.0\n\nThe reference value for the levels’ computation. If the levels are computed with a PSD\nin Pa^2/Hz, the reference value should be 2e-5 (Pa).\n\nfrequency_weighting\n\npython:str, default: “”\n\nThe frequency weighting to apply to the signal before computing the levels. Available\noptions are “”, “A”, “B”,  and “C”, to get levels in dB (or dBSPL), dBA, dBB,\nand dBC, respectively.\n\nMethods\n\n\n\nAttributes\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.TonalityECMA418_2.get_tonality_over_time.html#get_tonality_over_time","title":"get_tonality_over_time","text":"get_tonality_over_time\n\n\n\nTonalityECMA418_2.get_tonality_over_time()\n\nGet the ECMA-418-2 tonality over time, in tuHMS.\n\nReturns\n\nnumpy.ndarray\n\nECMA-418-2 tonality over time, in tuHMS.\n\nReturn type\n\nndarray"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.ProminenceRatioForOrdersOverTime.get_time_scale.html#get_time_scale","title":"get_time_scale","text":"get_time_scale\n\n\n\nProminenceRatioForOrdersOverTime.get_time_scale()\n\nGet the time scale corresponding to the PR array over time.\n\nReturns\n\nnumpy.ndarray\n\nTime scale of the PR calculation, in s.\n\nReturn type\n\nndarray | None"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.xtract.XtractDenoiserParameters.create_noise_psd_from_noise_samples.html#create_noise_psd_from_noise_samples","title":"create_noise_psd_from_noise_samples","text":"create_noise_psd_from_noise_samples\n\n\n\nXtractDenoiserParameters.create_noise_psd_from_noise_samples(signal, sampling_frequency, window_length=50)\n\nCreate a power spectral density (PSD) of noise from specific noise samples.\n\nParameters\n\nsignal\n\nField\n\nNoise signal.\n\nsampling_frequency\n\npython:float, optional\n\nSampling frequency in Hz of the signal to denoise,\nwhich can be different from the signal used for creating the noise profile.\nThe default is the sampling frequency of the noise signal.\n\nwindow_length\n\npython:int, default: 50\n\nWindow length for the noise level estimation in milliseconds (ms).\n\nReturns\n\nField\n\nPSD of noise in unit^2/Hz (Pa^2/Hz for example).\n\nReturn type\n\nField"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.FluctuationStrength.get_specific_fluctuation_strength.html#get_specific_fluctuation_strength","title":"get_specific_fluctuation_strength","text":"get_specific_fluctuation_strength\n\n\n\nFluctuationStrength.get_specific_fluctuation_strength()\n\nGet the specific fluctuation strength.\n\nReturns\n\nnumpy.ndarray\n\nSpecific fluctuation strength, that is, the fluctuation strength in each Bark band, in\nvacil.\n\nReturn type\n\nndarray"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.signal_utilities.SumSignals.get_output_as_nparray.html#get_output_as_nparray","title":"get_output_as_nparray","text":"get_output_as_nparray\n\n\n\nSumSignals.get_output_as_nparray()\n\nGet the signal with a gain as a NumPy array.\n\nReturns\n\nnumpy.ndarray\n\nSummed signal in a NumPy array.\n\nReturn type\n\nndarray"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.Roughness.get_bark_band_indexes.html#get_bark_band_indexes","title":"get_bark_band_indexes","text":"get_bark_band_indexes\n\n\n\nRoughness.get_bark_band_indexes()\n\nGet Bark band indexes.\n\nThis method gets the Bark band indexes used for the roughness calculation as a NumPy array.\n\nReturns\n\nnumpy.ndarray\n\nArray of Bark band indexes.\n\nReturn type\n\nndarray"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.standard_levels.OverallLevel.get_level.html#get_level","title":"get_level","text":"get_level\n\n\n\nOverallLevel.get_level()\n\nReturn the overall level.\n\nReturns\n\npython:float\n\nThe overall level value.\n\nReturn type\n\nfloat"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.SharpnessOverTime.get_max_sharpness.html#get_max_sharpness","title":"get_max_sharpness","text":"get_max_sharpness\n\n\n\nSharpnessOverTime.get_max_sharpness()\n\nGet the maximum value of the sharpness over time.\n\nReturns\n\npython:float\n\nMaximum value of the sharpness over time, in acum.\n\nReturn type\n\nfloat"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.LoudnessISO532_1_Stationary.get_output_as_nparray.html#get_output_as_nparray","title":"get_output_as_nparray","text":"get_output_as_nparray\n\n\n\nLoudnessISO532_1_Stationary.get_output_as_nparray()\n\nGet loudness data in a tuple of NumPy arrays.\n\nReturns\n\npython:tuple[numpy.ndarray]\n\nFirst element: loudness in sone.\n\nSecond element: loudness level in phon.\n\nThird element: specific loudness in sone/Bark, as a function of the Bark band index.\n\nFourth element: Bark band indexes, in Bark.\n\nReturn type\n\ntuple[ndarray]"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.xtract.XtractTransientParameters.process.html#process","title":"process","text":"process\n\n\n\nXtractTransientParameters.process()\n\nProcess inputs.\n\nThere is nothing to process."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.sound_composer.SourceHarmonicsTwoParameters.is_source_control_valid.html#is_source_control_valid","title":"is_source_control_valid","text":"is_source_control_valid\n\n\n\nSourceHarmonicsTwoParameters.is_source_control_valid()\n\nSource control verification function.\n\nChecks if both source controls are set.\n\nReturns\n\nbool\n\nTrue if both source controls are set.\n\nReturn type\n\nbool"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.spectral_processing.PowerSpectralDensity.get_PSD_squared_linear_as_nparray.html#get_psd_squared_linear_as_nparray","title":"get_PSD_squared_linear_as_nparray","text":"get_PSD_squared_linear_as_nparray\n\n\n\nPowerSpectralDensity.get_PSD_squared_linear_as_nparray()\n\nGet the PSD in squared linear unit, as NumPy arrays.\n\nReturns\n\npython:tuple[numpy.ndarray]\n\nFirst element: PSD amplitudes in squared linear unit.\n\nSecond element: corresponding frequencies in Hz.\n\nReturn type\n\ntuple[ndarray]"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.standard_levels.OneThirdOctaveLevelsFromPSD.plot.html#plot","title":"plot","text":"plot\n\n\n\nOneThirdOctaveLevelsFromPSD.plot()\n\nPlot the 1/3-octave-band levels."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.xtract.XtractTonalParameters.intertonal_gap.html#intertonal_gap","title":"intertonal_gap","text":"intertonal_gap\n\n\n\nproperty XtractTonalParameters.intertonal_gap: float\n\nIntertonal gap in Hz.\n\nMinimum gap in Hz between two tonal components. Values are between 10 and 200 Hz."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.LoudnessANSI_S3_4.signal.html#signal","title":"signal","text":"signal\n\n\n\nproperty LoudnessANSI_S3_4.signal: Field\n\nInput signal in Pa."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.sound_composer.Track.process.html#process","title":"process","text":"process\n\n\n\nTrack.process(sampling_frequency=44100.0)\n\nGenerate the signal of the track, using the source and filter currently set.\n\nParameters\n\nsampling_frequency\n\npython:float, default: 44100.0\n\nSampling frequency of the generated sound in Hz."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.FluctuationStrength.plot.html#plot","title":"plot","text":"plot\n\n\n\nFluctuationStrength.plot()\n\nPlot the specific fluctuation strength.\n\nThis method displays the specific fluctuation strength, in vacil, as a function of the Bark\nband index."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.ToneToNoiseRatioForOrdersOverTime.html#tonetonoiseratioforordersovertime","title":"ToneToNoiseRatioForOrdersOverTime","text":"ToneToNoiseRatioForOrdersOverTime\n\n\n\nclass ansys.sound.core.psychoacoustics.ToneToNoiseRatioForOrdersOverTime(signal=None, profile=None, order_list=None)\n\nComputes the ECMA 418-1/ISO 7779 tone-to-noise ratio (TNR) for specific orders over time.\n\nThis class computes the TNR, as defined in ECMA 418-1 and ISO 7779 standards, following\nspecific orders over time in a given time-domain signal and its RPM signal.\n\nClass instantiation takes the following parameters.\n\nParameters\n\nsignal\n\nField, default: python:None\n\nSignal on which to compute tone-to-noise ratio.\n\nprofile\n\nField, default: python:None\n\nRPM profile corresponding to the input signal.\n\norder_list\n\npython:list, default: python:None\n\nList of the order numbers, as floats, on which to compute the tone-to-noise ratio.\n\nMethods\n\n\n\nAttributes\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.sound_composer.SourceBroadbandNoise.process.html#process","title":"process","text":"process\n\n\n\nSourceBroadbandNoise.process(sampling_frequency=44100.0)\n\nGenerate the sound of the broadband noise source.\n\nThis method generates the sound of the broadband noise source, using the current broadband\nnoise data and source control.\n\nParameters\n\nsampling_frequency\n\npython:float, default: 44100.0\n\nSampling frequency of the generated sound in Hz."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.xtract.XtractTonalParameters.get_output.html#get_output","title":"get_output","text":"get_output\n\n\n\nXtractTonalParameters.get_output()\n\nGet output.\n\nThere is nothing to output.\n\nReturns\n\npython:None\n\nNone\n\nReturn type\n\nNone"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.spectrogram_processing.Istft.process.html#process","title":"process","text":"process\n\n\n\nIstft.process()\n\nCompute the ISTFT.\n\nThis method calls the appropriate DPF Sound operator to compute the\ninverse STFT of the STFT."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.spectrogram_processing.IsolateOrders.width_selection.html#width_selection","title":"width_selection","text":"width_selection\n\n\n\nproperty IsolateOrders.width_selection: int\n\nWidth in Hz of each individual order selection.\n\nResults may vary depending on fft_size value."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.Sharpness.field_type.html#field_type","title":"field_type","text":"field_type\n\n\n\nproperty Sharpness.field_type: str\n\nSound field type.\n\nAvailable options are “Free” and “Diffuse”."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.LoudnessISO532_1_TimeVarying.get_loudness_level_phon_vs_time.html#get_loudness_level_phon_vs_time","title":"get_loudness_level_phon_vs_time","text":"get_loudness_level_phon_vs_time\n\n\n\nLoudnessISO532_1_TimeVarying.get_loudness_level_phon_vs_time()\n\nGet the instantaneous loudness level in phon.\n\nReturns\n\nnumpy.ndarray\n\nInstantaneous loudness level in phon.\n\nReturn type\n\nndarray"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.xtract.XtractTransient.process.html#process","title":"process","text":"process\n\n\n\nXtractTransient.process()\n\nProcess the transient extraction.\n\nThis method extracts the transient components of the signals using the Xtract algorithm."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.ProminenceRatioForOrdersOverTime.get_order_prominence_ratio_over_time.html#get_order_prominence_ratio_over_time","title":"get_order_prominence_ratio_over_time","text":"get_order_prominence_ratio_over_time\n\n\n\nProminenceRatioForOrdersOverTime.get_order_prominence_ratio_over_time(order_index)\n\nGet the prominence ratio (PR) over time for a specific order.\n\nParameters\n\norder_index\n\npython:int\n\nIndex of the order for which to get the prominence ratio over time.\nThe index refers to the list of orders stored in order_list.\n\nReturns\n\nnumpy.ndarray\n\nProminence ratio over time, in dB, for the specified order.\n\nReturn type\n\nndarray"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.signal_utilities.SumSignals.plot.html#plot","title":"plot","text":"plot\n\n\n\nSumSignals.plot()\n\nPlot the resulting signals in a single figure."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.LoudnessISO532_1_TimeVarying.get_output.html#get_output","title":"get_output","text":"get_output\n\n\n\nLoudnessISO532_1_TimeVarying.get_output()\n\nGet time-varying loudness data.\n\nReturns\n\npython:tuple\n\nFirst element (Field): instantaneous loudness in sone.\n\nSecond element (float): N5 indicator in sone. N5 is the loudness that is exceeded\nduring a cumulated 5 % of the signal duration.\n\nThird element (float): the N10 indicator in sone. N10 is the loudness that is\nexceeded during a cumulated 10 % of the signal duration.\n\nFourth element (Field): instantaneous loudness level in phon.\n\nFifth element (float): L5 indicator in phon. L5 is the loudness level that is\nexceeded during a cumulated 5 % of the signal duration.\n\nSixth element (float): L10 indicator in phon. L10 is the loudness level that is\nexceeded during a cumulated 10 % of the signal duration.\n\nReturn type\n\ntuple"},{"objectID":"Contribute","href":"contribute.html#contribute","title":"Contribute","text":"Contribute\n\nOverall guidance on contributing to a PyAnsys library appears in the\nContributing topic\nin the PyAnsys developer’s guide. Ensure that you are thoroughly familiar\nwith this guide before attempting to contribute to PyAnsys Sound.\n\nThe following contribution information is specific to PyAnsys Sound."},{"objectID":"Contribute","href":"contribute.html#install-in-development-mode","title":"Contribute > Install in development mode","text":"Install in development mode\n\nInstalling PyAnsys Sound in development mode allows you to modify and enhance\nthe source.\n\nFor information on prerequisites, see prerequisistes.\n\nPerform these steps to install PyAnsys Sound in developer mode:\n\nClone the repository:\n\nCreate a fresh-clean Python virtual environment\nand activate it.\n\nInstall dependencies:\n\nInstall additional requirements for tests and documentation (if needed):"},{"objectID":"Contribute","href":"contribute.html#test","title":"Contribute > Test","text":"Test\n\nThere are different ways to run the PyAnsys Sound tests, depending on how the DPF\nserver is started.\n\nRun tests with a Docker container.\n\nFor information on getting and running the DPF Server Docker image, see DPF Server Docker image.\nRun the tests with this command:\n\nRun tests with a Docker container from GitHub with these commands:"},{"objectID":"Contribute","href":"contribute.html#run-style-checks","title":"Contribute > Run style checks","text":"Run style checks\n\nThe style checks use pre-commit, which can be run from a Powershell terminal:\n\nYou can also install this as a Git pre-commit hook by running this command:"},{"objectID":"Contribute","href":"contribute.html#build-documentation","title":"Contribute > Build documentation","text":"Build documentation\n\nBefore you can build the documentation, you must get and run the DPF Server Docker image.\nFor more information, see DPF Server Docker image.\n\nOn Windows, build the documentation with this command:\n\nYou can use the latest container from GitHub to build it with the following command:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.sound_composer.SourceSpectrum.is_source_control_valid.html#is_source_control_valid","title":"is_source_control_valid","text":"is_source_control_valid\n\n\n\nSourceSpectrum.is_source_control_valid()\n\nSource control verification function.\n\nCheck if the source control is set and its duration is strictly positive.\n\nReturns\n\nbool\n\nTrue if the source control is set and its duration is strictly positive, False\notherwise.\n\nReturn type\n\nbool"},{"objectID":"Home","href":"api/psychoacoustics.html#psychoacoustics","title":"Psychoacoustics","text":"Psychoacoustics\n\nThis module provides functions to compute psychoacoustic indicators,\nwhich are useful to study and assess sound quality.\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.spectrogram_processing.IsolateOrders.get_output_as_nparray.html#get_output_as_nparray","title":"get_output_as_nparray","text":"get_output_as_nparray\n\n\n\nIsolateOrders.get_output_as_nparray()\n\nGet the temporal signal of the isolated orders as a NumPy array.\n\nReturns\n\nnumpy.ndarray\n\nTemporal signal of the isolated orders in a NumPy array.\n\nReturn type\n\nndarray"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.TonalityAures.signal.html#signal","title":"signal","text":"signal\n\n\n\nproperty TonalityAures.signal: Field\n\nInput signal in Pa."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.standard_levels.LevelOverTime.plot.html#plot","title":"plot","text":"plot\n\n\n\nLevelOverTime.plot()\n\nPlot the level over time."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.sound_composer.SourceHarmonics.is_source_control_valid.html#is_source_control_valid","title":"is_source_control_valid","text":"is_source_control_valid\n\n\n\nSourceHarmonics.is_source_control_valid()\n\nSource control verification function.\n\nCheck if the source control is valid, that is, if the source control is set and contains at\nleast one control value.\n\nReturns\n\nbool\n\nTrue if the source control is valid.\n\nReturn type\n\nbool"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.standard_levels.OverallLevel.html#overalllevel","title":"OverallLevel","text":"OverallLevel\n\n\n\nclass ansys.sound.core.standard_levels.OverallLevel(signal=None, scale='dB', reference_value=1.0, frequency_weighting='')\n\nCompute the overall level.\n\nThis class computes the overall level of a signal.\n\nClass instantiation takes the following parameters.\n\nParameters\n\nsignal\n\nField, default: python:None\n\nThe signal to process.\n\nscale\n\npython:str, default: “dB”\n\nThe scale type of the output level. Available options are “dB” and “RMS”.\n\nreference_value\n\npython:float, default: 1.0\n\nThe reference value for the level computation. If the overall level is computed with a\nsignal in Pa, the reference value should be 2e-5 (Pa).\n\nfrequency_weighting\n\npython:str, default: “”\n\nThe frequency weighting to apply to the signal before computing the level. Available\noptions are “”, “A”, “B”,  and “C”, respectively to get level in dB (or dBSPL),\ndBA, dBB, and dBC. Note that the frequency weighting is only applied if the attribute\nscale is set to “dB”.\n\nMethods\n\n\n\nAttributes\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.signal_utilities.ApplyGain.get_output.html#get_output","title":"get_output","text":"get_output\n\n\n\nApplyGain.get_output()\n\nGet the signal with a gain as a DPF fields container.\n\nReturns\n\nFieldsContainer\n\nSignal with an applied gain as a DPF fields container.\n\nReturn type\n\nFieldsContainer | Field"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.SharpnessDIN45692OverTime.get_sharpness_over_time.html#get_sharpness_over_time","title":"get_sharpness_over_time","text":"get_sharpness_over_time\n\n\n\nSharpnessDIN45692OverTime.get_sharpness_over_time()\n\nGet the DIN 45692 sharpness, over time.\n\nReturns\n\nnumpy.ndarray\n\nSharpness over time, in acum.\n\nReturn type\n\nndarray"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.spectral_processing.PowerSpectralDensity.html#powerspectraldensity","title":"PowerSpectralDensity","text":"PowerSpectralDensity\n\n\n\nclass ansys.sound.core.spectral_processing.PowerSpectralDensity(input_signal, fft_size=2048, window_type='HANN', window_length=2048, overlap=0.25)\n\nPower Spectral Density (PSD) class.\n\nThis class allows the calculation of Power Spectral Density (PSD) for a given signal,\nusing Welch’s method\n\nClass instantiation takes the following parameters.\n\nParameters\n\nsignal\n\nField\n\nInput signal on which to compute the PSD.\n\nfft_size\n\npython:int, default: 2048\n\nNumber of FFT points to use for the PSD estimate. Must be a power of 2.\n\nwindow_type\n\npython:str, default: ‘HANN’\n\nWindow type used for the PSD computation. Options are 'TRIANGULAR', 'BLACKMAN',\n'HAMMING', 'HANN', 'GAUSS', 'FLATTOP', and 'RECTANGULAR'.\n\nwindow_length\n\npython:int, default: 2048\n\nNumber of points of the window used for the PSD computation , by default 2048.\n\noverlap\n\npython:float, default: 0.25\n\nOverlap value between two successive segments where the FFT is computed.\nValues range from 0 to 1. For example, 0 means no overlap,\nand 0.5 means 50% overlap.\n\nMethods\n\n\n\nAttributes\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.signal_processing.Filter.a_coefficients.html#a_coefficients","title":"a_coefficients","text":"a_coefficients\n\n\n\nproperty Filter.a_coefficients: list[float]\n\nDenominator coefficients of the filter’s transfer function."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.signal_utilities.ZeroPad.get_output.html#get_output","title":"get_output","text":"get_output\n\n\n\nZeroPad.get_output()\n\nGet the zero-padded signal as a DPF fields container or field.\n\nReturns\n\nFieldsContainer | Field\n\nZero-padded signal in a DPF fields container or field.\n\nReturn type\n\nFieldsContainer | Field"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.LoudnessISO532_2.plot.html#plot","title":"plot","text":"plot\n\n\n\nLoudnessISO532_2.plot()\n\nPlot the binaural specific loudness.\n\nThis method displays the binaural specific loudness in sone/Cam as a function of the ERB\ncenter frequency."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.Sharpness.process.html#process","title":"process","text":"process\n\n\n\nSharpness.process()\n\nCompute the sharpness.\n\nThis method calls the appropriate DPF Sound operator to compute the sharpness\nof the signal."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.signal_utilities.CreateSoundField.plot.html#plot","title":"plot","text":"plot\n\n\n\nCreateSoundField.plot()\n\nPlot the resulting signals in a single figure."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.ToneToNoiseRatioForOrdersOverTime.get_output.html#get_output","title":"get_output","text":"get_output\n\n\n\nToneToNoiseRatioForOrdersOverTime.get_output()\n\nGet TNR data over time and its associated RPM profile.\n\nReturns\n\npython:tuple[FieldsContainer, Field]\n\nFirst element (FieldsContainer): tone-to-noise ratio data over time for the\nrequested orders. Each field of the fields container gives the TNR over time, in dB,\nfor each requested order in order_list.\n\nSecond element (Field): RPM over time profile corresponding to the TNR over time.\n\nReturn type\n\ntuple[FieldsContainer, Field]"},{"objectID":"Home","href":"examples/gallery_examples/011_sound_composer_create_project.html#create-and-work-with-a-sound-composer-project","title":"Create and work with a Sound Composer project","text":"Create and work with a Sound Composer project\n\nThe Sound Composer is a tool that allows you to generate the sound of a system by combining the\nsounds of its components, which we call sources here. Each source can be made of data coming from\ntest analysis, or from a simulation, or simply consist of a single audio recording. The sources are\ncombined into a Sound Composer project, where each source is assigned to a track.\n\nA track is a data structure made of a source data, a source control data, an output gain, and,\noptionally, a transfer function in the form of a digital filter (which models the transfer from the\nsource to the listening/recording position). It can generate the sound of the\ncomponent (as characterized by the source data), in specific operating conditions (the source\ncontrol), and filtered according to the transfer function.\n\nThis example shows how to create a Sound Composer project, with the SoundComposer class.\nIt first creates a new project, then adds tracks to it, and finally generates the sound of the\nproject.\n\nThe example shows how to perform these operations:\n\nCreate a project,\n\nCreate a track with a source of type Harmonics, and add it to the project\n\nCreate a track with a source of type Spectrum, and add it to the project\n\nGenerate the signal of the project,\n\nDisplay the spectrogram of the generated signal,\n\nSave the project as an .scn file."},{"objectID":"Home","href":"examples/gallery_examples/011_sound_composer_create_project.html#set-up-analysis","title":"Create and work with a Sound Composer project > Set up analysis","text":"Set up analysis\n\nSetting up the analysis consists of loading the required libraries,\nconnecting to the DPF server, and downloading the data files required in this example."},{"objectID":"Home","href":"examples/gallery_examples/011_sound_composer_create_project.html#create-a-new-sound-composer-project","title":"Create and work with a Sound Composer project > Create a new Sound Composer project","text":"Create a new Sound Composer project\n\nTo create a new Sound Composer project, instantiate the SoundComposer class.\nSources will be combined as tracks into this instance, allowing you to generate the sound of the\nproject."},{"objectID":"Home","href":"examples/gallery_examples/011_sound_composer_create_project.html#create-track-1-for-the-e-motor-source","title":"Create and work with a Sound Composer project > Create track #1 for the e-motor source","text":"Create track #1 for the e-motor source\n\nTo model the noise of the e-motor, we create a track with a harmonics source, which contains the\nharmonics of the e-motor noise. The track also contains a source control that defines the\noperating conditions of the e-motor, and a filter that represents the transfer function of the\ne-motor noise source to the receiver point, usually the driver position.\n\nCreate a new Sound Composer track, meant as a recipient for the e-motor data.\n\nCreate a harmonics source, using the SourceHarmonics class, passing the path to the\nsource file as an argument. This file contains the levels of the harmonics of the e-motor noise\nfor several engine speed values.\n\nCreate a source control profile, using the SourceControlTime class.\nThis source control profile defines the operating conditions of the e-motor, here the speed of\nthe e-motor, increasing from 250 to 5000 rpm in 8 seconds.\n\nCreate a filter, using the Filter class.\nThis filter models the transfer function (FRF) of the e-motor noise source to the receiver point.\n\nAssign created objects to the track.\n\nAdd the track to the Sound Composer project. It is the first track of this project."},{"objectID":"Home","href":"examples/gallery_examples/011_sound_composer_create_project.html#create-track-2-for-the-wind-and-road-noise-source","title":"Create and work with a Sound Composer project > Create track #2 for the wind and road noise source","text":"Create track #2 for the wind and road noise source\n\nTo model the wind and road noise produced in the cabin while driving, we create a track with a\nbroadband noise source, whose spectrum envelope changes according to change in the speed of the\nvehicle over time.\n\nCreate a new Sound Composer track, meant as a recipient for the wind and road noise data.\n\nCreate a broadband noise source, using the SourceBroadbandNoise class.\n\nCreate a source control profile, using the SourceControlTime class. This source control\ndescribes the change of vehicle speed over time.\n\nAssign created objects to the track.\n\nAdd the track to the Sound Composer project. It is the second track of this project."},{"objectID":"Home","href":"examples/gallery_examples/011_sound_composer_create_project.html#generate-the-signal-of-the-project","title":"Create and work with a Sound Composer project > Generate the signal of the project","text":"Generate the signal of the project\n\nNow, let us generate the signal of the project using the SoundComposer.process() method.\nThis method generates, for each track, the acoustic signal of the source, filters it with the\nassociated filter, if any, and applies the track gain, and finally sums all resulting tracks’\nsignals together.\n\nGenerate the signal of the project, using a sampling frequency of 44100 Hz.\n\nDisplay the generated signal using the SoundComposer.plot() method.\n\n\n\nUse the built-in print() function to display a summary of the content of the project.\n\nRetrieve the resulting signal as a DPF Field object.\n\nDisplay the spectrogram of the generated signal using the Stft class.\n\n"},{"objectID":"Home","href":"examples/gallery_examples/011_sound_composer_create_project.html#save-the-entire-sound-composer-project","title":"Create and work with a Sound Composer project > Save the entire Sound Composer project","text":"Save the entire Sound Composer project\n\nYou can save the Sound Composer project for later use, using the SoundComposer.save()\nmethod. This saves the project into a file with the extension “.scn” (Sound Composer project\nfile). This file can be loaded in Ansys Sound Analysis & Specification."},{"objectID":"Home","href":"examples/gallery_examples/011_sound_composer_create_project.html#conclusion","title":"Create and work with a Sound Composer project > Conclusion","text":"Conclusion\n\nThis workflow allows you to analyze and listen to the sound of an e-motor, in\nrealistic conditions, that is, including the background noise inside the cabin.\n\nBy analyzing the spectrogram, you can anticipate how some harmonic tones from the e-motor\nmay be perceived by the passengers in the cabin.\n\nFurther investigations can be conducted, using other tools included in PyAnsys\nSound, such as modules Standard levels,\nPsychoacoustics and\nSpectral processing.\n\nTotal running time of the script: (0 minutes 16.166 seconds)\n\n\n\nDownload Jupyter notebook: 011_sound_composer_create_project.ipynb\n\nDownload Python source code: 011_sound_composer_create_project.py\n\nDownload zipped: 011_sound_composer_create_project.zip\n\nGallery generated by Sphinx-Gallery"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.TonalityISO1996_2_OverTime.get_tonal_adjustment_over_time.html#get_tonal_adjustment_over_time","title":"get_tonal_adjustment_over_time","text":"get_tonal_adjustment_over_time\n\n\n\nTonalityISO1996_2_OverTime.get_tonal_adjustment_over_time()\n\nGet the ISO 1996-2 tonal adjustment over time.\n\nReturns\n\nnumpy.ndarray\n\nISO 1996-2 tonal adjustment over time, in dB.\n\nReturn type\n\nndarray"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.sound_composer.SourceBroadbandNoise.source_bbn.html#source_bbn","title":"source_bbn","text":"source_bbn\n\n\n\nproperty SourceBroadbandNoise.source_bbn: FieldsContainer\n\nSource data of the broadband noise source.\n\nThe broadband noise source data consists of a series of spectra, each corresponding to a\ncontrol parameter value.\n\nEach field contains the level over frequency of the noise at a given value of the control\nparameter. Level over frequency may be specified as a power spectral density (PSD) in\nPa^2/Hz, as octave-band levels in Pa^2, or as 1/3-octave-band levels in Pa^2. The unit must\nbe indicated in each field’s unit. The type of data (‘Narrow band’, ‘Octave’, or\n‘Third octave’) must be indicated in the field’s FieldDefinition attribute, as a\nquantity type.\n\nThe control parameter values corresponding to each spectrum must be stored in the fields\ncontainer’s support named “control_parameter_1”."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.standard_levels.OverallLevel.plot.html#plot","title":"plot","text":"plot\n\n\n\nOverallLevel.plot()\n\nPlot the output.\n\nThere is nothing to plot."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.sound_composer.SourceControlSpectrum.process.html#process","title":"process","text":"process\n\n\n\nSourceControlSpectrum.process()\n\nProcess inputs.\n\nThere is nothing to process."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.LoudnessISO532_1_TimeVarying.get_loudness_sone_vs_time.html#get_loudness_sone_vs_time","title":"get_loudness_sone_vs_time","text":"get_loudness_sone_vs_time\n\n\n\nLoudnessISO532_1_TimeVarying.get_loudness_sone_vs_time()\n\nGet the instantaneous loudness in sone.\n\nReturns\n\nnumpy.ndarray\n\nInstantaneous loudness in sone.\n\nReturn type\n\nndarray"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.sound_composer.SourceBroadbandNoiseTwoParameters.set_from_generic_data_containers.html#set_from_generic_data_containers","title":"set_from_generic_data_containers","text":"set_from_generic_data_containers\n\n\n\nSourceBroadbandNoiseTwoParameters.set_from_generic_data_containers(source_data, source_control_data)\n\nSet the source and source control data from generic data containers.\n\nThis method is meant to set the source data from generic data containers obtained when\nloading a Sound Composer project file (.scn) with the method SoundComposer.load().\n\nParameters\n\nsource_data\n\nGenericDataContainer\n\nSource data as a DPF generic data container.\n\nsource_control_data\n\nGenericDataContainer\n\nSource control data as a DPF generic data container."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.TonalityISOTS20065.get_output_as_nparray.html#get_output_as_nparray","title":"get_output_as_nparray","text":"get_output_as_nparray\n\n\n\nTonalityISOTS20065.get_output_as_nparray()\n\nGet the ISO/TS 20065 tonality data, in a tuple of NumPy arrays.\n\nReturns\n\npython:tuple[numpy.ndarray]\n\nFirst element: ISO/TS 20065 tonality (mean audibility DL), in dB.\n\nSecond element: ISO/TS 20065 tonality uncertainty, in dB.\n\nThird element: ISO/TS 20065 tonality over time (decisive audibility DLj), in dB.\n\nFourth element: ISO/TS 20065 tonality uncertainty over time, in dB.\n\nFifth element: ISO/TS 20065 decisive frequency over time, in Hz.\n\nSixth element: time scale, in s.\n\nReturn type\n\ntuple[ndarray]"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.Sharpness.signal.html#signal","title":"signal","text":"signal\n\n\n\nproperty Sharpness.signal: Field\n\nInput signal in Pa."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.sound_composer.SourceBroadbandNoiseTwoParameters.process.html#process","title":"process","text":"process\n\n\n\nSourceBroadbandNoiseTwoParameters.process(sampling_frequency=44100.0)\n\nGenerate the sound of the broadband noise source with two parameters.\n\nThis method generates the sound of the broadband noise source with two parameters, using\nthe current broadband noise data and source controls.\n\nParameters\n\nsampling_frequency\n\npython:float, default: 44100.0\n\nSampling frequency of the generated sound in Hz."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.signal_utilities.Resample.signal.html#signal","title":"signal","text":"signal\n\n\n\nproperty Resample.signal: Field | FieldsContainer\n\nInput signal as a DPF field or fields container."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.FluctuationStrength.get_output_as_nparray.html#get_output_as_nparray","title":"get_output_as_nparray","text":"get_output_as_nparray\n\n\n\nFluctuationStrength.get_output_as_nparray()\n\nGet fluctuation strength data in a tuple of NumPy arrays.\n\nReturns\n\npython:tuple[numpy.ndarray]\n\nFirst element: fluctuation strength in vacil.\n\nSecond element: specific fluctuation strength, that is, the fluctuation strength in\neach Bark band, in vacil.\n\nThird element: Bark band indexes at which the specific fluctuation strength is\ndefined, in Bark.\n\nReturn type\n\ntuple[ndarray]"},{"objectID":"Home","href":"examples/gallery_examples/010_sound_composer_load_project.html#use-an-existing-sound-composer-project-file","title":"Use an existing Sound Composer project file","text":"Use an existing Sound Composer project file\n\nThe Sound Composer is a tool that allows you to generate the sound of a system by combining the\nsounds of its components, which we call sources here. Each source can be made of data coming from\ntest analysis, or from a simulation, or simply consist of a single audio recording. The sources are\ncombined into a Sound Composer project, where each source is assigned to a track.\n\nA track is a data structure made of a source data, a source control data, an output gain, and,\noptionally, a transfer function in the form of a digital filter (which models the transfer from the\nsource to the listening/recording position). It can generate the sound of the\ncomponent (as characterized by the source data), in specific operating conditions (the source\ncontrol), and filtered according to the transfer function.\n\nThis example shows how to use the Sound Composer, with the SoundComposer class. It starts\nfrom an existing Sound Composer project file, and illustrates the notions of Sound Composer project,\ntrack, source, source control, and filter.\n\nThe example shows how to perform these operations:\n\nLoad a project file,\n\nGet the project information and content,\n\nInvestigate the content of a track,\n\nGenerate the signal of a track,\n\nGenerate the signal of the entire Sound Composer project."},{"objectID":"Home","href":"examples/gallery_examples/010_sound_composer_load_project.html#set-up-analysis","title":"Use an existing Sound Composer project file > Set up analysis","text":"Set up analysis\n\nSetting up the analysis consists of loading the required libraries,\nand connecting to the DPF server."},{"objectID":"Home","href":"examples/gallery_examples/010_sound_composer_load_project.html#load-a-sound-composer-project-from-a-file","title":"Use an existing Sound Composer project file > Load a Sound Composer project from a file","text":"Load a Sound Composer project from a file\n\nLoad a Sound Composer project, using the SoundComposer.load() method. A Sound Composer\nproject file has the extension .scn, and can be created with Ansys Sound SAS.\n\nYou can use built-in print() function to display a summary of the content of the project.\n\nYou can see that this project is made of 4 tracks:\n\na track with a harmonics source, coming form the FEM simulation of an e-motor,\n\na track with another harmonics source, coming from the multibody simulation of a gearbox,\n\na track with a broadband noise source, coming from the CFD simulation of a HVAC system,\n\na track with another broadband noise source, coming form the analysis of a background noise\nmeasurement in the cabin, which would correspond to the rolling noise and the wind noise."},{"objectID":"Home","href":"examples/gallery_examples/010_sound_composer_load_project.html#explore-the-projects-list-of-tracks","title":"Use an existing Sound Composer project file > Explore the project’s list of tracks","text":"Explore the project’s list of tracks\n\nLet us have a closer look at the content of each individual track by printing it.\n\nFor each track, you can see some details about the source content, the associated control profile,\nand whether the track includes a filter or not."},{"objectID":"Home","href":"examples/gallery_examples/010_sound_composer_load_project.html#explore-the-content-of-a-track","title":"Use an existing Sound Composer project file > Explore the content of a track","text":"Explore the content of a track\n\nTo look at a specific track, use the attribute tracks of the SoundComposer\nobject, containing the list of the tracks included.\nFor example, let us extract the second track of the project, which contains the gearbox source.\n\nThe track object returned is of type Track. You can print it to display its content,\nas shown in the previous section.\n\nThis track contains a harmonics source, stored in its Track.source attribute of\ntype SourceHarmonics. Here, it consists of a set of 50 harmonics, which are defined by\ntheir order numbers, and their levels over 249 values of the control parameter (RPM).\n\nThese data are stored in the SourceHarmonics.source_harmonics\nattribute of the track’s source object, as a FieldsContainer object. It contains 249 fields, each\ncorresponding to a specific value of the control parameter (RPM), and containing\nthe levels in Pa² of the 50 harmonics at this RPM value.\n\nThe source control data (that is, the RPM values over time) can be accessed using the\nSourceHarmonics.source_control attribute of the source in the track. Let us display this\ncontrol profile in a figure: it is a linear ramp-up from 250 rpm to 5000 rpm, over 8 seconds.\n\n\n\nThe track also contains a filter, stored as a Filter object.\nHere, it is a finite impulse response (FIR) filter that models the transfer between the source\nand the listening position.\n\nLet us generate the signal corresponding to the track using the Track.process() method,\nplot its waveform, and display its spectrogram with the Stft class.\n\n\n\n\n\nIf needed, you can access the output signal of a track using Track.get_output()."},{"objectID":"Home","href":"examples/gallery_examples/010_sound_composer_load_project.html#generate-the-signal-of-the-project","title":"Use an existing Sound Composer project file > Generate the signal of the project","text":"Generate the signal of the project\n\nNow, let us generate the signal of the project using the SoundComposer.process() method.\nThis method generates, for each track, the acoustic signal of the source, filters it with the\nassociated filter, if any, and applies the track gain, and finally sums all resulting tracks’\nsignals together.\n\nGenerate the signal of the project, using a sampling frequency of 44100 Hz.\n\nYou can display the waveform of the generated signal using the SoundComposer.plot()\nmethod, and its spectrogram using the Stft class.\n\n\n\n"},{"objectID":"Home","href":"examples/gallery_examples/010_sound_composer_load_project.html#conclusion","title":"Use an existing Sound Composer project file > Conclusion","text":"Conclusion\n\nThis workflow allows you to analyze and listen to the sound of the gearbox and the e-motor, in\nrealistic conditions, that is, including the HVAC noise and the background noise inside the cabin.\n\nBy analyzing the spectrogram, you can anticipate how some harmonic tones from the e-motor and the\ngearbox may be perceived by the passengers in the cabin.\n\nFurther investigations can be conducted, using other tools included in PyAnsys\nSound, such as modules Standard levels,\nPsychoacoustics and\nSpectral processing.\n\nTotal running time of the script: (0 minutes 38.647 seconds)\n\n\n\nDownload Jupyter notebook: 010_sound_composer_load_project.ipynb\n\nDownload Python source code: 010_sound_composer_load_project.py\n\nDownload zipped: 010_sound_composer_load_project.zip\n\nGallery generated by Sphinx-Gallery"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.ProminenceRatio.get_reference_curve.html#get_reference_curve","title":"get_reference_curve","text":"get_reference_curve\n\n\n\nProminenceRatio.get_reference_curve()\n\nGet the reference threshold curve, above which a tone is considered as prominent.\n\nReturns\n\nnumpy.ndarray\n\nReference curve with which to compare the PR, as defined in the ECMA 418-1 and ISO 7779\nstandards. If the PR is higher, then the tone is defined as prominent.\n\nReturn type\n\nndarray"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.signal_utilities.LoadWav.plot.html#plot","title":"plot","text":"plot\n\n\n\nLoadWav.plot()\n\nPlot the resulting signals in a single figure."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.xtract.XtractDenoiserParameters.html#xtractdenoiserparameters","title":"XtractDenoiserParameters","text":"XtractDenoiserParameters\n\n\n\nclass ansys.sound.core.xtract.XtractDenoiserParameters(noise_psd=None)\n\nContains denoiser parameters for use in Xtract processing or signal denoising.\n\nClass instantiation takes the following parameters.\n\nParameters\n\nnoise_psd\n\nField, optional\n\nPower spectral density of the noise in unit^2/Hz (Pa^2/Hz for example).\nThis parameter can be produced using one of the following methods:\n\nXtractDenoiserParameters.create_noise_psd_from_white_noise_level()\n\nXtractDenoiserParameters.create_noise_psd_from_noise_samples()\n\nXtractDenoiserParameters.create_noise_psd_from_automatic_estimation()\n\nMethods\n\n\n\nAttributes\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.SpectralCentroid.html#spectralcentroid","title":"SpectralCentroid","text":"SpectralCentroid\n\n\n\nclass ansys.sound.core.psychoacoustics.SpectralCentroid(signal=None)\n\nComputes the spectral centroid of a signal.\n\nThe spectral centroid is the center of gravity of the spectrum. It is a measure of the\ndistribution of the spectral energy of a signal.\n\nClass instantiation takes the following parameters.\n\nParameters\n\nsignal\n\nField, default: python:None\n\nSignal on which to compute spectral centroid.\n\nMethods\n\n\n\nAttributes\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.standard_levels.OctaveLevelsFromPSD.html#octavelevelsfrompsd","title":"OctaveLevelsFromPSD","text":"OctaveLevelsFromPSD\n\n\n\nclass ansys.sound.core.standard_levels.OctaveLevelsFromPSD(psd=None, use_ansi_s1_11_1986=False, reference_value=1.0, frequency_weighting='')\n\nCompute octave levels from a power spectral density (PSD) input.\n\nThis class computes octave levels from a PSD.\n\nAdded in DPF server version 11.0.\n\nClass instantiation takes the following parameters.\n\nParameters\n\npsd\n\nField, default: python:None\n\nThe power spectral density (PSD) from which the levels are computed.\n\nuse_ansi_s1_11_1986\n\nbool, default: python:False\n\nWhether to simulate the 1/3-octave filterbank as defined in ANSI S1.11-1986 and\nIEC 61260 standards.\n\nreference_value\n\npython:float, default: 1.0\n\nThe reference value for the levels’ computation. If the levels are computed with a PSD\nin Pa^2/Hz, the reference value should be 2e-5 (Pa).\n\nfrequency_weighting\n\npython:str, default: “”\n\nThe frequency weighting to apply to the signal before computing the levels. Available\noptions are “”, “A”, “B”,  and “C”, to get levels in dB (or dBSPL), dBA, dBB,\nand dBC, respectively.\n\nMethods\n\n\n\nAttributes\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.signal_utilities.WriteWav.bit_depth.html#bit_depth","title":"bit_depth","text":"bit_depth\n\n\n\nproperty WriteWav.bit_depth: str\n\nBit depth.\n\nOptions are ‘float32’, ‘int32’, ‘int16’, and ‘int8’. These mean that the\nsamples are coded into the WAV file using 32 bits (32-bit IEEE Float), 32 bits (int),\n16 bits (int), or 8 bits (int), respectively."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.signal_utilities.CropSignal.signal.html#signal","title":"signal","text":"signal\n\n\n\nproperty CropSignal.signal: Field | FieldsContainer\n\nInput signal as a DPF field or fields container."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.standard_levels.OneThirdOctaveLevelsFromSignal.signal.html#signal","title":"signal","text":"signal\n\n\n\nproperty OneThirdOctaveLevelsFromSignal.signal: Field\n\nInput time-domain signal."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.standard_levels.OneThirdOctaveLevelsFromSignal.process.html#process","title":"process","text":"process\n\n\n\nOneThirdOctaveLevelsFromSignal.process()\n\nCompute the one-third-octave-band levels."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.sound_composer.SourceSpectrum.html#sourcespectrum","title":"SourceSpectrum","text":"SourceSpectrum\n\n\n\nclass ansys.sound.core.sound_composer.SourceSpectrum(file_source='', source_control=None)\n\nSound Composer’s spectrum source class.\n\nThis class creates a spectrum source for the Sound Composer. A spectrum source is used to\ngenerate a sound signal from a spectrum and a source control.\n\nThe source’s spectrum data consists of a power spectral density (PSD), where levels are\nspecified in unit^2/Hz (for example Pa^2/Hz).\n\nThe source control contains the duration of the sound and the generation method to use.\n\nClass instantiation takes the following parameters.\n\nParameters\n\nfile_source\n\npython:str, default: “”\n\nPath to the file that contains the spectrum data. Supported files are the same XML and\ntext (with the AnsysSound_Spectrum header) formats as supported by Ansys Sound SAS.\n\nsource_control\n\nSourceControlSpectrum, default: python:None\n\nSource control, consisting of the sound duration and sound generation method to use\nwhen generating the sound from this source.\n\nMethods\n\n\n\nAttributes\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.standard_levels.OneThirdOctaveLevelsFromPSD.reference_value.html#reference_value","title":"reference_value","text":"reference_value\n\n\n\nproperty OneThirdOctaveLevelsFromPSD.reference_value: float\n\nReference value for the levels’ computation.\n\nIf the levels are computed with a PSD in Pa^2/Hz, the reference value should be 2e-5 (Pa)."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.sound_composer.SourceSpectrum.get_as_generic_data_containers.html#get_as_generic_data_containers","title":"get_as_generic_data_containers","text":"get_as_generic_data_containers\n\n\n\nSourceSpectrum.get_as_generic_data_containers()\n\nGet the source and source control data as generic data containers.\n\nThis method is meant to return the source data as generic data containers, in the format\nneeded to save a Sound Composer project file (.scn) with the method\nSoundComposer.save().\n\nReturns\n\npython:tuple[GenericDataContainer]\n\nSource as two generic data containers, for source and source control data, respectively.\n\nReturn type\n\ntuple[GenericDataContainer]"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.sound_power.SoundPowerLevelISO3744.K1.html#k1","title":"K1","text":"K1\n\n\n\nproperty SoundPowerLevelISO3744.K1: float\n\nBackground noise correction K1 in dB.\n\nSee section 8.2.3 of ISO 3744."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.TonalityISO1996_2_OverTime.noise_pause_threshold.html#noise_pause_threshold","title":"noise_pause_threshold","text":"noise_pause_threshold\n\n\n\nproperty TonalityISO1996_2_OverTime.noise_pause_threshold: int | float\n\nNoise pause detection threshold (level excess) in dB."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.signal_utilities.ApplyGain.html#applygain","title":"ApplyGain","text":"ApplyGain\n\n\n\nclass ansys.sound.core.signal_utilities.ApplyGain(signal=None, gain=0.0, gain_in_db=True)\n\nApplies a gain to a signal.\n\nClass instantiation takes the following parameters.\n\nParameters\n\nsignal\n\nField | FieldsContainer, default: python:None\n\nSignals to apply gain on as a DPF field or fields container.\n\ngain\n\npython:float, default: 0.0\n\nGain value in decibels (dB) or linear unit. By default, gain is specified in decibels.\nHowever, you can use the next parameter to change to a linear unit.\n\ngain_in_db\n\nbool, default: python:True\n\nWhether gain is in dB. When False, gain is in a linear unit.\n\nMethods\n\n\n\nAttributes\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.ToneToNoiseRatio.process.html#process","title":"process","text":"process\n\n\n\nToneToNoiseRatio.process()\n\nCompute the TNR.\n\nThis method calls the appropriate DPF Sound operator to compute the TNR on the PSD."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.Sharpness.get_output.html#get_output","title":"get_output","text":"get_output\n\n\n\nSharpness.get_output()\n\nGet the sharpness value.\n\nReturns\n\npython:float\n\nSharpness value in acum.\n\nReturn type\n\nfloat"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.sound_composer.SourceHarmonics.source_control.html#source_control","title":"source_control","text":"source_control\n\n\n\nproperty SourceHarmonics.source_control: SourceControlTime\n\nSource control for the harmonics source.\n\nContains the control parameter (RPM) values over time."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.LoudnessISO532_1_TimeVarying.get_Nmax_sone.html#get_nmax_sone","title":"get_Nmax_sone","text":"get_Nmax_sone\n\n\n\nLoudnessISO532_1_TimeVarying.get_Nmax_sone()\n\nGet the maximum instantaneous loudness in sone.\n\nReturns\n\npython:float\n\nMaximum loudness in sone.\n\nReturn type\n\nfloat"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.standard_levels.OverallLevel.signal.html#signal","title":"signal","text":"signal\n\n\n\nproperty OverallLevel.signal: Field\n\nInput signal."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.standard_levels.OctaveLevelsFromSignal.signal.html#signal","title":"signal","text":"signal\n\n\n\nproperty OctaveLevelsFromSignal.signal: Field\n\nInput time-domain signal."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.LoudnessANSI_S3_4.process.html#process","title":"process","text":"process\n\n\n\nLoudnessANSI_S3_4.process()\n\nCompute the loudness.\n\nThis method calls the appropriate DPF Sound operator to compute the loudness of the signal."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.signal_utilities.ZeroPad.signal.html#signal","title":"signal","text":"signal\n\n\n\nproperty ZeroPad.signal: Field | FieldsContainer\n\nInput signal as a DPF field or fields container."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.standard_levels.LevelOverTime.frequency_weighting.html#frequency_weighting","title":"frequency_weighting","text":"frequency_weighting\n\n\n\nproperty LevelOverTime.frequency_weighting: str\n\nFrequency weighting of the computed level.\n\nAvailable options are “”, “A”, “B”, and “C”. If attribute reference_value\nis 2e-5 Pa, these options allow level calculation in dBSPL, dBA, dBB, and dBC, respectively.\nNote that the frequency weighting is only applied if the attribute scale is set to\n“dB”."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.xtract.XtractTonal.input_signal.html#input_signal","title":"input_signal","text":"input_signal\n\n\n\nproperty XtractTonal.input_signal: FieldsContainer | Field\n\nInput signal.\n\nOne or more signals from which to extract tonal components, as a DPF field or fields\ncontainer. When inputting a fields container, each signal (each field of the fields\ncontainer) is processed individually."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.signal_utilities.ApplyGain.process.html#process","title":"process","text":"process\n\n\n\nApplyGain.process()\n\nApply a gain to the signal.\n\nThis method calls the appropriate DPF Sound operator to apply a gain to the signal."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.LoudnessANSI_S3_4.get_output_as_nparray.html#get_output_as_nparray","title":"get_output_as_nparray","text":"get_output_as_nparray\n\n\n\nLoudnessANSI_S3_4.get_output_as_nparray()\n\nGet loudness data in a tuple of NumPy arrays.\n\nReturns\n\npython:tuple[numpy.ndarray]\n\nFirst element: loudness in sone.\n\nSecond element: loudness level in phon.\n\nReturn type\n\ntuple[ndarray]"},{"objectID":"Computation times","href":"sg_execution_times.html#computation-times","title":"Computation times","text":"Computation times\n\n10:34.921 total execution time for 11 files from all galleries:\n\n\n\n\n\n\n\nExample\n\nTime\n\nMem (MB)\n\nsphx_glr_examples_gallery_examples_005_xtract_feature.py (..\\..\\examples\\005_xtract_feature.py)\n\n04:13.262\n\n0.0\n\nsphx_glr_examples_gallery_examples_004_isolate_orders.py (..\\..\\examples\\004_isolate_orders.py)\n\n02:07.431\n\n0.0\n\nsphx_glr_examples_gallery_examples_009_calculate_tonality_indicators.py (..\\..\\examples\\009_calculate_tonality_indicators.py)\n\n01:31.029\n\n0.0\n\nsphx_glr_examples_gallery_examples_010_sound_composer_load_project.py (..\\..\\examples\\010_sound_composer_load_project.py)\n\n00:38.647\n\n0.0\n\nsphx_glr_examples_gallery_examples_003_compute_stft.py (..\\..\\examples\\003_compute_stft.py)\n\n00:35.287\n\n0.0\n\nsphx_glr_examples_gallery_examples_001_initialize_server_and_deal_with_license.py (..\\..\\examples\\001_initialize_server_and_deal_with_license.py)\n\n00:27.883\n\n0.0\n\nsphx_glr_examples_gallery_examples_006_calculate_PR_and_TNR.py (..\\..\\examples\\006_calculate_PR_and_TNR.py)\n\n00:20.418\n\n0.0\n\nsphx_glr_examples_gallery_examples_011_sound_composer_create_project.py (..\\..\\examples\\011_sound_composer_create_project.py)\n\n00:16.166\n\n0.0\n\nsphx_glr_examples_gallery_examples_007_calculate_psychoacoustic_indicators.py (..\\..\\examples\\007_calculate_psychoacoustic_indicators.py)\n\n00:16.151\n\n0.0\n\nsphx_glr_examples_gallery_examples_008_calculate_levels.py (..\\..\\examples\\008_calculate_levels.py)\n\n00:05.560\n\n0.0\n\nsphx_glr_examples_gallery_examples_002_load_resample_amplify_write_wav_files.py (..\\..\\examples\\002_load_resample_amplify_write_wav_files.py)\n\n00:03.086\n\n0.0"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.Roughness.plot.html#plot","title":"plot","text":"plot\n\n\n\nRoughness.plot()\n\nPlot the specific roughness and the roughness over time.\n\nThis method displays the specific roughness and the roughness over time."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.server_helpers._validate_dpf_sound_connection.validate_dpf_sound_connection.html#validate_dpf_sound_connection","title":"validate_dpf_sound_connection","text":"validate_dpf_sound_connection\n\n\n\nansys.sound.core.server_helpers._validate_dpf_sound_connection.validate_dpf_sound_connection(port=None)\n\nValidate that the DPF Sound plugin is available.\n\nParameters\n\nport\n\npython:int, default python:None\n\nPort that the DPF server is listening to.\n\nReturn type\n\nNone"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.sound_power.SoundPowerLevelISO3744.add_microphone_signal.html#add_microphone_signal","title":"add_microphone_signal","text":"add_microphone_signal\n\n\n\nSoundPowerLevelISO3744.add_microphone_signal(signal)\n\nAdd microphone signal.\n\nAdds a microphone-recorded signal.\n\nIt is assumed that the microphone positions where the signals were recorded follow\nAnnex B of ISO 3744 for the specific measurement surface shape used.\n\nParameters\n\nsignal\n\nField\n\nRecorded signal in Pa from one specific position."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.Roughness.get_specific_roughness.html#get_specific_roughness","title":"get_specific_roughness","text":"get_specific_roughness\n\n\n\nRoughness.get_specific_roughness()\n\nGet the specific roughness in asper/Bark.\n\nReturns\n\nnumpy.ndarray\n\nSpecific roughness, that is, the roughness in each Bark band, in asper/Bark.\n\nReturn type\n\nndarray"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.ToneToNoiseRatioForOrdersOverTime.get_output_as_nparray.html#get_output_as_nparray","title":"get_output_as_nparray","text":"get_output_as_nparray\n\n\n\nToneToNoiseRatioForOrdersOverTime.get_output_as_nparray()\n\nGet TNR data in a tuple of NumPy arrays.\n\nReturns\n\npython:tuple\n\nFirst element: tone-to-noise ratio data over time for the requested orders. Each\ncolumn corresponds to the TNR over time, in dB, for each requested order in\norder_list.\n\nSecond element: time scale associated with the output tone-to-noise ratios.\n\nThird element: RPM over time profile corresponding to the TNR over time.\n\nReturn type\n\ntuple[ndarray]"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.server_helpers._connect_to_or_start_server.connect_to_or_start_server.html#connect_to_or_start_server","title":"connect_to_or_start_server","text":"connect_to_or_start_server\n\n\n\nansys.sound.core.server_helpers._connect_to_or_start_server.connect_to_or_start_server(port=None, ip=None, ansys_path=None, use_license_context=False, license_increment_name='avrxp_snd_level1')\n\nConnect to or start a DPF server with the DPF Sound plugin loaded.\n\nParameters\n\nport\n\npython:int, default: python:None\n\nPort that the DPF server is listening to.\n\nip\n\npython:str, default: python:None\n\nIP address for the DPF server.\n\nansys_path\n\npython:str, default: python:None\n\nRoot path for the Ansys installation. For example, “C:\\Program Files\\ANSYS Inc\\v242”.\nThis parameter is ignored if either the port or IP address is set.\n\nuse_license_context\n\nbool, default: python:False\n\nWhether to check out the DPF Sound license increment before using PyAnsys Sound (see\nparameter license_increment_name). If set to True, the function returns a\nLicenseContextManager object\n(None otherwise) in addition to the server object.\n\nThis improves performance if you are doing multiple calls to DPF Sound operators, as it\nallows a single check out of the license increment, rather than requiring a check out for\neach operator call. The license is checked back in (that is, released) when the\nLicenseContextManager object\nis deleted.\n\nThis parameter can also be used to force check out before running a script when only few\nDPF Sound license increments are available.\n\nlicense_increment_name\n\npython:str, default: “avrxp_snd_level1”\n\nName of the license increment to check out. Only taken into account if\nuse_license_context is True. The default value is “avrxp_snd_level1”, which\ncorresponds to the license required by Ansys Sound Pro.\n\nReturns\n\nInProcessServer | GrpcServer\n\nServer object started or connected to.\n\nLicenseContextManager\n\nLicensing context object. Retains the licence increment until the object is deleted.\nNone if use_license_context is set to False.\n\nReturn type\n\ntuple[InProcessServer | GrpcServer, LicenseContextManager]\n\nNotes\n\nIf a port or IP address is set, this method tries to connect to the server specified and\nthe ansys_path parameter is ignored. If no parameters are set, a local server from the\nlatest available Ansys installation is started."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.spectral_processing.PowerSpectralDensity.overlap.html#overlap","title":"overlap","text":"overlap\n\n\n\nproperty PowerSpectralDensity.overlap: int\n\nWindow overlap in %."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.xtract.Xtract.parameters_tonal.html#parameters_tonal","title":"parameters_tonal","text":"parameters_tonal\n\n\n\nproperty Xtract.parameters_tonal: XtractTonalParameters\n\nParameters of the tonal extraction step.\n\nStructure that contains the parameters of the tonal extraction step:\n\nNFFT (int) is the number of points used for the FFT computation.\n\nRegularity setting (float) between 0 and 1.\n\nMaximum slope (float) in dB/Hz.\n\nMinimum duration (float) in seconds (s).\n\nIntertonal gap (float) in Hz.\n\nLocal emergence (float) in dB."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.LoudnessISO532_2.get_binaural_specific_loudness.html#get_binaural_specific_loudness","title":"get_binaural_specific_loudness","text":"get_binaural_specific_loudness\n\n\n\nLoudnessISO532_2.get_binaural_specific_loudness()\n\nGet the binaural specific loudness.\n\nReturns\n\nnumpy.ndarray\n\nBinaural specific loudness array in sone/Cam, as a function of the ERB center frequency.\n\nReturn type\n\nndarray"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.signal_utilities.Resample.html#resample","title":"Resample","text":"Resample\n\n\n\nclass ansys.sound.core.signal_utilities.Resample(signal=None, new_sampling_frequency=44100.0)\n\nResamples a signal.\n\nClass instantiation takes the following parameters.\n\nParameters\n\nsignal\n\nField | FieldsContainer, default: python:None\n\nSignal to resample as a DPF field or fields container.\n\nnew_sampling_frequency\n\npython:float, default: 44100.0\n\nNew sampling frequency to use.\n\nMethods\n\n\n\nAttributes\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.signal_utilities.CropSignal.html#cropsignal","title":"CropSignal","text":"CropSignal\n\n\n\nclass ansys.sound.core.signal_utilities.CropSignal(signal=None, start_time=0.0, end_time=0.0)\n\nCrops a signal.\n\nClass instantiation takes the following parameters.\n\nParameters\n\nsignal\n\nFieldsContainer | Field, default: python:None\n\nSignal to resample as a DPF field or fields container.\n\nstart_time\n\npython:float, default: 0.0\n\nStart time of the part to crop in seconds.\n\nend_time\n\npython:float, default: 0.0\n\nEnd time of the part to crop in seconds.\n\nMethods\n\n\n\nAttributes\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.xtract.XtractTransient.input_parameters.html#input_parameters","title":"input_parameters","text":"input_parameters\n\n\n\nproperty XtractTransient.input_parameters: XtractTransientParameters\n\nInput parameters.\n\nStructure that contains the parameters of the algorithm:\n\nLower threshold (float), which is between 0 and 100.\n\nUpper threshold (float), which is between 0 and 100."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.standard_levels.OctaveLevelsFromPSD.get_band_levels.html#get_band_levels","title":"get_band_levels","text":"get_band_levels\n\n\n\nOctaveLevelsFromPSD.get_band_levels()\n\nReturn the band levels in dB as a numpy array.\n\nReturns\n\nnp.ndarray\n\nThe band levels in dB (actual unit depends on reference_value and\nfrequency_weighting attributes’ values).\n\nReturn type\n\nndarray"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.xtract.Xtract.input_signal.html#input_signal","title":"input_signal","text":"input_signal\n\n\n\nproperty Xtract.input_signal: FieldsContainer | Field\n\nInput signal.\n\nOne or more signals on which to apply the Xtract processing, as a DPF field or fields\ncontainer."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.standard_levels.OverallLevel.scale.html#scale","title":"scale","text":"scale\n\n\n\nproperty OverallLevel.scale: str\n\nScale type of the output level.\n\nSpecifies whether the output level shall be provided on a decibel (“dB”) or linear\n(“RMS”) scale."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.xtract.XtractDenoiserParameters.process.html#process","title":"process","text":"process\n\n\n\nXtractDenoiserParameters.process()\n\nProcess inputs.\n\nThere is nothing to process."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.standard_levels.OneThirdOctaveLevelsFromSignal.get_output_as_nparray.html#get_output_as_nparray","title":"get_output_as_nparray","text":"get_output_as_nparray\n\n\n\nOneThirdOctaveLevelsFromSignal.get_output_as_nparray()\n\nReturn the band levels in dB and center frequencies in Hz as a tuple of numpy arrays.\n\nReturns\n\nnp.ndarray\n\nThe band levels in dB (actual unit depends on reference_value and\nfrequency_weighting attributes’ values).\n\nnp.ndarray\n\nThe center frequencies in Hz of the band levels.\n\nReturn type\n\ntuple[ndarray]"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.LoudnessISO532_2.field_type.html#field_type","title":"field_type","text":"field_type\n\n\n\nproperty LoudnessISO532_2.field_type: str\n\nSound field type.\n\nAvailable options are “Free” and “Diffuse”."},{"objectID":"Home","href":"examples/index.html#examples","title":"Examples","text":"Examples\n\nThese examples show how to use PyAnsys Sound for various workflows.\n\nsphx_glr_examples_gallery_examples_001_initialize_server_and_deal_with_license.py\n\nsphx_glr_examples_gallery_examples_002_load_resample_amplify_write_wav_files.py\n\nsphx_glr_examples_gallery_examples_003_compute_stft.py\n\nsphx_glr_examples_gallery_examples_004_isolate_orders.py\n\nsphx_glr_examples_gallery_examples_005_xtract_feature.py\n\nsphx_glr_examples_gallery_examples_006_calculate_PR_and_TNR.py\n\nsphx_glr_examples_gallery_examples_007_calculate_psychoacoustic_indicators.py\n\nsphx_glr_examples_gallery_examples_008_calculate_levels.py\n\nsphx_glr_examples_gallery_examples_009_calculate_tonality_indicators.py\n\nsphx_glr_examples_gallery_examples_010_sound_composer_load_project.py\n\nsphx_glr_examples_gallery_examples_011_sound_composer_create_project.py\n\n\n\nGallery generated by Sphinx-Gallery"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.TonalityISO1996_2_OverTime.get_output.html#get_output","title":"get_output","text":"get_output\n\n\n\nTonalityISO1996_2_OverTime.get_output()\n\nGet the ISO 1996-2 tonality data.\n\nReturns\n\npython:tuple[Field, Field, Collection[GenericDataContainer]]\n\nFirst element (Field): tonal audibility over time, in dB.\n\nSecond element (Field): tonal adjustment over time, in dB.\n\nThird element (GenericDataContainerCollection): computation details, that is, the\nsegment start and end times, the main tone’s critical band boundary frequencies,\nand the total tone and noise levels in dBA, for each successive window (segment) in\nthe input signal.\n\nReturn type\n\ntuple[Field, Field, Collection[GenericDataContainer]]"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.TonalityISO1996_2_OverTime.overlap.html#overlap","title":"overlap","text":"overlap\n\n\n\nproperty TonalityISO1996_2_OverTime.overlap: int | float\n\nOverlap between successive windows in %."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.sound_composer.SourceAudio.load_from_wave_file.html#load_from_wave_file","title":"load_from_wave_file","text":"load_from_wave_file\n\n\n\nSourceAudio.load_from_wave_file(file)\n\nLoad the audio source data from a WAV file.\n\nParameters\n\nfile\n\npython:str\n\nPath to the WAV file."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.spectrogram_processing.IsolateOrders.window_type.html#window_type","title":"window_type","text":"window_type\n\n\n\nproperty IsolateOrders.window_type: str\n\nWindow type.\n\nSupported options are 'TRIANGULAR', 'BLACKMAN', 'BLACKMANHARRIS', 'HAMMING',\n'HANN', 'GAUSS', 'FLATTOP', and 'RECTANGULAR'."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.xtract.XtractTonalParameters.minimum_duration.html#minimum_duration","title":"minimum_duration","text":"minimum_duration\n\n\n\nproperty XtractTonalParameters.minimum_duration: float\n\nMinimum duration in s.\n\nMinimum duration in seconds for each tonal component. Values are between 0 and 5 s."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.xtract.Xtract.parameters_transient.html#parameters_transient","title":"parameters_transient","text":"parameters_transient\n\n\n\nproperty Xtract.parameters_transient: XtractTransientParameters\n\nParameters of the transient extraction step.\n\nStructure that contains the parameters of the transient extraction step:\n\nLower threshold (float), which is between 0 and 100.\n\nUpper threshold (float), which is between 0 and 100."},{"objectID":"Home","href":"api/sound_composer.html#sound-composer","title":"Sound composer","text":"Sound composer\n\nSound Composer is a feature allowing you to generate complex sounds by mixing several tracks.\n\nEach track contains a source, which can be an audio recording, or a set of spectral data\n(from a CAE simulation for example), possibly associated to specific control values. The track may also\ncontain control profiles, an RPM profile for example, that are used to generate the sound, to\nreplicate a realistic situation.\n\nEach track contains an optional transfer function (filter) to simulate the transfer\nbetween a source and a receiver.\n\nThe Sound composer module allows you to create projects including several tracks. It therefore eases the process of\nmixing different source types: harmonics (1 or 2 control parameters), broadband noise (1 or 2 control parameters),\naudio, and spectrum.\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.ProminenceRatio.get_max_PR_value.html#get_max_pr_value","title":"get_max_PR_value","text":"get_max_PR_value\n\n\n\nProminenceRatio.get_max_PR_value()\n\nGet the maximum PR value.\n\nReturns\n\npython:float\n\nMaximum PR value in dB.\n\nReturn type\n\nfloat"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.LoudnessISO532_1_Stationary.signal.html#signal","title":"signal","text":"signal\n\n\n\nproperty LoudnessISO532_1_Stationary.signal: Field\n\nInput signal in Pa."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.xtract.XtractTransientParameters.html#xtracttransientparameters","title":"XtractTransientParameters","text":"XtractTransientParameters\n\n\n\nclass ansys.sound.core.xtract.XtractTransientParameters(lower_threshold=0.0, upper_threshold=100.0)\n\nContains transient parameters for use in Xtract processing or signal denoising.\n\nClass instantiation takes the following parameters.\n\nParameters\n\nlower_threshold\n\npython:float, default: 0.0\n\nMinimum threshold, which is related to the minimum energy of transient components.\nValues are between 0 and 100. You should set this parameter as high as possible\nprovided that no transient element remains in the remainder (non-transient signal).\n\nupper_threshold\n\npython:float, default: 100.0\n\nMaximum threshold, which is related to the maximum energy of transient components.\nValues are between 0 and 100. You should set this parameter as low as possible provided\nthat no transient element remains in the remainder (non-transient signal).\n\nMethods\n\n\n\nAttributes\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.ToneToNoiseRatioForOrdersOverTime.get_time_scale.html#get_time_scale","title":"get_time_scale","text":"get_time_scale\n\n\n\nToneToNoiseRatioForOrdersOverTime.get_time_scale()\n\nGet the time scale corresponding to the TNR array over time.\n\nReturns\n\nnumpy.ndarray\n\nTime scale of the TNR calculation, in s.\n\nReturn type\n\nndarray | None"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.signal_utilities.CropSignal.start_time.html#start_time","title":"start_time","text":"start_time\n\n\n\nproperty CropSignal.start_time: float\n\nStart time of the part to crop in s."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.TonalityAures.w1_threshold.html#w1_threshold","title":"w1_threshold","text":"w1_threshold\n\n\n\nproperty TonalityAures.w1_threshold: float\n\nThreshold in dB for the bandwidth weighting w1.\n\nDefines the threshold value in dB for the tone bandwidth in the calculation of the\nbandwidth weighting w1, if attribute account_for_w1 is set to True. In this case,\nthe bandwidth is defined as an X-dB bandwidth around the tone frequency, where X is the\nvalue set in this attribute."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.TonalityISOTS20065.window_length.html#window_length","title":"window_length","text":"window_length\n\n\n\nproperty TonalityISOTS20065.window_length: float\n\nLength, in s, of a slice of the signal used to compute each spectrum."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.sound_composer.Track.plot.html#plot","title":"plot","text":"plot\n\n\n\nTrack.plot()\n\nPlot the resulting signal."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.TonalityAures.html#tonalityaures","title":"TonalityAures","text":"TonalityAures\n\n\n\nclass ansys.sound.core.psychoacoustics.TonalityAures(signal=None, overlap=90.0, account_for_w1=False, w1_threshold=3.0)\n\nComputes the tonality of the signal according to Aures model.\n\nReferences\n\nW. Aures, “Procedure for calculating the sensory pleasantness of various sounds”, Acustica\n59(2), pp. 130-141, December 1985.\n\nE. Terhardt, G. Stoll, M. Seewann, “Algorithm for extraction of pitch and pitch salience\nfrom complex tonal signals”, J. Acoust. Soc. Am. 71(3), pp. 679-688, March 1982.\n\n\n\nClass instantiation takes the following parameters.\n\nParameters\n\nsignal\n\nField, default: python:None\n\nSignal in Pa on which to compute Aures tonality.\n\noverlap\n\npython:float, default: 90.0\n\nOverlap in % between two successive windows.\n\naccount_for_w1\n\nbool, default: python:False\n\nSpecifies whether bandwidth weighting w1 should be taken into account or not.\n\nw1_threshold\n\npython:float, default: 3.0\n\nThreshold for bandwidth weighting. Ignored when account_for_w1 is set to\nFalse.\n\nFor more information about the parameters, please refer to the Ansys Sound SAS user guide.\n\n\n\nMethods\n\n\n\nAttributes\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.TonalityISOTS20065.plot.html#plot","title":"plot","text":"plot\n\n\n\nTonalityISOTS20065.plot()\n\nPlot the ISO/TS 20065’s decisive audibility and frequency over time.\n\nThis method displays the decisive audibility DLj in dB, and the decisive frequency in Hz,\nover time."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.ToneToNoiseRatio.get_output.html#get_output","title":"get_output","text":"get_output\n\n\n\nToneToNoiseRatio.get_output()\n\nGet TNR data as a generic data container.\n\nReturns\n\nGenericDataContainer\n\nTNR data as a generic data container.\n\nReturn type\n\nGenericDataContainer"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.TonalityECMA418_2.process.html#process","title":"process","text":"process\n\n\n\nTonalityECMA418_2.process()\n\nCompute the ECMA-418-2 tonality.\n\nThis method calls the appropriate DPF Sound operator."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.TonalityAures.get_output_as_nparray.html#get_output_as_nparray","title":"get_output_as_nparray","text":"get_output_as_nparray\n\n\n\nTonalityAures.get_output_as_nparray()\n\nGet the Aures tonality data as NumPy arrays.\n\nReturns\n\npython:tuple[numpy.ndarray]:\n\nFirst element: overall tonality value, in tu (tonality unit).\n\nSecond element: tonality over time, in tu.\n\nThird element: tonal component weighting wT over time (between 0.0 and\n1.0, no unit).\n\nFourth element: relative loudness weighting wGr over time (between 0.0\nand 1.0, no unit).\n\nFifth element: time scale, in s.\n\nReturn type\n\ntuple[ndarray]"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.ToneToNoiseRatioForOrdersOverTime.order_list.html#order_list","title":"order_list","text":"order_list\n\n\n\nproperty ToneToNoiseRatioForOrdersOverTime.order_list: list[float]\n\nOrders list as floats.\n\nList of the orders as floats on which to compute the tone-to-noise ratio."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.signal_utilities.CreateSoundField.get_output_as_nparray.html#get_output_as_nparray","title":"get_output_as_nparray","text":"get_output_as_nparray\n\n\n\nCreateSoundField.get_output_as_nparray()\n\nGet the data as a NumPy array.\n\nReturns\n\nnumpy.ndarray\n\nData in a NumPy array.\n\nReturn type\n\nndarray"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.spectral_processing.PowerSpectralDensity.get_output_as_nparray.html#get_output_as_nparray","title":"get_output_as_nparray","text":"get_output_as_nparray\n\n\n\nPowerSpectralDensity.get_output_as_nparray()\n\nGet the PSD data as NumPy arrays.\n\nReturns\n\npython:tuple[numpy.ndarray]\n\nFirst element: PSD amplitudes in squared linear unit.\n\nSecond element: corresponding frequencies in Hz.\n\nReturn type\n\ntuple[ndarray]"},{"objectID":"User guide","href":"user_guide.html#user-guide","title":"User guide","text":"User guide\n\nThis section explains how to start a DPF server, load a signal from a WAV file, and perform operations\non this signal."},{"objectID":"User guide","href":"user_guide.html#start-a-dpf-server","title":"User guide > Start a DPF server","text":"Start a DPF server\n\nYou use the connect_to_or_start_server()\nfunction to start either a remote or local DPF server, which is required to run PyAnsys Sound.\n\nYou can start the server with this code:\n\nIf the ANSRV_DPF_SOUND_PORT environment variable is set, PyAnsys Sound\nattempts to connect to a server located in a Docker container. The default port is 6780.\n\nIf this environment variable is not set, PyAnsys Sound tries to start a local server.\n\nFor more information on local and remote DPF servers, see Install DPF Server in the PyDPF-Core documentation."},{"objectID":"User guide","href":"user_guide.html#load-a-signal","title":"User guide > Load a signal","text":"Load a signal\n\nMost of the processing done by PyAnsys Sound relies on temporal sound signals that are saved as WAV files.\n\nTo load a WAV file, you must use the LoadWav class.\nOnce your signal is loaded, you can use all other PyAnsys Sound classes on this signal.\n\nFor descriptions of all PyAnsys Sound classes and helpers, see api/index. These classes\nhave four methods in common:\n\nprocess(): Performs the operation that the class was made for. This method must be called explicitly\nevery time an input parameter is changed.\n\nplot(): Plots the output of the class. Depending on the nature of the output, the plot might be different.\n\nget_output(): Gets the outputs as a DPF object (either a Field or a FieldsContainer object).\n\nget_output_as_nparray(): Gets the output as a NumPy array.\n\nA class might also have some additional methods.\n\nFor comprehensive information on using PyAnsys Sound classes and helpers, see examples/index.\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.TonalityECMA418_2.get_output.html#get_output","title":"get_output","text":"get_output\n\n\n\nTonalityECMA418_2.get_output()\n\nGet the ECMA-418-2 tonality data, in a tuple containing data of various types.\n\nReturns\n\npython:tuple\n\nFirst element (float): ECMA-418-2 tonality, in tuHMS.\n\nSecond element (Field): ECMA-418-2 tonality over time, in tuHMS.\n\nThird element (Field): ECMA-418-2 tone frequency over time, in Hz.\n\nReturn type\n\ntuple[float, Field, Field]"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.spectrogram_processing.Stft.window_overlap.html#window_overlap","title":"window_overlap","text":"window_overlap\n\n\n\nproperty Stft.window_overlap: float\n\nWindow overlap in %."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.standard_levels.OctaveLevelsFromPSD.get_output_as_nparray.html#get_output_as_nparray","title":"get_output_as_nparray","text":"get_output_as_nparray\n\n\n\nOctaveLevelsFromPSD.get_output_as_nparray()\n\nReturn the band levels in dB and center frequencies in Hz as a tuple of numpy arrays.\n\nReturns\n\nnp.ndarray\n\nThe band levels in dB (actual unit depends on reference_value and\nfrequency_weighting attributes’ values).\n\nnp.ndarray\n\nThe center frequencies in Hz of the band levels.\n\nReturn type\n\ntuple[ndarray]"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.FluctuationStrength.html#fluctuationstrength","title":"FluctuationStrength","text":"FluctuationStrength\n\n\n\nclass ansys.sound.core.psychoacoustics.FluctuationStrength(signal=None)\n\nComputes the fluctuation strength for a stationary sound.\n\nThis class computes the fluctuation strength of a signal according to Sontacchi’s master\nthesis work.\n\nReference: “Entwicklung eines Modulkonzeptes fur die psychoakustische Gerauschanalyse under\nMATLAB”. Master thesis, Technischen Universitat Graz, pp. 1-112 (1998).\n\nClass instantiation takes the following parameters.\n\nParameters\n\nsignal\n\nField, default: python:None\n\nSignal in Pa on which to compute fluctuation strength.\n\nMethods\n\n\n\nAttributes\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.ProminenceRatio.get_nb_tones.html#get_nb_tones","title":"get_nb_tones","text":"get_nb_tones\n\n\n\nProminenceRatio.get_nb_tones()\n\nGet the number of tones.\n\nReturns\n\npython:int\n\nNumber of tones.\n\nReturn type\n\nint"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.sound_composer.SoundComposer.tracks.html#tracks","title":"tracks","text":"tracks\n\n\n\nproperty SoundComposer.tracks: list[Track]\n\nList of tracks.\n\nList of the tracks available in this Sound Composer instance (project).\n\nEach track is a Track object, and contains a source and a filter."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.TonalityDIN45681.get_decisive_frequency_over_time.html#get_decisive_frequency_over_time","title":"get_decisive_frequency_over_time","text":"get_decisive_frequency_over_time\n\n\n\nTonalityDIN45681.get_decisive_frequency_over_time()\n\nGet the DIN 45681 decisive frequency, in Hz over time.\n\nReturns\n\nnumpy.ndarray\n\nDecisive frequency, in Hz over time.\n\nReturn type\n\nndarray"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.ToneToNoiseRatioForOrdersOverTime.profile.html#profile","title":"profile","text":"profile\n\n\n\nproperty ToneToNoiseRatioForOrdersOverTime.profile: Field\n\nRPM over time related to the input signal."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.ProminenceRatio.get_single_tone_info.html#get_single_tone_info","title":"get_single_tone_info","text":"get_single_tone_info\n\n\n\nProminenceRatio.get_single_tone_info(tone_index)\n\nGet the PR information for a tone.\n\nParameters\n\ntone_index\n\npython:int\n\nIndex of the tone.\n\nReturns\n\npython:tuple[python:float]\n\nFirst element: frequency of the peak in Hz.\n\nSecond element: PR value in dB.\n\nThird element: level of the peak in dB SPL.\n\nFourth element: lower-frequency limit of the critical band centered on the peak,\nin Hz.\n\nFifth element: higher-frequency limit of the critical band centered on the peak,\nin Hz.\n\nReturn type\n\ntuple[float]"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.signal_utilities.WriteWav.get_output_as_nparray.html#get_output_as_nparray","title":"get_output_as_nparray","text":"get_output_as_nparray\n\n\n\nWriteWav.get_output_as_nparray()\n\nGet output as a NumPy array.\n\nThere is nothing to output.\n\nReturns\n\nnumpy.ndarray\n\nEmpty NumPy array.\n\nReturn type\n\nndarray"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.signal_processing.Filter.html#filter","title":"Filter","text":"Filter\n\n\n\nclass ansys.sound.core.signal_processing.Filter(b_coefficients=None, a_coefficients=None, sampling_frequency=44100.0, frf=None, file='', signal=None)\n\nFilter class.\n\nThis class allows designing, loading, and applying a digital filter to a signal. The filter\ncoefficients can be provided directly, using the attributes b_coefficients and\na_coefficients, or computed from a specific frequency response function (FRF), using\nthe attribute frf or the method design_FIR_from_FRF_file(). In this latter case,\nthe filter is designed as a minimum-phase FIR filter, and the filter denominator\n(a_coefficients) is set to 1 as a consequence.\n\nNote that only one filter definition source (coefficients, FRF, or FRF file) can be provided\nwhen instantiating the class. After class instantiation, any time the coefficients are\nchanged, the FRF is updated accordingly, and vice versa.\n\nFiltering a signal consists of applying the filter coefficients  and \nin the following difference equation, with  the input signal, and  the\noutput signal:\n\ny[n] = \\sum_{k=0}^{N} b[k] \\cdot x[n-k] - \\sum_{k=1}^{N} a[k] \\cdot y[n-k]\n\n\n\nWhether they are derived from the provided FRF or specified directly, the filter\ncoefficients are linked to the sampling frequency value that is given in the\nsampling_frequency parameter of the Filter class. As a consequence, the signal to\nfilter signal must have the same sampling frequency. If necessary, use the\nResample class to resample the signal prior to using the Filter class.\n\nClass instantiation takes the following parameters.\n\nParameters\n\na_coefficients\n\npython:list[python:float], default: python:None\n\nDenominator coefficients of the filter. This is mutually exclusive with parameters\nfrf and file.\n\nb_coefficients\n\npython:list[python:float], default: python:None\n\nNumerator coefficients of the filter. This is mutually exclusive with parameters frf\nand file.\n\nsampling_frequency\n\npython:float, default: 44100.0\n\nSampling frequency associated with the filter coefficients, in Hz.\n\nfrf\n\nField, default: python:None\n\nFrequency response function (FRF) of the filter, in dB. This is mutually exclusive with\nparameters a_coefficients, b_coefficients, and file.\n\nfile\n\npython:str, default: “”\n\nPath to the file containing the frequency response function (FRF) to load. The text\nfile shall have the same text format (with the header AnsysSound_FRF), as supported\nby Ansys Sound SAS. This is mutually exclusive with parameters a_coefficients,\nb_coefficients, and frf.\n\nsignal\n\nField, default: python:None\n\nSignal to filter.\n\nMethods\n\n\n\nAttributes\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.sound_power.SoundPowerLevelISO3744.html#soundpowerleveliso3744","title":"SoundPowerLevelISO3744","text":"SoundPowerLevelISO3744\n\n\n\nclass ansys.sound.core.sound_power.SoundPowerLevelISO3744(surface_shape='Hemisphere', surface_radius=1.0, K1=0.0, K2=0.0, C1=0.0, C2=0.0)\n\nComputes ISO 3744 sound power level.\n\nThis class computes the sound power level according to the ISO 3744 standard.\n\nClass instantiation takes the following parameters.\n\nParameters\n\nsurface_shape\n\npython:str, default: ‘Hemisphere’\n\nShape of measurement surface. Available options are ‘Hemisphere’ (default) and\n‘Half-hemisphere’.\n\nsurface_radius\n\npython:float, default: 1.0\n\nRadius in m of the hemisphere or half-hemisphere measurement surface.\nBy default, 1.0 meter.\n\nK1\n\npython:float, default: 0.0\n\nBackground noise correction K1 in dB (section 8.2.3 of ISO 3744).\nBy default, 0.0 dB.\n\nK2\n\npython:float, default: 0.0\n\nEnvironmental correction K2 in dB (Annex A of ISO 3744). By default, 0.0 dB.\n\nC1\n\npython:float, default: 0.0\n\nMeteorological reference quantity correction C1 in dB (Annex G of ISO 3744).\nBy default, 0.0 dB.\n\nC2\n\npython:float, default: 0.0\n\nMeteorological radiation impedance correction C2 in dB (Annex G of ISO 3744).\nBy default, 0.0 dB.\n\nMethods\n\n\n\nAttributes\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.sound_composer.SourceBroadbandNoiseTwoParameters.get_as_generic_data_containers.html#get_as_generic_data_containers","title":"get_as_generic_data_containers","text":"get_as_generic_data_containers\n\n\n\nSourceBroadbandNoiseTwoParameters.get_as_generic_data_containers()\n\nGet the source and source control data as generic data containers.\n\nThis method is meant to return the source data as generic data containers, in the format\nneeded to save a Sound Composer project file (.scn) with the method\nSoundComposer.save().\n\nReturns\n\npython:tuple[GenericDataContainer]\n\nSource as two generic data containers, for source and source control data, respectively.\n\nReturn type\n\ntuple[GenericDataContainer]"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.sound_composer.SourceHarmonics.plot_control.html#plot_control","title":"plot_control","text":"plot_control\n\n\n\nSourceHarmonics.plot_control()\n\nPlot the source control."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.sound_composer.SourceHarmonicsTwoParameters.source_control2.html#source_control2","title":"source_control2","text":"source_control2\n\n\n\nproperty SourceHarmonicsTwoParameters.source_control2: SourceControlTime\n\nSecond source control for the harmonics source with two parameters.\n\nContains the second control parameter values over time."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.TonalityISO1996_2_OverTime.window_length.html#window_length","title":"window_length","text":"window_length\n\n\n\nproperty TonalityISO1996_2_OverTime.window_length: int | float\n\nLength of the integration window in ms."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.spectrogram_processing.Istft.get_output.html#get_output","title":"get_output","text":"get_output\n\n\n\nIstft.get_output()\n\nGet the ISTFT resulting signal as a DPF field.\n\nReturns\n\nField\n\nSignal resulting from the ISTFT as a DPF field.\n\nReturn type\n\nField"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.sound_composer.SoundComposer.get_output_as_nparray.html#get_output_as_nparray","title":"get_output_as_nparray","text":"get_output_as_nparray\n\n\n\nSoundComposer.get_output_as_nparray()\n\nGet the generated signal of the Sound Composer project as a NumPy array.\n\nReturns\n\nnumpy.ndarray\n\nGenerated signal as a NumPy array.\n\nReturn type\n\nndarray"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.xtract.XtractTonalParameters.get_output_as_nparray.html#get_output_as_nparray","title":"get_output_as_nparray","text":"get_output_as_nparray\n\n\n\nXtractTonalParameters.get_output_as_nparray()\n\nGet output as a NumPy array.\n\nThere is nothing to output.\n\nReturns\n\nnumpy.ndarray\n\nEmpty NumPy array.\n\nReturn type\n\nndarray"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.signal_utilities.WriteWav.path_to_write.html#path_to_write","title":"path_to_write","text":"path_to_write\n\n\n\nproperty WriteWav.path_to_write: str\n\nPath of the WAV file to write."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.TonalityDIN45681.get_output_as_nparray.html#get_output_as_nparray","title":"get_output_as_nparray","text":"get_output_as_nparray\n\n\n\nTonalityDIN45681.get_output_as_nparray()\n\nGet the DIN 45681 tonality data, in a tuple of NumPy arrays.\n\nReturns\n\npython:tuple[numpy.ndarray]\n\nFirst element: DIN 45681 tonality (mean difference DL), in dB.\n\nSecond element: DIN 45681 tonality uncertainty, in dB.\n\nThird element: DIN 45681 tonal adjustment Kt, in dB.\n\nFourth element: DIN 45681 tonality over time (decisive difference DLj), in dB.\n\nFifth element: DIN 45681 tonality uncertainty over time, in dB.\n\nSixth element: DIN 45681 decisive frequency over time, in Hz.\n\nSeventh element: DIN 45681 tonal adjustment Kt over time, in dB.\n\nEighth element: time scale, in s.\n\nReturn type\n\ntuple[ndarray]"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.signal_utilities.ApplyGain.get_output_as_nparray.html#get_output_as_nparray","title":"get_output_as_nparray","text":"get_output_as_nparray\n\n\n\nApplyGain.get_output_as_nparray()\n\nGet the signal with a gain as a NumPy array.\n\nReturns\n\nnumpy.ndarray\n\nSignal with an applied gain as a NumPy array.\n\nReturn type\n\nndarray"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.ProminenceRatio.frequency_list.html#frequency_list","title":"frequency_list","text":"frequency_list\n\n\n\nproperty ProminenceRatio.frequency_list: list[float]\n\nTone frequency list in Hz.\n\nList of the frequencies in Hz of the tones (peaks in the PSD) where the PR shall be\ncalculated.\n\nIf this parameter is unspecified (None), a peak detection algorithm is applied to\nlocate the tones in the input PSD. Then, the PR is calculated for each detected tone."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.standard_levels.LevelOverTime.html#levelovertime","title":"LevelOverTime","text":"LevelOverTime\n\n\n\nclass ansys.sound.core.standard_levels.LevelOverTime(signal=None, scale='dB', reference_value=1.0, frequency_weighting='', time_weighting='Fast')\n\nCompute the level over time.\n\nThis class computes the level over time of a signal.\n\nClass instantiation takes the following parameters.\n\nParameters\n\nsignal\n\nField, default: python:None\n\nThe signal to process.\n\nscale\n\npython:str, default: “dB”\n\nThe scale type of the output level. Available options are “dB” and “RMS”.\n\nreference_value\n\npython:float, default: 1.0\n\nThe reference value for the level computation. If the overall level is computed with a\nsignal in Pa, the reference value should be 2e-5 (Pa).\n\nfrequency_weighting\n\npython:str, default: “”\n\nThe frequency weighting to apply to the signal before computing the level. Available\noptions are “”, “A”, “B”,  and “C”, to get level in dB (or dBSPL), dBA, dBB,\nand dBC, respectively. Note that the frequency weighting is only applied if the\nattribute scale is set to “dB”.\n\ntime_weighting\n\npython:str, default: “Fast”\n\nThe time weighting to use when computing the level over time. Available options are\n“Fast”, “Slow”, “Impulse”, and “Custom”. When “Custom” is selected, the user\ncan provide custom parameters using the method set_custom_parameters().\n\nMethods\n\n\n\nAttributes\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.TonalityISO1996_2.process.html#process","title":"process","text":"process\n\n\n\nTonalityISO1996_2.process()\n\nCompute the ISO 1996-2 tonality.\n\nThis method calls the appropriate DPF Sound operator."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.sound_composer.SoundComposer.save.html#save","title":"save","text":"save\n\n\n\nSoundComposer.save(project_path)\n\nSave the Sound Composer project.\n\nParameters\n\nproject_path\n\npython:str\n\nPath and file name (.scn) where the Sound Composer project shall be saved."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.spectrogram_processing.IsolateOrders.orders.html#orders","title":"orders","text":"orders\n\n\n\nproperty IsolateOrders.orders: Field\n\nList of the order numbers to isolate.\n\nCan be provided as a list or a DPF field, but will be stored as DPF field regardless."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.TonalityISO1996_2_OverTime.html#tonalityiso1996_2_overtime","title":"TonalityISO1996_2_OverTime","text":"TonalityISO1996_2_OverTime\n\n\n\nclass ansys.sound.core.psychoacoustics.TonalityISO1996_2_OverTime(signal=None, window_length=1000.0, overlap=75.0, noise_pause_threshold=1.0, effective_analysis_bandwidth=5.0, noise_bandwidth_ratio=0.75)\n\nComputes the tonality according to the standard ISO 1996-2:2007, annex C, over time.\n\nThe standard ISO 1996-2:2007, annex C, does not include a method for calculation over time.\nThe computation of the present indicator is thus not entirely covered by the standard. The\nmethod used here splits the input signal into overlapping windows (segments), and then\ncomputes the tonality, for each window, according to the standard ISO 1996-2:2007, annex C.\n\nClass instantiation takes the following parameters.\n\nParameters\n\nsignal\n\nField, default: python:None\n\nInput signal.\n\nwindow_length\n\npython:float, default: 1000.0\n\nWindow length in ms.\n\noverlap\n\npython:float, default: 75.0\n\nOverlap between successive windows in %.\n\nnoise_pause_threshold\n\npython:float, default: 1.0\n\nNoise pause detection threshold (“level excess”) in dB.\n\neffective_analysis_bandwidth\n\npython:float, default: 5.0\n\nEffective analysis bandwidth in Hz.\n\nnoise_critical_bandwidth_ratio\n\npython:float, default: 0.75\n\nNoise bandwidth, in proportion to the critical bandwidth, that is taken into account\nfor the calculation of the masking noise level (the default value 0.75 means that the\nmasking noise level is estimated in a band delimited by 75 % of the critical bandwidth\non each side of the tone). Value must be between 0.75 and 2.\n\nFor more information about the parameters, please refer to the Ansys Sound SAS user guide.\n\n\n\nMethods\n\n\n\nAttributes\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.TonalityISO1996_2.effective_analysis_bandwidth.html#effective_analysis_bandwidth","title":"effective_analysis_bandwidth","text":"effective_analysis_bandwidth\n\n\n\nproperty TonalityISO1996_2.effective_analysis_bandwidth: float\n\nEffective analysis bandwidth in Hz."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.TonalityISOTS20065.process.html#process","title":"process","text":"process\n\n\n\nTonalityISOTS20065.process()\n\nCompute the ISO/TS 20065 tonality.\n\nThis method calls the appropriate DPF Sound operator."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.LoudnessISO532_1_Stationary.get_specific_loudness.html#get_specific_loudness","title":"get_specific_loudness","text":"get_specific_loudness\n\n\n\nLoudnessISO532_1_Stationary.get_specific_loudness()\n\nGet the specific loudness.\n\nReturns\n\nnumpy.ndarray\n\nSpecific loudness array in sone/Bark, as a function of the Bark band index.\n\nReturn type\n\nndarray"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.TonalityECMA418_2.plot.html#plot","title":"plot","text":"plot\n\n\n\nTonalityECMA418_2.plot()\n\nPlot the ECMA-418-2’s tonality and tone frequency over time.\n\nThis method displays the tonality in dB and the tone frequency in Hz, over time."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.xtract.Xtract.get_output.html#get_output","title":"get_output","text":"get_output\n\n\n\nXtract.get_output()\n\nGet the output of the Xtract algorithm in a tuple as DPF fields containers or fields.\n\nReturns\n\npython:tuple[FieldsContainer, FieldsContainer, FieldsContainer, FieldsContainer] |\n\n\n\npython:tuple[Field, Field, Field, Field]\n\nNoise signal, tonal signal, transient signal, and remainder signal\nin a tuple of DPF fields or fields containers.\n\nReturn type\n\ntuple[FieldsContainer, FieldsContainer, FieldsContainer, FieldsContainer] | tuple[Field, Field, Field, Field]"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.sound_composer.SpectrumSynthesisMethods.IFFT.html#ifft","title":"IFFT","text":"IFFT\n\n\n\nSpectrumSynthesisMethods.IFFT = 'IFFT'\n\nIFFT: sound generation method based on the Inverse Fast Fourier Transform of the input\nspectrum, using random phases."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.ProminenceRatio.get_output_as_nparray.html#get_output_as_nparray","title":"get_output_as_nparray","text":"get_output_as_nparray\n\n\n\nProminenceRatio.get_output_as_nparray()\n\nGet PR data in a tuple as a NumPy array.\n\nReturns\n\npython:tuple\n\nFirst element: array of the peaks’ frequencies in Hz.\n\nSecond element: array of the peaks’ PR values in dB.\n\nThird element: array of the peaks’ level values in dB SPL.\n\nFourth element: array of the lower-frequency limits, in Hz, of the critical\nbandwidths centered on the peaks’ frequencies.\n\nFifth element: array of the upper-frequency limits, in Hz, of the critical\nbandwidths centered on the peaks’ frequencies.\n\nSixth element: maximum PR value in dB.\n\nThe first five elements are arrays of the same length.\nThe sixth element is a float.\n\nReturn type\n\ntuple[ndarray] | None"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.TonalityISO1996_2_OverTime.effective_analysis_bandwidth.html#effective_analysis_bandwidth","title":"effective_analysis_bandwidth","text":"effective_analysis_bandwidth\n\n\n\nproperty TonalityISO1996_2_OverTime.effective_analysis_bandwidth: int | float\n\nEffective analysis bandwidth in Hz."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.spectrogram_processing.Stft.plot.html#plot","title":"plot","text":"plot\n\n\n\nStft.plot()\n\nPlot signals.\n\nThis method plots the STFT amplitude and the associated phase."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.TonalityECMA418_2.get_tonality_time_scale.html#get_tonality_time_scale","title":"get_tonality_time_scale","text":"get_tonality_time_scale\n\n\n\nTonalityECMA418_2.get_tonality_time_scale()\n\nGet the ECMA-418-2 tonality time scale, in s.\n\nReturns\n\nnumpy.ndarray\n\nTime array, in seconds, of the ECMA-418-2 tonality over time.\n\nReturn type\n\nndarray"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.SharpnessDIN45692.get_output_as_nparray.html#get_output_as_nparray","title":"get_output_as_nparray","text":"get_output_as_nparray\n\n\n\nSharpnessDIN45692.get_output_as_nparray()\n\nGet the DIN 45692 sharpness as a NumPy array.\n\nReturns\n\nnumpy.ndarray\n\nSingleton array containing the sharpness value in acum.\n\nReturn type\n\nndarray"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.xtract.XtractTransientParameters.get_output_as_nparray.html#get_output_as_nparray","title":"get_output_as_nparray","text":"get_output_as_nparray\n\n\n\nXtractTransientParameters.get_output_as_nparray()\n\nGet output as a NumPy array.\n\nThere is nothing to output.\n\nReturns\n\nnumpy.ndarray\n\nEmpty NumPy array.\n\nReturn type\n\nndarray"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.TonalityAures.account_for_w1.html#account_for_w1","title":"account_for_w1","text":"account_for_w1\n\n\n\nproperty TonalityAures.account_for_w1: bool\n\nSpecifies whether bandwidth weighting w1 should be taken into account or not.\n\nGiven the rather high line spacing (12.5 Hz), as specified in the reference paper of\nTerhardt et al, the bandwidth weighting w1 is disabled by default. If the value is set to\nTrue, then the tone bandwidth taken into account to calculate the weighting w1 is defined\nas an X-dB bandwidth around the tone frequency, where X is the value set in the\nw1_threshold attribute."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.standard_levels.OctaveLevelsFromSignal.plot.html#plot","title":"plot","text":"plot\n\n\n\nOctaveLevelsFromSignal.plot()\n\nPlot the octave-band levels."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.sound_composer.SourceHarmonicsTwoParameters.get_output.html#get_output","title":"get_output","text":"get_output\n\n\n\nSourceHarmonicsTwoParameters.get_output()\n\nGet the generated sound as a DPF field.\n\nReturns\n\nField\n\nGenerated sound as a DPF field.\n\nReturn type\n\nField"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.signal_processing.Filter.b_coefficients.html#b_coefficients","title":"b_coefficients","text":"b_coefficients\n\n\n\nproperty Filter.b_coefficients: list[float]\n\nNumerator coefficients of the filter’s transfer function."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.ProminenceRatio.plot.html#plot","title":"plot","text":"plot\n\n\n\nProminenceRatio.plot()\n\nPlot the PR for all identified peaks, along with the threshold curve."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.ProminenceRatio.html#prominenceratio","title":"ProminenceRatio","text":"ProminenceRatio\n\n\n\nclass ansys.sound.core.psychoacoustics.ProminenceRatio(psd=None, frequency_list=None)\n\nComputes the ECMA 418-1/ISO 7779 prominence ratio (PR).\n\nThis class computes the PR from a power spectral density (PSD), according to the ECMA 418-1 and\nISO 7779 standards.\n\nClass instantiation takes the following parameters.\n\nParameters\n\npsd\n\nField\n\nPSD of the signal on which to compute PR.\nThe PSD field has the following characteristics:\n\nnum_entities = 1\n\nlocation = “TimeFreq_sets”\n\ndata: Array of amplitude values in unit^2/Hz\n\ntime_freq_support: Array of regularly spaced frequencies in Hz associated with\namplitude values (from 0 Hz to the maximum frequency)\n\nunit = “<unit>^2/Hz” (where <unit> is Pa for example).\n\nYou can use the function\ncreate_scalar_field()\nto create the field.\n\nfrequency_list\n\npython:list, default: python:None\n\nList of the frequencies in Hz of the tones (peaks in the spectrum)\non which to calculate the PR. The default is None, in which case a peak\ndetection method is applied to automatically find the tones in the input\nspectrum. Then, the PR is calculated for each detected tone.\n\nMethods\n\n\n\nAttributes\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.sound_power.SoundPowerLevelISO3744.get_thirdoctave_center_frequencies.html#get_thirdoctave_center_frequencies","title":"get_thirdoctave_center_frequencies","text":"get_thirdoctave_center_frequencies\n\n\n\nSoundPowerLevelISO3744.get_thirdoctave_center_frequencies()\n\nGet one-third-octave-band center frequencies.\n\nReturns\n\nnumpy.ndarray\n\nArray of one-third-octave-band center frequencies in Hz.\n\nReturn type\n\nndarray"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.sound_power.SoundPowerLevelISO3744.plot.html#plot","title":"plot","text":"plot\n\n\n\nSoundPowerLevelISO3744.plot()\n\nPlot the sound power level in octave or one-third-octave bands.\n\nCreates a figure that displays the sound power level in each octave band in the upper graph,\nand in each 1/3-octave band in the lower graph."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.spectral_processing.PowerSpectralDensity.fft_size.html#fft_size","title":"fft_size","text":"fft_size\n\n\n\nproperty PowerSpectralDensity.fft_size: int\n\nNumber of FFT points.\n\nMust be a power of 2."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.standard_levels.OneThirdOctaveLevelsFromPSD.get_output.html#get_output","title":"get_output","text":"get_output\n\n\n\nOneThirdOctaveLevelsFromPSD.get_output()\n\nReturn the band levels in dB.\n\nReturns\n\nField\n\nThe band levels in dB (actual unit depends on reference_value and\nfrequency_weighting attributes’ values).\n\nReturn type\n\nField"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.sound_composer.Track.gain.html#gain","title":"gain","text":"gain\n\n\n\nproperty Track.gain: float\n\nTrack gain in dB.\n\nGain in dB to apply to the generated signal of the track."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.sound_composer.SourceHarmonics.set_from_generic_data_containers.html#set_from_generic_data_containers","title":"set_from_generic_data_containers","text":"set_from_generic_data_containers\n\n\n\nSourceHarmonics.set_from_generic_data_containers(source_data, source_control_data)\n\nSet the source and source control data from generic data containers.\n\nThis method is meant to set the source data from generic data containers obtained when\nloading a Sound Composer project file (.scn) with the method SoundComposer.load().\n\nParameters\n\nsource_data\n\nGenericDataContainer\n\nSource data as a DPF generic data container.\n\nsource_control_data\n\nGenericDataContainer\n\nSource control data as a DPF generic data container."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.TonalityISO1996_2.get_computation_details.html#get_computation_details","title":"get_computation_details","text":"get_computation_details\n\n\n\nTonalityISO1996_2.get_computation_details()\n\nGet the ISO 1996-2 computation details.\n\nReturns\n\npython:dict[python:str, python:float]\n\nDictionary containing the ISO 1996-2 tonality details, namely:\n\nMain tone’s critical band lower frequency in Hz\n(“Lower critical band limit (Hz)”),\n\nMain tone’s critical band higher frequency in Hz\n(“Higher critical band limit (Hz)”),\n\nTotal tone level in dBA (“Total tonal level (dBA)”),\n\nTotal noise level in dBA (“Total noise level (dBA)”).\n\nReturn type\n\ndict[str, float]"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.xtract.XtractTonal.get_output_as_nparray.html#get_output_as_nparray","title":"get_output_as_nparray","text":"get_output_as_nparray\n\n\n\nXtractTonal.get_output_as_nparray()\n\nGet the output of the tonal analysis as NumPy arrays.\n\nReturns\n\npython:tuple[np.ndarray, np.ndarray]\n\nTonal and non-tonal signals as a tuple in NumPy arrays.\n\nReturn type\n\ntuple[ndarray, ndarray]"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.TonalityDIN45681.get_output.html#get_output","title":"get_output","text":"get_output\n\n\n\nTonalityDIN45681.get_output()\n\nGet the DIN 45681 tonality data, in a tuple containing data of various types.\n\nReturns\n\npython:tuple\n\nFirst element (float): DIN 45681 tonality (mean difference DL), in dB.\n\nSecond element (float): DIN 45681 tonality uncertainty, in dB.\n\nThird element (float): DIN 45681 tonal adjustment Kt, in dB.\n\nFourth element (Field): DIN 45681 tonality over time (decisive difference DLj),\nin dB.\n\nFifth element (Field): DIN 45681 tonality uncertainty over time, in dB.\n\nSixth element (Field): DIN 45681 decisive frequency over time, in Hz.\n\nSeventh element (Field): DIN 45681 tonal adjustment Kt over time, in dB.\n\nEighth element (GenericDataContainerCollection): DIN 45681 tonality details\n(individual tone data for each spectrum).\n\nReturn type\n\ntuple"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.LoudnessISO532_1_TimeVarying.get_L10_phon.html#get_l10_phon","title":"get_L10_phon","text":"get_L10_phon\n\n\n\nLoudnessISO532_1_TimeVarying.get_L10_phon()\n\nGet the L10 percentile loudness level.\n\nL10 is the loudness level that is exceeded during a cumulated 10 % of the signal duration.\n\nReturns\n\npython:float\n\nL10 percentile loudness level in phon.\n\nReturn type\n\nfloat"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.LoudnessISO532_1_TimeVarying.get_output_as_nparray.html#get_output_as_nparray","title":"get_output_as_nparray","text":"get_output_as_nparray\n\n\n\nLoudnessISO532_1_TimeVarying.get_output_as_nparray()\n\nGet time-varying loudness data in a tuple of NumPy arrays.\n\nReturns\n\npython:tuple[numpy.ndarray]\n\nFirst element: instantaneous loudness in sone.\n\nSecond element: N5 percentile loudness in sone. N5 is the loudness that is exceeded\nduring a cumulated 5 % of the signal duration.\n\nThird element: N10 percentile loudness in sone. N10 is the loudness that is\nexceeded during a cumulated 10 % of the signal duration.\n\nFourth element: instantaneous loudness level in phon.\n\nFifth element: L5 percentile loudness level in phon. L5 is the loudness level that\nis exceeded during a cumulated 5 % of the signal duration.\n\nSixth element: L10 percentile loudness level in phon. L10 is the loudness level\nthat is exceeded during a cumulated 10 % of the signal duration.\n\nSeventh element: time vector of the instantaneous loudness and loudness level, in\nseconds.\n\nReturn type\n\ntuple[ndarray]"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.xtract.XtractDenoiserParameters.get_output_as_nparray.html#get_output_as_nparray","title":"get_output_as_nparray","text":"get_output_as_nparray\n\n\n\nXtractDenoiserParameters.get_output_as_nparray()\n\nGet output as a NumPy array.\n\nThere is nothing to output.\n\nReturns\n\nnumpy.ndarray\n\nEmpty NumPy array.\n\nReturn type\n\nndarray"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.TonalityISOTS20065.get_tone_details.html#get_tone_details","title":"get_tone_details","text":"get_tone_details\n\n\n\nTonalityISOTS20065.get_tone_details(spectrum_index, tone_index)\n\nGet the tone data, for a specific spectrum.\n\nReturns all the data associated with a specific detected tone, in a specific spectrum (that\nis, at a specific time step).\n\nParameters\n\nspectrum_index: int\n\nIndex of the spectrum where the tone was detected. The index is 0-based.\n\ntone_index: int\n\nIndex of the tone whose details are requested. The index is 0-based.\n\nReturns\n\npython:tuple\n\nFirst element (float): decisive difference DLj in dB.\n\nSecond element (float): uncertainty, in dB.\n\nThird element (float): decisive frequency, in Hz.\n\nFourth element (str): tone type (’’ for individual tones, or ‘FG’ for groups\nof tones).\n\nFifth element (float): critical band lower limit, in Hz.\n\nSixth element (float): critical band upper limit, in Hz.\n\nSeventh element (float): mean narrow-band masking noise level Ls, in dBA.\n\nEighth element (float): tone level Lt, in dBA.\n\nNinth element (float): masking noise level Lg, in dBA.\n\nTenth element (float): masking index av, in dB.\n\nReturn type\n\ntuple"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.Sharpness.get_sharpness.html#get_sharpness","title":"get_sharpness","text":"get_sharpness\n\n\n\nSharpness.get_sharpness()\n\nGet the sharpness value.\n\nReturns\n\npython:float\n\nSharpness value in acum.\n\nReturn type\n\nfloat"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.LoudnessISO532_1_Stationary.get_output.html#get_output","title":"get_output","text":"get_output\n\n\n\nLoudnessISO532_1_Stationary.get_output()\n\nGet loudness, loudness level, specific loudness.\n\nReturns\n\npython:tuple\n\nFirst element (float): loudness in sone.\n\nSecond element (float): loudness level in phon.\n\nThird element (Field): specific loudness in sone/Bark, as a function of the Bark\nband index.\n\nReturn type\n\ntuple"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.sound_composer.SourceBroadbandNoise.load_source_bbn.html#load_source_bbn","title":"load_source_bbn","text":"load_source_bbn\n\n\n\nSourceBroadbandNoise.load_source_bbn(file)\n\nLoad the broadband noise source data from a file.\n\nParameters\n\nfile\n\npython:str\n\nPath to the broadband noise source file. Supported files have the same text format\n(with the AnsysSound_BBN header) as supported by Ansys Sound SAS."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.LoudnessISO532_2.get_monaural_loudness_level_phon.html#get_monaural_loudness_level_phon","title":"get_monaural_loudness_level_phon","text":"get_monaural_loudness_level_phon\n\n\n\nLoudnessISO532_2.get_monaural_loudness_level_phon()\n\nGet the monaural loudness level in phon at each ear.\n\nReturns\n\nnumpy.ndarray\n\nMonaural loudness level in phon at each ear.\n\nReturn type\n\nndarray"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.TonalityDIN45681.plot.html#plot","title":"plot","text":"plot\n\n\n\nTonalityDIN45681.plot()\n\nPlot the DIN 45681’s decisive difference and frequency, and tonal adjustment, over time.\n\nThis method displays the decisive difference DLj in dB, the decisive frequency in Hz, and\nthe tonal adjustment Kt in dB, over time."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.signal_utilities.ApplyGain.plot.html#plot","title":"plot","text":"plot\n\n\n\nApplyGain.plot()\n\nPlot the resulting signals in a single figure."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.ToneToNoiseRatio.get_nb_tones.html#get_nb_tones","title":"get_nb_tones","text":"get_nb_tones\n\n\n\nToneToNoiseRatio.get_nb_tones()\n\nGet the number of tones.\n\nReturns\n\npython:int\n\nNumber of tones.\n\nReturn type\n\nint"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.standard_levels.OneThirdOctaveLevelsFromPSD.frequency_weighting.html#frequency_weighting","title":"frequency_weighting","text":"frequency_weighting\n\n\n\nproperty OneThirdOctaveLevelsFromPSD.frequency_weighting: str\n\nFrequency weighting of the computed levels.\n\nAvailable options are “”, “A”, “B”, and “C”, allowing level calculation in dB (or\ndBSPL), dBA, dBB, and dBC, respectively."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.xtract.XtractDenoiserParameters.noise_psd.html#noise_psd","title":"noise_psd","text":"noise_psd\n\n\n\nproperty XtractDenoiserParameters.noise_psd: Field\n\nPower spectral density (PSD) of the noise in unit^2/Hz (Pa^2/Hz for example)."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.Roughness.get_bark_band_frequencies.html#get_bark_band_frequencies","title":"get_bark_band_frequencies","text":"get_bark_band_frequencies\n\n\n\nRoughness.get_bark_band_frequencies()\n\nGet Bark band frequencies.\n\nThis method gets the frequencies corresponding to Bark band indexes as a NumPy array.\n\nReference:\nTraunmüller, Hartmut. “Analytical Expressions for the Tonotopic Sensory Scale.” Journal of\nthe Acoustical Society of America. Vol. 88, Issue 1, 1990, pp. 97–100.\n\nReturns\n\nnumpy.ndarray\n\nArray of Bark band frequencies.\n\nReturn type\n\nndarray"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.SharpnessDIN45692.signal.html#signal","title":"signal","text":"signal\n\n\n\nproperty SharpnessDIN45692.signal: Field\n\nInput signal in Pa."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.TonalityISOTS20065.get_spectrum_details.html#get_spectrum_details","title":"get_spectrum_details","text":"get_spectrum_details\n\n\n\nTonalityISOTS20065.get_spectrum_details(spectrum_index)\n\nGet the spectrum data for a specific spectrum.\n\nReturns the data (decisive audibility, uncertainty, and decisive frequency) corresponding\nto a specific spectrum (time step).\n\nParameters\n\nspectrum_index: int\n\nIndex of the spectrum. The index is 0-based.\n\nReturns\n\npython:tuple[python:float]\n\nFirst element: decisive audibility DLj in dB.\n\nSecond element: uncertainty in dB.\n\nThird element: decisive frequency in Hz.\n\nReturn type\n\ntuple[float]"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.ToneToNoiseRatio.plot.html#plot","title":"plot","text":"plot\n\n\n\nToneToNoiseRatio.plot()\n\nPlot the TNR for all identified peaks, along with the threshold curve."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.sound_composer.SourceControlSpectrum.plot.html#plot","title":"plot","text":"plot\n\n\n\nSourceControlSpectrum.plot()\n\nPlot the output.\n\nThere is nothing to plot."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.xtract.XtractTonal.output_tonal_signals.html#output_tonal_signals","title":"output_tonal_signals","text":"output_tonal_signals\n\n\n\nproperty XtractTonal.output_tonal_signals: FieldsContainer | Field\n\nOutput tonal signals.\n\nOne or more tonal signals as a DPF field or fields container (depending on the input)."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.LoudnessISO532_1_TimeVarying.field_type.html#field_type","title":"field_type","text":"field_type\n\n\n\nproperty LoudnessISO532_1_TimeVarying.field_type: str\n\nSound field type.\n\nAvailable options are “Free” and “Diffuse”."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.sound_composer.Track.set_from_generic_data_containers.html#set_from_generic_data_containers","title":"set_from_generic_data_containers","text":"set_from_generic_data_containers\n\n\n\nTrack.set_from_generic_data_containers(track_data, sampling_frequency=44100.0)\n\nSet the track data from a generic data container.\n\nThis method is meant to set the track data from a generic data container obtained when\nloading a Sound Composer project file (.scn) with the method SoundComposer.load().\n\nParameters\n\ntrack_data\n\nGenericDataContainer\n\nTrack data as a DPF generic data container.\n\nsampling_frequency\n\npython:float, default: 44100.0\n\nSampling frequency in Hz to use in the creation of track’s filter."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.LoudnessISO532_2.get_binaural_loudness_level_phon.html#get_binaural_loudness_level_phon","title":"get_binaural_loudness_level_phon","text":"get_binaural_loudness_level_phon\n\n\n\nLoudnessISO532_2.get_binaural_loudness_level_phon()\n\nGet the binaural loudness level in phon.\n\nReturns\n\npython:float\n\nBinaural loudness level in phon.\n\nReturn type\n\nfloat"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.signal_utilities.CreateSoundField.data.html#data","title":"data","text":"data\n\n\n\nproperty CreateSoundField.data: ndarray\n\nData to store in the created DPF field."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.standard_levels.LevelOverTime.scale.html#scale","title":"scale","text":"scale\n\n\n\nproperty LevelOverTime.scale: str\n\nScale type of the output level.\n\nSpecifies whether the output level shall be provided on a decibel (“dB”) or linear\n(“RMS”) scale."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.signal_utilities.Resample.get_output_as_nparray.html#get_output_as_nparray","title":"get_output_as_nparray","text":"get_output_as_nparray\n\n\n\nResample.get_output_as_nparray()\n\nGet the resampled signal as a NumPy array.\n\nReturns\n\nnumpy.ndarray\n\nResampled signal in a NumPy array.\n\nReturn type\n\nndarray"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.signal_utilities.ZeroPad.html#zeropad","title":"ZeroPad","text":"ZeroPad\n\n\n\nclass ansys.sound.core.signal_utilities.ZeroPad(signal=None, duration_zeros=0.0)\n\nAdds zeros to the end of a signal.\n\nClass instantiation takes the following parameters.\n\nParameters\n\nsignal\n\nField | FieldsContainer, default: python:None\n\nSignal to add zeros to the end of as a DPF field or fields container.\n\nduration_zeros\n\nfloat: default: 0.0\n\nDuration in seconds of the zeros to append to the input signal.\n\nMethods\n\n\n\nAttributes\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.signal_utilities.SumSignals.get_output.html#get_output","title":"get_output","text":"get_output\n\n\n\nSumSignals.get_output()\n\nGet the summed signals as a DPF field.\n\nReturns\n\nField\n\nSummed signal in a DPF field.\n\nReturn type\n\nField"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.LoudnessANSI_S3_4.get_loudness_sone.html#get_loudness_sone","title":"get_loudness_sone","text":"get_loudness_sone\n\n\n\nLoudnessANSI_S3_4.get_loudness_sone()\n\nGet the loudness in sone.\n\nReturns\n\npython:float\n\nLoudness value in sone.\n\nReturn type\n\nfloat"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.LoudnessISO532_1_Stationary.get_loudness_sone.html#get_loudness_sone","title":"get_loudness_sone","text":"get_loudness_sone\n\n\n\nLoudnessISO532_1_Stationary.get_loudness_sone()\n\nGet the loudness in sone.\n\nReturns\n\npython:float\n\nLoudness in sone.\n\nReturn type\n\nfloat"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.LoudnessISO532_2.get_erbn_numbers.html#get_erbn_numbers","title":"get_erbn_numbers","text":"get_erbn_numbers\n\n\n\nLoudnessISO532_2.get_erbn_numbers()\n\nGet the ERBn-number scale in Cam.\n\nThis method uses the equation (6) in ISO 532-2:2017 to convert the ERB center frequencies\ninto the ERBn-number scale in Cam.\n\nReturns\n\nnumpy.ndarray\n\nERBn-number scale in Cam.\n\nReturn type\n\nndarray"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.TonalityECMA418_2.edition.html#edition","title":"edition","text":"edition\n\n\n\nproperty TonalityECMA418_2.edition: str\n\nEdition of the ECMA-418-2 standard to use.\n\nAvailable options are “1st” for the 2020 version, and “3rd” for the 2024 version."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.standard_levels.LevelOverTime.get_level_max.html#get_level_max","title":"get_level_max","text":"get_level_max\n\n\n\nLevelOverTime.get_level_max()\n\nReturn the maximum level.\n\nReturns\n\npython:float\n\nThe maximum level value over time.\n\nReturn type\n\nfloat"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.xtract.Xtract.plot.html#plot","title":"plot","text":"plot\n\n\n\nXtract.plot()\n\nPlot the Xtract algorithm results."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.signal_utilities.WriteWav.plot.html#plot","title":"plot","text":"plot\n\n\n\nWriteWav.plot()\n\nPlot the output.\n\nThere is nothing to plot for the WriteWav class."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.spectrogram_processing.Stft.get_stft_phase_as_nparray.html#get_stft_phase_as_nparray","title":"get_stft_phase_as_nparray","text":"get_stft_phase_as_nparray\n\n\n\nStft.get_stft_phase_as_nparray()\n\nGet the phase of the STFT as a NumPy array.\n\nReturns\n\nnumpy.ndarray\n\nPhase of the STFT in a NumPy array.\n\nReturn type\n\nndarray"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.sound_composer.SourceControlSpectrum.method.html#method","title":"method","text":"method\n\n\n\nproperty SourceControlSpectrum.method: SpectrumSynthesisMethods\n\nMethod to use for the sound generation: IFFT or Hybrid."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.spectral_processing.PowerSpectralDensity.plot.html#plot","title":"plot","text":"plot\n\n\n\nPowerSpectralDensity.plot(display_in_dB=False)\n\nPlot the PSD.\n\nParameters\n\ndisplay_in_dB\n\nbool, default: python:False\n\nParameter that specifies whether the PSD should be plotted in dB/Hz (True)\nor unit^2/Hz (False)."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.xtract.XtractTransientParameters.lower_threshold.html#lower_threshold","title":"lower_threshold","text":"lower_threshold\n\n\n\nproperty XtractTransientParameters.lower_threshold: float\n\nLower threshold.\n\nLower threshold, which is related to the minimum energy of transient components.\nValues are between 0 and 100. You should set this parameter as high as possible\nprovided that no transient element remains in the remainder (non-transient signal)."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.xtract.XtractDenoiser.get_output_as_nparray.html#get_output_as_nparray","title":"get_output_as_nparray","text":"get_output_as_nparray\n\n\n\nXtractDenoiser.get_output_as_nparray()\n\nGet the output of the denoising as NumPy arrays.\n\nReturns\n\npython:tuple[np.ndarray, np.ndarray]\n\nDenoised signal and noise signal in a tuple as NumPy arrays.\n\nReturn type\n\ntuple[ndarray, ndarray]"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.spectrogram_processing.IsolateOrders.signal.html#signal","title":"signal","text":"signal\n\n\n\nproperty IsolateOrders.signal: Field | FieldsContainer\n\nInput signal."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.TonalityISOTS20065.get_mean_audibility.html#get_mean_audibility","title":"get_mean_audibility","text":"get_mean_audibility\n\n\n\nTonalityISOTS20065.get_mean_audibility()\n\nGet the ISO/TS 20065 tonality (mean audibility DL), in dB.\n\nReturns\n\npython:float\n\nMean audibility DL in dB.\n\nReturn type\n\nfloat"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.TonalityECMA418_2.signal.html#signal","title":"signal","text":"signal\n\n\n\nproperty TonalityECMA418_2.signal: Field\n\nInput signal in Pa."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.standard_levels.OverallLevel.get_output.html#get_output","title":"get_output","text":"get_output\n\n\n\nOverallLevel.get_output()\n\nReturn the overall level.\n\nReturns\n\npython:float\n\nThe overall level value.\n\nReturn type\n\nfloat"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.SpectralCentroid.get_output.html#get_output","title":"get_output","text":"get_output\n\n\n\nSpectralCentroid.get_output()\n\nGet the spectral centroid.\n\nReturns\n\npython:float\n\nSpectral centroid in Hz.\n\nReturn type\n\nfloat"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.xtract.XtractTransient.get_output.html#get_output","title":"get_output","text":"get_output\n\n\n\nXtractTransient.get_output()\n\nGet the output of the transient extraction.\n\nReturns\n\npython:tuple[FieldsContainer, FieldsContainer] | python:tuple[Field, Field]\n\nOne or more transient signals and non-transient signals\nin a tuple as DPF fields containers or fields (depending on the input).\n\nReturn type\n\ntuple[FieldsContainer, FieldsContainer] | tuple[Field, Field]"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.LoudnessANSI_S3_4.plot.html#plot","title":"plot","text":"plot\n\n\n\nLoudnessANSI_S3_4.plot()\n\nPlot the output.\n\nThere is nothing to plot."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.TonalityECMA418_2.field_type.html#field_type","title":"field_type","text":"field_type\n\n\n\nproperty TonalityECMA418_2.field_type: str\n\nSound field type.\n\nAvailable options are “Free” and “Diffuse”."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.ToneToNoiseRatio.psd.html#psd","title":"psd","text":"psd\n\n\n\nproperty ToneToNoiseRatio.psd: Field\n\nInput power spectral density (PSD).\n\nThe PSD field has the following characteristics:\n\nnum_entities = 1\n\nlocation = “TimeFreq_sets”\n\ndata: Vector of amplitude values in unit^2/Hz\n\ntime_freq_support: Vector of regularly spaced frequencies in Hz associated with\namplitude values (from 0 Hz to the maximum frequency)\n\nunit = “<unit>^2/Hz” (where <unit> is Pa for example).\n\nYou can use the function\ncreate_scalar_field()\nto create the field."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.sound_power.SoundPowerLevelISO3744.C1.html#c1","title":"C1","text":"C1\n\n\n\nproperty SoundPowerLevelISO3744.C1: float\n\nMeteorological reference quantity correction C1 in dB.\n\nSee annex G of ISO 3744."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.sound_power.SoundPowerLevelISO3744.surface_radius.html#surface_radius","title":"surface_radius","text":"surface_radius\n\n\n\nproperty SoundPowerLevelISO3744.surface_radius: float\n\nRadius of the measurement surface in m."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.sound_power.SoundPowerLevelISO3744.get_microphone_signal.html#get_microphone_signal","title":"get_microphone_signal","text":"get_microphone_signal\n\n\n\nSoundPowerLevelISO3744.get_microphone_signal(index)\n\nGet microphone signal.\n\nGets the microphone signal that corresponds to the specified index.\n\nParameters\n\nindex\n\npython:int\n\nSignal index.\n\nReturns\n\nField\n\nMicrophone signal in Pa for the specified index.\n\nReturn type\n\nField"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.spectrogram_processing.IsolateOrders.process.html#process","title":"process","text":"process\n\n\n\nIsolateOrders.process()\n\nIsolate the orders of the signal.\n\nThis method calls the appropriate DPF Sound operator to isolate the orders of the signal."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.TonalityECMA418_2.get_output_as_nparray.html#get_output_as_nparray","title":"get_output_as_nparray","text":"get_output_as_nparray\n\n\n\nTonalityECMA418_2.get_output_as_nparray()\n\nGet the ECMA-418-2 tonality data, in a tuple of NumPy arrays.\n\nReturns\n\npython:tuple[numpy.ndarray]\n\nFirst element: ECMA-418-2 tonality, in tuHMS.\n\nSecond element: ECMA-418-2 tonality over time, in tuHMS.\n\nThird element: ECMA-418-2 tone frequency over time, in Hz.\n\nFourth element: associated time scale for tonality, in s.\n\nFifth element: associated time scale for tone frequency, in s.\n\nReturn type\n\ntuple[float, ndarray, ndarray]"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.spectrogram_processing.Istft.stft.html#stft","title":"stft","text":"stft\n\n\n\nproperty Istft.stft: FieldsContainer\n\nInput short-time Fourier transform.\n\nSTFT format is the same as that which is produced by the Stft class."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.standard_levels.OneThirdOctaveLevelsFromSignal.get_center_frequencies.html#get_center_frequencies","title":"get_center_frequencies","text":"get_center_frequencies\n\n\n\nOneThirdOctaveLevelsFromSignal.get_center_frequencies()\n\nReturn the center frequencies in Hz of the band levels as a numpy array.\n\nReturns\n\nnp.ndarray\n\nThe center frequencies in Hz of the band levels.\n\nReturn type\n\nndarray"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.standard_levels.OctaveLevelsFromPSD.psd.html#psd","title":"psd","text":"psd\n\n\n\nproperty OctaveLevelsFromPSD.psd: Field\n\nInput power spectral density (PSD)."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.signal_utilities.Resample.plot.html#plot","title":"plot","text":"plot\n\n\n\nResample.plot()\n\nPlot the resulting signals in a single figure."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.TonalityDIN45681.get_spectrum_details.html#get_spectrum_details","title":"get_spectrum_details","text":"get_spectrum_details\n\n\n\nTonalityDIN45681.get_spectrum_details(spectrum_index)\n\nGet the spectrum data for a specific spectrum.\n\nReturns the data (decisive difference, uncertainty, and decisive frequency) corresponding\nto a specific spectrum (time step).\n\nParameters\n\nspectrum_index: int\n\nIndex of the spectrum. The index is 0-based.\n\nReturns\n\npython:tuple[python:float]\n\nFirst element: decisive difference DLj in dB.\n\nSecond element: uncertainty in dB.\n\nThird element: decisive frequency in Hz.\n\nReturn type\n\ntuple[float]"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.TonalityISO1996_2_OverTime.get_tonal_audibility_over_time.html#get_tonal_audibility_over_time","title":"get_tonal_audibility_over_time","text":"get_tonal_audibility_over_time\n\n\n\nTonalityISO1996_2_OverTime.get_tonal_audibility_over_time()\n\nGet the ISO 1996-2 tonal audibility over time.\n\nReturns\n\nnumpy.ndarray\n\nISO 1996-2 tonal audibility over time, in dB.\n\nReturn type\n\nndarray"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.sound_composer.SourceControlTime.get_output_as_nparray.html#get_output_as_nparray","title":"get_output_as_nparray","text":"get_output_as_nparray\n\n\n\nSourceControlTime.get_output_as_nparray()\n\nGet output as a NumPy array.\n\nThere is nothing to output.\n\nReturns\n\nnumpy.ndarray\n\nEmpty NumPy array.\n\nReturn type\n\nndarray"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.spectrogram_processing.Stft.process.html#process","title":"process","text":"process\n\n\n\nStft.process()\n\nCompute the STFT.\n\nThis method calls the appropriate DPF Sound operator to compute the STFT of the signal."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.sound_composer.SourceSpectrum.plot.html#plot","title":"plot","text":"plot\n\n\n\nSourceSpectrum.plot()\n\nPlot the resulting signal."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.ToneToNoiseRatioForOrdersOverTime.process.html#process","title":"process","text":"process\n\n\n\nToneToNoiseRatioForOrdersOverTime.process()\n\nCompute the tone-to-noise ratio for orders.\n\nThis method calls the appropriate DPF Sound operator to compute the tone-to-noise ratio\non the orders of the input signal."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.signal_utilities.CropSignal.plot.html#plot","title":"plot","text":"plot\n\n\n\nCropSignal.plot()\n\nPlot the resulting signals in a single figure."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.standard_levels.LevelOverTime.get_output.html#get_output","title":"get_output","text":"get_output\n\n\n\nLevelOverTime.get_output()\n\nReturn the maximum level and level over time.\n\nReturns\n\npython:tuple\n\nFirst element (float): maximum level.\n\nSecond element (Field): level over time.\n\nReturn type\n\ntuple"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.standard_levels.OctaveLevelsFromPSD.use_ansi_s1_11_1986.html#use_ansi_s1_11_1986","title":"use_ansi_s1_11_1986","text":"use_ansi_s1_11_1986\n\n\n\nproperty OctaveLevelsFromPSD.use_ansi_s1_11_1986: bool\n\nWhether to simulate the 1/3-octave band filterbank (ANSI S1.11-1986/IEC 61260)."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.sound_power.SoundPowerLevelISO3744.get_output_as_nparray.html#get_output_as_nparray","title":"get_output_as_nparray","text":"get_output_as_nparray\n\n\n\nSoundPowerLevelISO3744.get_output_as_nparray()\n\nGet sound power level data as floats and NumPy arrays.\n\nReturns\n\npython:tuple\n\nFirst element: unweighted sound power level (Lw) in dB.\n\nSecond element: A-weighted sound power level (Lw(A)) in dBA.\n\nThird element: NumPy array of the octave-band sound power levels, in dB.\n\nFourth element: NumPy array of the octave-band center frequencies, in Hz.\n\nFifth element: NumPy array of the one-third-octave-band sound power levels, in dB.\n\nSixth element: NumPy array of the one-third-octave-band center frequencies, in Hz.\n\nReturn type\n\ntuple"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.sound_composer.Track.get_output_as_nparray.html#get_output_as_nparray","title":"get_output_as_nparray","text":"get_output_as_nparray\n\n\n\nTrack.get_output_as_nparray()\n\nGet the generated signal of the track, as a NumPy array.\n\nReturns\n\nnumpy.ndarray\n\nGenerated signal as a NumPy array.\n\nReturn type\n\nndarray"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.xtract.Xtract.output_noise_signal.html#output_noise_signal","title":"output_noise_signal","text":"output_noise_signal\n\n\n\nproperty Xtract.output_noise_signal: tuple[FieldsContainer, FieldsContainer] | tuple[Field, Field]\n\nNoise signal.\n\nNoise signal in a tuple of DPF fields or fields containers."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.TonalityAures.overlap.html#overlap","title":"overlap","text":"overlap\n\n\n\nproperty TonalityAures.overlap: float\n\nOverlap in % between two successive windows."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.LoudnessANSI_S3_4.get_loudness_level_phon.html#get_loudness_level_phon","title":"get_loudness_level_phon","text":"get_loudness_level_phon\n\n\n\nLoudnessANSI_S3_4.get_loudness_level_phon()\n\nGet the loudness level in phon.\n\nReturns\n\npython:float\n\nLoudness level value in phon.\n\nReturn type\n\nfloat"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.FluctuationStrength.get_output.html#get_output","title":"get_output","text":"get_output\n\n\n\nFluctuationStrength.get_output()\n\nGet fluctuation strength and specific fluctuation strength.\n\nReturns\n\npython:tuple\n\nFirst element (float): fluctuation strength in vacil.\n\nSecond element (Field): specific fluctuation strength, that is, the fluctuation\nstrength in each Bark band, in vacil.\n\nReturn type\n\ntuple"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.ProminenceRatioForOrdersOverTime.process.html#process","title":"process","text":"process\n\n\n\nProminenceRatioForOrdersOverTime.process()\n\nCompute the prominence ratio for orders.\n\nThis method calls the appropriate DPF Sound operator to compute the prominence ratio\non the selected orders of the input signal."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.xtract.XtractDenoiserParameters.create_noise_psd_from_white_noise_level.html#create_noise_psd_from_white_noise_level","title":"create_noise_psd_from_white_noise_level","text":"create_noise_psd_from_white_noise_level\n\n\n\nXtractDenoiserParameters.create_noise_psd_from_white_noise_level(white_noise_level, sampling_frequency, window_length=50)\n\nCreate a power spectral density (PSD) of noise from the white noise level.\n\nParameters\n\nwhite_noise_level\n\npython:float\n\nPower of the white noise  in dB SPL.\n\nsampling_frequency\n\npython:float, optional\n\nSampling frequency in Hz of the signal to denoise,\nwhich can be different from the signal used for creating the noise profile.\nThe default is the sampling frequency of the noise signal.\n\nwindow_length\n\npython:int, default: 50\n\nWindow length for the noise level estimation in milliseconds (ms).\n\nReturns\n\nField\n\nPSD of noise in unit^2/Hz (Pa^2/Hz for example).\n\nReturn type\n\nField"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.TonalityDIN45681.get_tone_number.html#get_tone_number","title":"get_tone_number","text":"get_tone_number\n\n\n\nTonalityDIN45681.get_tone_number(spectrum_index)\n\nGet the number of tones for a specific spectrum.\n\nReturns the number of tones detected in a specific spectrum (that is, at a specific time\nstep).\n\nParameters\n\nspectrum_index: int\n\nIndex of the spectrum where the tone was detected. The index is 0-based.\n\nReturns\n\npython:int\n\nNumber of tones detected in this spectrum.\n\nReturn type\n\nint"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.signal_utilities.WriteWav.process.html#process","title":"process","text":"process\n\n\n\nWriteWav.process()\n\nWrite the signal to a WAV file.\n\nThis method calls the appropriate DPF Sound operator to write the signal to a WAV file."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.Roughness.get_roughness.html#get_roughness","title":"get_roughness","text":"get_roughness\n\n\n\nRoughness.get_roughness()\n\nGet the overall roughness in asper.\n\nReturns\n\npython:float\n\nRoughness value in asper.\n\nReturn type\n\nfloat"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.LoudnessISO532_1_TimeVarying.signal.html#signal","title":"signal","text":"signal\n\n\n\nproperty LoudnessISO532_1_TimeVarying.signal: Field\n\nInput signal in Pa."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.ToneToNoiseRatio.html#tonetonoiseratio","title":"ToneToNoiseRatio","text":"ToneToNoiseRatio\n\n\n\nclass ansys.sound.core.psychoacoustics.ToneToNoiseRatio(psd=None, frequency_list=None)\n\nComputes the ECMA 418-1/ISO 7779 tone-to-noise ratio (TNR).\n\nThis class computes the TNR from a power spectral density (PSD), according to the ECMA 418-1\nand ISO 7779 standards.\n\nClass instantiation takes the following parameters.\n\nParameters\n\npsd\n\nField\n\nPSD of the signal on which to compute TNR.\nThe PSD field has the following characteristics:\n\nnum_entities = 1\n\nlocation = “TimeFreq_sets”\n\ndata: Vector of amplitude values in unit^2/Hz\n\ntime_freq_support: Vector of regularly spaced frequencies in Hz associated with\namplitude values (from 0 Hz to the maximum frequency)\n\nunit = “<unit>^2/Hz” (where <unit> is Pa for example).\n\nYou can use the function\ncreate_scalar_field()\nto create the field.\n\nfrequency_list\n\npython:list, default: python:None\n\nList of the frequencies in Hz of the tones (peaks in the spectrum) for which\nto calculate the TNR. The default is None, in which case a peak detection\nmethod is applied to automatically find the tones in the input spectrum. Then,\nthe TNR is calculated for each detected tone.\n\nMethods\n\n\n\nAttributes\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.xtract.XtractDenoiserParameters.get_parameters_as_generic_data_container.html#get_parameters_as_generic_data_container","title":"get_parameters_as_generic_data_container","text":"get_parameters_as_generic_data_container\n\n\n\nXtractDenoiserParameters.get_parameters_as_generic_data_container()\n\nGet the parameters as a generic data container.\n\nReturns\n\nGenericDataContainer\n\nParameter structure in a generic data container.\n\nReturn type\n\nGenericDataContainer"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.LoudnessISO532_1_Stationary.field_type.html#field_type","title":"field_type","text":"field_type\n\n\n\nproperty LoudnessISO532_1_Stationary.field_type: str\n\nSound field type.\n\nAvailable options are “Free” and “Diffuse”."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.xtract.XtractTransientParameters.get_output.html#get_output","title":"get_output","text":"get_output\n\n\n\nXtractTransientParameters.get_output()\n\nGet output.\n\nThere is nothing to output.\n\nReturns\n\npython:None\n\nNone\n\nReturn type\n\nNone"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.signal_utilities.ApplyGain.gain_in_db.html#gain_in_db","title":"gain_in_db","text":"gain_in_db\n\n\n\nproperty ApplyGain.gain_in_db: bool\n\nTrue if input gain is in dB, or False if it is in linear unit.\n\nBoolean that indicates whether the input gain is provided in decibels (True) or in\nlinear unit (False)."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.TonalityDIN45681.get_tone_details.html#get_tone_details","title":"get_tone_details","text":"get_tone_details\n\n\n\nTonalityDIN45681.get_tone_details(spectrum_index, tone_index)\n\nGet the tone data, for a specific spectrum.\n\nReturns all the data associated with a specific detected tone, in a specific spectrum (that\nis, at a specific time step).\n\nParameters\n\nspectrum_index: int\n\nIndex of the spectrum where the tone was detected. The index is 0-based.\n\ntone_index: int\n\nIndex of the tone whose details are requested. The index is 0-based.\n\nReturns\n\npython:tuple\n\nFirst element (float): decisive difference DLj in dB.\n\nSecond element (float): uncertainty, in dB.\n\nThird element (float): decisive frequency, in Hz.\n\nFourth element (str): tone type (’’ for individual tones, or ‘FG’ for groups\nof tones).\n\nFifth element (float): critical band lower limit, in Hz.\n\nSixth element (float): critical band upper limit, in Hz.\n\nSeventh element (float): mean narrow-band masking noise level Ls, in dBA.\n\nEighth element (float): tone level Lt, in dBA.\n\nNinth element (float): masking noise level Lg, in dBA.\n\nTenth element (float): masking index av, in dB.\n\nReturn type\n\ntuple"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.signal_utilities.SumSignals.html#sumsignals","title":"SumSignals","text":"SumSignals\n\n\n\nclass ansys.sound.core.signal_utilities.SumSignals(signals=None)\n\nSums signals.\n\nClass instantiation takes the following parameters.\n\nParameters\n\nsignals\n\nFieldsContainer, default: python:None\n\nInput signals to sum. Each field of the signal is summed.\n\nMethods\n\n\n\nAttributes\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.LoudnessISO532_1_TimeVarying.html#loudnessiso532_1_timevarying","title":"LoudnessISO532_1_TimeVarying","text":"LoudnessISO532_1_TimeVarying\n\n\n\nclass ansys.sound.core.psychoacoustics.LoudnessISO532_1_TimeVarying(signal=None, field_type='Free')\n\nComputes ISO 532-1:2017 loudness for time-varying sounds.\n\nThis class computes the loudness of a signal according to the ISO 532-1:2017 standard,\ncorresponding to the “Zwicker method”, for time-varying sounds.\n\nClass instantiation takes the following parameters.\n\nParameters\n\nsignal\n\nField, default: python:None\n\nSignal in Pa on which to compute time-varying ISO532-1 loudness.\n\nfield_type\n\npython:str, default: “Free”\n\nSound field type. Available options are “Free” and “Diffuse”.\n\nMethods\n\n\n\nAttributes\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.standard_levels.OneThirdOctaveLevelsFromPSD.process.html#process","title":"process","text":"process\n\n\n\nOneThirdOctaveLevelsFromPSD.process()\n\nCompute the band levels."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.sound_composer.SourceControlTime.plot.html#plot","title":"plot","text":"plot\n\n\n\nSourceControlTime.plot()\n\nPlot the control profile."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.sound_composer.SourceControlTime.description.html#description","title":"description","text":"description\n\n\n\nproperty SourceControlTime.description: str\n\nDescription of the control profile.\n\nThis description is used when saving a Sound Composer project (.scn file). When loading the\nproject file in the Sound Composer module of SAS, this description is displayed in the\ntrack’s source control tab.\n\nThe description is reset every time the attribute control is modified."},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.signal_utilities.CropSignal.get_output.html#get_output","title":"get_output","text":"get_output\n\n\n\nCropSignal.get_output()\n\nGet the cropped signal as a DPF fields container.\n\nReturns\n\nFieldsContainer | Field\n\nCropped signal in a DPF fields container.\n\nReturn type\n\nFieldsContainer | Field"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.TonalityISO1996_2_OverTime.get_time_scale.html#get_time_scale","title":"get_time_scale","text":"get_time_scale\n\n\n\nTonalityISO1996_2_OverTime.get_time_scale()\n\nGet the time scale.\n\nReturns\n\nnumpy.ndarray\n\nTime scale in s.\n\nReturn type\n\nndarray"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.sound_composer.SoundComposer.html#soundcomposer","title":"SoundComposer","text":"SoundComposer\n\n\n\nclass ansys.sound.core.sound_composer.SoundComposer(project_path='')\n\nSound Composer project class.\n\nThis class creates a Sound Composer project. A project is made of several tracks, each\ncontaining a source, to generate the sound, and an optional filter, to model the transfer\nbetween the source and the receiver.\n\nClass instantiation takes the following parameter.\n\nParameters\n\nproject_path\n\npython:str, default: “”\n\nPath to the Sound Composer project file to load (.scn).\n\nMethods\n\n\n\nAttributes\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sound.core.psychoacoustics.TonalityISO1996_2.signal.html#signal","title":"signal","text":"signal\n\n\n\nproperty TonalityISO1996_2.signal: Field\n\nInput signal in Pa."}]